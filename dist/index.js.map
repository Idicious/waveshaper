{"version":3,"sources":["webpack:///webpack/bootstrap f7b75ec3aeb275868524","webpack:///./src/core/waveshaper.ts","webpack:///./node_modules/hammerjs/hammer.js","webpack:///./src/index.ts","webpack:///./src/core/manager.ts","webpack:///./src/strategies/calculate/peak.ts","webpack:///./src/strategies/calculate/rms.ts","webpack:///./src/strategies/render/line.ts","webpack:///./src/methods/flatten.ts","webpack:///./src/interaction/drag.ts","webpack:///./src/interaction/resize.ts","webpack:///./src/interaction/cut.ts","webpack:///./src/interaction/pan.ts","webpack:///./src/interaction/zoom.ts","webpack:///./src/config/hammerconfig.ts","webpack:///./src/config/managerconfig.ts"],"names":[],"mappings":"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OAAO;AAClB,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,UAAU;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,UAAU;AACrB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,0BAA0B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,iBAAiB;AAC5B,WAAW,MAAM;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,YAAY;AACvB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,MAAM,OAAO,KAAK,EAAE,KAAK,EAAE,KAAK;AAC3C,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,aAAa,MAAM,GAAG,KAAK,EAAE,KAAK;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,YAAY;AACvB,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,MAAM;AACjB,YAAY,OAAO;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO,KAAK;AACvB,WAAW,OAAO,KAAK;AACvB,WAAW,MAAM;AACjB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB;;AAEzB;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;;AAED;AACA,UAAU;AACV,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,gBAAgB;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;;AAED;AACA,UAAU;AACV,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,gBAAgB;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,6BAA6B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA,4BAA4B,8BAA8B;;AAE1D;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA,gBAAgB;;AAEhB;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB;AACjB;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iCAAiC;;AAEjC,oCAAoC;AACpC;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA,sCAAsC;;AAEtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,MAAM;AACvB;AACA,kCAAkC,EAAE;;AAEpC;AACA;AACA;AACA,iBAAiB;AACjB;AACA,gCAAgC,EAAE;;AAElC;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;;AAEA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,MAAM;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,kBAAkB;AAC7B,WAAW,WAAW;AACtB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,EAAE;AACnB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,WAAW,YAAY;AACvB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,4BAA4B,cAAc;AAC1C,2BAA2B,cAAc;AACzC,2BAA2B,gCAAgC;AAC3D,yBAAyB,gCAAgC;AACzD;AACA,yBAAyB,4BAA4B;AACrD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,OAAO;AAClB;AACA;AACA;AACA,4BAA4B,gCAAgC;;AAE5D;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,eAAe,kBAAkB;AACjC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA,eAAe,kBAAkB;AACjC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,mGAAmG,GAAG;AACtG;;AAEA;AACA;AACA;AACA,KAAK;AAAA;AACL,CAAC;AACD;AACA,CAAC;AACD;AACA;;AAEA,CAAC;;;;;;;;;;ACllFD,uCAA8C;AAIrC,2BAJF,iBAAgB,CAIE;AAHzB,0CAA0C;AAGf,qBAHpB,oBAAU,CAGoB;AAEpC,MAAc,CAAC,kBAAkB,CAAC,GAAG,iBAAgB,CAAC;;;;;;;;;;;;;;;;;;ACNvD,0CAAsC;AAEtC,oCAA4C;AAC5C,sCAAgD;AAChD,oCAA0C;AAC1C,oCAA0C;AAC1C,qCAA4C;AAC5C,oCAAmC;AACnC,6CAAkD;AAClD,8CAAiH;AAEjH;;;;;GAKG;AACH;IAuGI;;;;;;OAMG;IACH,0BAAY,UAAkB,EAAE,SAAsB,EAAE,OAAwC;QAAxC,oCAA0B,uBAAc;QA5GhG;;;;;WAKG;QACa,gBAAW,GAAG,IAAI,GAAG,EAAsB,CAAC;QAE5D;;;;;WAKG;QACa,cAAS,GAAG,IAAI,GAAG,EAAwB,CAAC;QA+FxD,EAAE,EAAC,UAAU,IAAI,IAAI,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACzC,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;QACtE,CAAC;QAED,kEAAkE;QAClE,OAAO,gBAAQ,uBAAc,EAAK,OAAO,CAAE,CAAC;QAE5C,4BAA4B;QAC5B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;QAC3B,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;QAE7B,4BAA4B;QAC5B,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;QACrC,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,CAAC;QAC/C,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;QAC7C,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;QACnC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;QAErC,mBAAmB;QACnB,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,SAAS,EAAE,sBAAY,CAAC,CAAC;QAElD,cAAS,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QACxC,gBAAW,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAC/B,aAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAC5B,aAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAC5B,cAAS,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACjC,CAAC;IAED;;;;;;;;;OASG;IACH,wCAAa,GAAb,UAAc,EAAU,EAAE,QAAmB,EAAE,KAAa;QACxD,IAAM,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC7C,EAAE,EAAC,SAAS,IAAI,IAAI,CAAC,CAAC,CAAC;YACnB,IAAM,IAAI,GAAG,IAAI,oBAAU,CAAC,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAC1E,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;YAE/B,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAED,MAAM,CAAC,SAAS,CAAC;IACrB,CAAC;IAED,wCAAa,GAAb,UAAc,EAAU;QACpB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACpC,CAAC;IAED;;;;;;;OAOG;IACH,uCAAY,GAAZ,UAAa,EAAU,EAAE,IAAiB;QACtC,EAAE,EAAC,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACzB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;QAC5C,CAAC;IACL,CAAC;IAED;;;;;;OAMG;IACH,qCAAU,GAAV,UAAW,EAAU;QACjB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IAChC,CAAC;IAED;;;;;OAKG;IACH,kCAAO,GAAP,UAAQ,EAAU;QACd,IAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,CAAC;QAC3C,EAAE,EAAC,UAAU,IAAI,IAAI,CAAC;YAAC,UAAU,CAAC,OAAO,EAAE,CAAC;IAChD,CAAC;IAED;;;;;OAKG;IACH,sCAAW,GAAX;QACI,IAAI,WAAW,GAAG,CAAC,CAAC;QACpB,GAAG,CAAC,CAAa,UAAqC,EAArC,UAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAArC,cAAqC,EAArC,IAAqC;YAAjD,IAAI,IAAI;YACT,IAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YAClC,EAAE,CAAC,CAAC,QAAQ,GAAG,WAAW,CAAC,CAAC,CAAC;gBACzB,WAAW,GAAG,QAAQ,CAAC;YAC3B,CAAC;SACJ;QACD,MAAM,CAAC,WAAW,CAAC;IACvB,CAAC;IAED;;;;;OAKG;IACH,4CAAiB,GAAjB;QACI,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;QACvB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,CAAC;QACxC,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;;;OAKG;IACH,yCAAc,GAAd;QACI,IAAI,QAAQ,GAAG,CAAC,CAAC;QACjB,GAAG,CAAC,CAAa,UAAqC,EAArC,UAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAArC,cAAqC,EAArC,IAAqC;YAAjD,IAAI,IAAI;YACT,IAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;YACzE,EAAE,CAAC,CAAC,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC;gBACnB,QAAQ,GAAG,KAAK,CAAC;YACrB,CAAC;SACJ;QAED,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAED;;;;;;;OAOG;IACH,+BAAI,GAAJ,UAAK,GAAoB,EAAE,SAAkB;QACzC,IAAM,SAAS,GAAG,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,GAAG,CAAC;QACpI,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACxC,IAAI,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9C,EAAE,EAAC,IAAI,IAAI,IAAI,CAAC;gBAAC,QAAQ,CAAC;YAE1B,IAAI,CAAC,SAAS,CACV,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,eAAe,EACpB,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,UAAU,EACf,SAAS,EACT,IAAI,CAAC,SAAS,CACjB,CAAC;QACN,CAAC;QAED,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACxC,IAAI,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9C,EAAE,EAAC,IAAI,IAAI,IAAI,CAAC;gBAAC,QAAQ,CAAC;YAE1B,IAAI,CAAC,IAAI,EAAE,CAAC;QAChB,CAAC;IACL,CAAC;IACL,uBAAC;AAAD,CAAC;;;;;;;;;;;AC1SD;;;;;;;;;;;;GAYG;AACH,mBAAe,UAAC,UAAkB,EAAE,eAAuB,EAAE,KAAa,EAAE,SAAqB,EAC7F,cAAsB,EAAE,UAAkB,EAAE,OAAkC;IAE9E,IAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC,CAAC;IAE3D,IAAM,KAAK,GAAG,cAAc,GAAG,eAAe,CAAC;IAC/C,IAAM,WAAW,GAAG,KAAK,GAAG,UAAU,CAAC;IAEvC,IAAM,eAAe,GAAG,eAAe,GAAG,UAAU,CAAC;IAErD,IAAM,KAAK,GAAe,EAAE,CAAC;IAC7B,4BAA4B;IAC5B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC;QAC7B,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,IAAI,GAAG,GAAG,CAAC,CAAC;QAEZ,IAAM,aAAa,GAAG,WAAW,GAAG,CAAC,CAAC,CAAC,GAAG,eAAe,CAAC,GAAG,UAAU,CAAC,CAAC;QACzE,IAAI,eAAe,UAAC;QACpB,GAAG,CAAC,CAAC,IAAI,GAAC,GAAG,CAAC,EAAE,GAAC,GAAG,SAAS,CAAC,MAAM,EAAE,GAAC,EAAE,EAAE,CAAC;YACxC,IAAM,QAAQ,GAAG,SAAS,CAAC,GAAC,CAAC,CAAC;YAC9B,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,IAAI,aAAa,IAAI,QAAQ,CAAC,GAAG,IAAI,aAAa,CAAC,CAAC,CAAC;gBACnE,eAAe,GAAG,QAAQ,CAAC;gBAC3B,KAAK,CAAC;YACV,CAAC;QACL,CAAC;QAED,EAAE,CAAC,CAAC,eAAe,IAAI,IAAI,CAAC,CAAC,CAAC;YAC1B,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACzB,QAAQ,CAAC;QACb,CAAC;QAED,IAAI,cAAc,GAAG,CAAC,CAAC;QACvB,EAAE,CAAC,CAAC,aAAa,GAAG,eAAe,GAAG,eAAe,CAAC,GAAG;eAClD,aAAa,GAAG,eAAe,GAAG,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;YAC7D,cAAc,GAAG,CAAC,CAAC;QACvB,CAAC;QAED,IAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QACnD,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC;YACjB,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC;YACtC,QAAQ,CAAC;QACb,CAAC;QAED,IAAM,WAAW,GAAG,eAAe,CAAC,KAAK,GAAG,eAAe,CAAC,aAAa,CAAC;QAC1E,IAAM,mBAAmB,GAAG,aAAa,GAAG,eAAe,CAAC,KAAK,CAAC;QAClE,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,mBAAmB,GAAG,WAAW,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC;QAEnF,IAAM,SAAS,GAAG,WAAW,GAAG,eAAe,CAAC;QAChD,IAAM,QAAM,GAAG,MAAM,CAAC,MAAM,CAAC;QAC7B,IAAM,OAAO,GAAG,QAAM,GAAG,SAAS,CAAC,CAAC,CAAC,QAAM,CAAC,CAAC,CAAC,SAAS,CAAC;QAExD,sDAAsD;QACtD,6DAA6D;QAC7D,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,WAAW,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC;YACrD,IAAM,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAEzB,wDAAwD;YACxD,EAAE,CAAC,CAAC,MAAM,GAAG,GAAG,CAAC;gBAAC,GAAG,GAAG,MAAM,CAAC;YAC/B,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,GAAG,GAAG,CAAC;gBAAC,GAAG,GAAG,MAAM,CAAC;QACxC,CAAC;QAED,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC;IAC9C,CAAC;IACD,MAAM,CAAC,KAAK,CAAC;AACjB,CAAC;;;;;;;;;;AC7ED;;;;;;;;;;;;GAYG;AACH,mBAAe,UAAC,UAAkB,EAAE,eAAuB,EAAE,KAAa,EAAE,SAAqB,EAC7F,cAAsB,EAAE,UAAkB,EAAE,OAAkC;IAE9E,IAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC,CAAC;IAC3D,IAAM,KAAK,GAAG,cAAc,GAAG,eAAe,CAAC;IAC/C,IAAM,WAAW,GAAG,KAAK,GAAG,UAAU,CAAC;IACvC,IAAM,eAAe,GAAG,eAAe,GAAG,UAAU,CAAC;IAErD,IAAM,IAAI,GAAgB,EAAE,CAAC;IAC7B,4BAA4B;IAC5B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC;QAC7B,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,IAAI,MAAM,GAAG,CAAC,CAAC;QAEf,IAAM,aAAa,GAAG,WAAW,GAAG,CAAC,CAAC,CAAC,GAAG,eAAe,CAAC,GAAG,UAAU,CAAC,CAAC;QACzE,IAAI,QAAQ,UAAC;QACb,GAAG,EAAC,IAAI,GAAC,GAAG,CAAC,EAAE,GAAC,GAAG,SAAS,CAAC,MAAM,EAAE,GAAC,EAAE,EAAE,CAAC;YACvC,IAAM,CAAC,GAAG,SAAS,CAAC,GAAC,CAAC,CAAC;YACvB,EAAE,EAAC,CAAC,CAAC,KAAK,IAAI,aAAa,IAAI,CAAC,CAAC,GAAG,IAAI,aAAa,CAAC,CAAC,CAAC;gBACpD,QAAQ,GAAG,CAAC,CAAC;gBACb,KAAK,CAAC;YACV,CAAC;QACL,CAAC;QAED,EAAE,EAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACxB,QAAQ,CAAC;QACb,CAAC;QAED,IAAI,cAAc,GAAG,CAAC,CAAC;QACvB,EAAE,EAAC,aAAa,GAAG,eAAe,GAAG,QAAQ,CAAC,GAAG;eAC1C,aAAa,GAAG,eAAe,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;YACtD,cAAc,GAAG,CAAC,CAAC;QACvB,CAAC;QAED,IAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC5C,EAAE,EAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC;YACrC,QAAQ,CAAC;QACb,CAAC;QAED,IAAM,WAAW,GAAG,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC;QAC5D,IAAM,mBAAmB,GAAG,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC;QAC3D,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,mBAAmB,GAAG,WAAW,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC;QACnF,IAAM,QAAM,GAAG,MAAM,CAAC,MAAM,CAAC;QAC7B,IAAM,OAAO,GAAG,WAAW,GAAG,eAAe,CAAC;QAC9C,IAAM,GAAG,GAAG,QAAM,GAAG,OAAO,CAAC,CAAC,CAAC,QAAM,CAAC,CAAC,CAAC,OAAO,CAAC;QAEhD,sDAAsD;QACtD,6DAA6D;QAC7D,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,WAAW,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC;YACjD,IAAM,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAEtB,wDAAwD;YACxD,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;gBACV,MAAM,IAAI,GAAG,GAAG,GAAG,CAAC;YACxB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,IAAI,GAAG,GAAG,GAAG,CAAC;YACxB,CAAC;QACL,CAAC;QAED,IAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,GAAG,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;QAC1E,IAAM,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,CAAC;QACzC,IAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,CAAC;QAExC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC;IAC7C,CAAC;IACD,MAAM,CAAC,IAAI,CAAC;AAChB,CAAC;;;;;;;;;;ACnFD;;;;;;;;;;GAUG;AACH,mBAAe,UAAC,QAAoB,EAAE,MAAc,EAAE,KAAa,EAAE,GAA6B,EAAE,KAAa;IAC7G,IAAM,KAAK,GAAG,MAAM,GAAG,CAAC,CAAC;IACzB,GAAG,CAAC,SAAS,GAAG,KAAK,CAAC;IACtB,GAAG,CAAC,WAAW,GAAG,OAAO,CAAC;IAE1B,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;IAC/B,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IAEnC,GAAG,EAAC,IAAI,CAAC,GAAG,CAAC,EAAE,SAAS,GAAG,KAAK,EAAE,YAAY,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QAClE,IAAM,cAAc,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QAC5C,EAAE,EAAC,CAAC,SAAS,IAAI,cAAc,CAAC,CAAC,CAAC;YAC9B,SAAS,GAAG,IAAI,CAAC;YACjB,YAAY,GAAG,CAAC,CAAC;QACrB,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,IAAI,CAAC,CAAC,cAAc,IAAI,CAAC,KAAK,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5D,SAAS,GAAG,KAAK,CAAC;YAClB,GAAG,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,EAAE,CAAC,GAAG,YAAY,EAAE,MAAM,CAAC,CAAC;QAC5D,CAAC;IACL,CAAC;IAED,GAAG,CAAC,SAAS,GAAG,OAAO,CAAC;IACxB,GAAG,CAAC,SAAS,EAAE,CAAC;IAEhB,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;IACrB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QAC9B,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;IAChE,CAAC;IACD,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;IAE9B,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;IACrB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QAC9B,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;IAChE,CAAC;IACD,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;IAC9B,GAAG,CAAC,SAAS,EAAE,CAAC;IAEhB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QAC9B,EAAE,EAAC,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC1D,GAAG,CAAC,IAAI,CAAC,CAAC,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;QAChC,CAAC;IACL,CAAC;IAED,GAAG,CAAC,IAAI,EAAE,CAAC;AACf,CAAC;;;;;;;;;;AChDD;;;;;;;;;;GAUG;AACH,mBAAe,UAAC,QAAmB;IACjC,IAAI,UAAU,GAAG,cAAc,CAAC,QAAQ,CAAC,CAAC;IAC1C,IAAI,SAAS,GAAG,cAAc,CAAC,UAAU,CAAC,CAAC;IAC3C,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;IAC7B,IAAI,OAAO,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;IAElC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;AAChC,CAAC;AAED;;;;;GAKG;AACH,IAAM,cAAc,GAAG,UAAC,QAAmB;IACzC,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,QAAQ,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,UAAG,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,EAArB,CAAqB,CAAC,CAAC,OAAO,CAAC,YAAE;QACvD,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC;YACrB,EAAE,CAAC,KAAK,GAAG,EAAE,KAAK,CAAC;QACrB,CAAC;QACD,IAAI,CAAC,CAAC;YACJ,EAAE,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,CAAC;IACH,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,QAAQ,CAAC;AAClB,CAAC;AAED;;;;;;GAMG;AACH,IAAM,cAAc,GAAG,UAAC,QAAmB;IACzC,MAAM,CAAC,QAAQ;SACZ,GAAG,CAAC,WAAC;QACJ,MAAM,CAAC;YACL,EAAE,EAAE,CAAC,CAAC,EAAE;YACR,KAAK,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,WAAW;YAC9B,GAAG,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,SAAS;YACvC,KAAK,EAAE,CAAC,CAAC,KAAK;YACd,aAAa,EAAE,CAAC,CAAC,KAAK;YACtB,MAAM,EAAE,CAAC,CAAC,MAAM;SACjB,CAAC;IACJ,CAAC,CAAC,CAAC;AACP,CAAC;AAED;;;;;GAKG;AACH,IAAM,IAAI,GAAG,UAAC,SAAqB;IACjC,SAAS,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;QAClB,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,SAAS,CAAC;AACnB,CAAC;AAED;;;;;;;GAOG;AACH,IAAM,WAAW,GAAG,UAAC,SAAqB;IACxC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,UAAC,MAAM,EAAE,QAAQ;QACvC,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACvE,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC,EAAe,EAAE,CAAC,CAAC;AACtB,CAAC,CAAC;AAEF;;;;;GAKG;AACH,IAAM,aAAa,GAAG,UAAC,OAAoB;IACzC,yBAAyB;IACzB,IAAI,SAAS,GAAe,EAAE,CAAC;IAC/B,GAAG,CAAC,CAAc,UAAoB,EAApB,WAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAApB,cAAoB,EAApB,IAAoB;QAAjC,IAAI,KAAK;QACZ,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;QACtB,EAAE,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC,CAAC,CAAC;YACtB,SAAS,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;QAC7B,CAAC;QACD,IAAI,CAAC,CAAC;YACJ,SAAS,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,SAAS,CAAC,CAAC;QACjD,CAAC;KACF;IACD,MAAM,CAAC,SAAS,CAAC;AACnB,CAAC;AAED;;;;;;GAMG;AACH,IAAM,KAAK,GAAG,UAAC,SAAqB;IAClC,EAAE,CAAC,CAAC,SAAS,IAAI,IAAI,IAAI,SAAS,CAAC,MAAM,IAAI,CAAC,CAAC;QAAC,MAAM,CAAC,SAAS,CAAC;IAEjE,IAAM,MAAM,GAAe,EAAE,CAAC;IAC9B,IAAI,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;IACxB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QAC1C,IAAM,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;QAE1B,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACzB,cAAc;YACd,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAC,CAAC,CAAC;YAC7E,IAAI,GAAG,MAAM,CAAC;QAChB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClB,IAAI,GAAG,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClB,MAAM,CAAC,MAAM,CAAC;AAChB,CAAC;AAED;;;;;;;GAOG;AACH,IAAM,OAAO,GAAG,UAAC,WAAuB,EAAE,UAAsB;IAC9D,IAAI,SAAS,GAAG,CAAC,CAAC;IAClB,IAAI,QAAQ,GAAG,CAAC,CAAC;IAEjB,IAAM,MAAM,GAAe,EAAE,CAAC;IAE9B,OAAO,SAAS,GAAG,WAAW,CAAC,MAAM,IAAI,QAAQ,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC;QACtE,iDAAiD;QACjD,EAAE,CAAC,CAAC,SAAS,KAAK,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACrD,QAAQ,EAAE,CAAC;YACX,kDAAkD;QACpD,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,KAAK,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACnD,SAAS,EAAE,CAAC;YACZ,gCAAgC;QAClC,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,KAAK,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACtE,UAAU,CAAC,QAAQ,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,KAAK,EAAE,WAAW,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC;YAC9F,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,KAAK,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC3D,QAAQ,EAAE,CAAC;YACb,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACvD,SAAS,EAAE,CAAC;QACd,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,KAAK,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACtE,4DAA4D;YAC5D,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,WAAW,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC7D,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACrD,QAAQ,EAAE,CAAC;YACb,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,KAAK,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,WAAW,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC9H,UAAU,CAAC,QAAQ,CAAC,CAAC,GAAG,GAAG,WAAW,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC;gBACxD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACrD,QAAQ,EAAE,CAAC;YACb,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,WAAW,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAClE,MAAM,CAAC,IAAI,CACT,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,UAAU,CAAC,QAAQ,CAAC,EAAE;oBACtC,GAAG,EAAE,WAAW,CAAC,SAAS,CAAC,CAAC,KAAK;iBAClC,CAAC,CACH,CAAC;gBACF,UAAU,CAAC,QAAQ,CAAC,CAAC,KAAK,GAAG,WAAW,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC;YAC1D,CAAC;QACH,CAAC;IACH,CAAC;IAED,MAAM,CAAC,MAAM,CAAC;AAChB,CAAC;AAED;;;;GAIG;AACH,IAAM,GAAG,GAAG,UAAC,CAAS,EAAE,CAAS;IAC/B,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACrB,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACrB,MAAM,CAAC,CAAC,CAAC;AACX,CAAC,CAAC;;;;;;;;;;ACpMF,IAAM,SAAS,GAAc;IACzB,aAAa,EAAE,IAAI;IACnB,kBAAkB,EAAE,CAAC;IACrB,QAAQ,EAAE,IAAI;CACjB;AAED;;;;;;GAMG;AACH,mBAAe,UAAC,OAAyB,EAAE,MAAqB,EAAE,SAAsB;IAEpF,6CAA6C;IAC7C,IAAM,YAAY,GAAG,UAAC,EAAe,IAAK,cAAO,CAAC,IAAI,KAAK,MAAM,IAAI,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,YAAY,CAAC,EAArE,CAAqE,CAAC;IAEhH;;;;;OAKG;IACH,EAAE,EAAC,aAAa,EAAE,CAAC,CAAC,CAAC;QACjB,SAAS,CAAC,gBAAgB,CAAC,WAAW,EAAE,YAAE,IAAI,iBAAU,CAAC,EAAE,CAAC,EAAd,CAAc,CAAC,CAAC;IAClE,CAAC;IAAC,IAAI,CAAC,CAAC;QACJ,SAAS,CAAC,gBAAgB,CAAC,WAAW,EAAE,YAAE,IAAI,iBAAU,CAAC,EAAE,CAAC,EAAd,CAAc,CAAC,CAAC;IAClE,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,EAAE,CAAC,UAAU,EAAE,UAAC,EAAe;QAClC,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YAClB,MAAM,CAAC;QAEX,IAAM,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QAClD,EAAE,EAAC,EAAE,IAAI,IAAI,CAAC;YAAC,MAAM,CAAC;QAEtB,IAAM,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QACzC,EAAE,EAAC,IAAI,IAAI,IAAI,CAAC;YAAC,MAAM,CAAC;QAExB,IAAM,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,qBAAqB,EAAE,CAAC;QAC7C,IAAM,IAAI,GAAG,CAAC,OAAO,CAAC,cAAc,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,OAAO,CAAC,eAAe,GAAG,OAAO,CAAC,UAAU,CAAC;QAC/G,IAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAC,IAAI,QAAC,CAAC,KAAK,IAAI,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,IAAI,EAAhC,CAAgC,CAAC,CAAC;QAE5E,EAAE,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC;YACjB,MAAM,CAAC;QAEX,IAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAC,IAAI,QAAC,CAAC,EAAE,KAAK,QAAQ,CAAC,EAAE,EAApB,CAAoB,CAAC,CAAC;QAC9D,EAAE,EAAC,OAAO,IAAI,IAAI,CAAC;YAAC,MAAM,CAAC;QAE3B,SAAS,CAAC,aAAa,GAAG,OAAO,CAAC;QAClC,SAAS,CAAC,kBAAkB,GAAG,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC;QAE7D,SAAS,CAAC,aAAa,CAAC,KAAK,GAAG,IAAI,CAAC;QACrC,SAAS,CAAC,QAAQ,GAAG,IAAI,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,UAAC,EAAe;QACjC,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YAClB,MAAM,CAAC;QAEX,EAAE,CAAC,CAAC,SAAS,CAAC,aAAa,IAAI,IAAI,IAAI,SAAS,CAAC,QAAQ,IAAI,IAAI,CAAC;YAC9D,MAAM,CAAC;QAEX,wEAAwE;QACxE,IAAM,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QAClD,EAAE,EAAC,EAAE,KAAK,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC;YAC5B,MAAM,CAAC;QAEX,IAAM,MAAM,GAAG,CAAC,EAAE,CAAC,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC,GAAG,OAAO,CAAC,UAAU,CAAC;QAC1E,IAAI,OAAO,GAAG,SAAS,CAAC,kBAAkB,GAAG,MAAM,CAAC;QAEpD,EAAE,CAAC,CAAC,OAAO,GAAG,SAAS,CAAC,aAAa,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;YACpD,OAAO,GAAG,CAAC,SAAS,CAAC,aAAa,CAAC,WAAW,CAAC;QACnD,CAAC;QAED,SAAS,CAAC,aAAa,CAAC,KAAK,GAAG,OAAO,CAAC;QACxC,SAAS,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;QAC7B,OAAO,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,UAAC,EAAe;QAChC,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YAClB,MAAM,CAAC;QAEX,SAAS,CAAC,aAAa,GAAG,IAAI,CAAC;QAC/B,SAAS,CAAC,kBAAkB,GAAG,CAAC,CAAC;QACjC,SAAS,CAAC,QAAQ,GAAG,IAAI,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,IAAM,UAAU,GAAG,UAAC,EAA2B;QAC3C,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,MAAM,CAAC;YACxB,MAAM,CAAC;QAEX,EAAE,CAAC,CAAC,SAAS,CAAC,aAAa,IAAI,IAAI,IAAI,SAAS,CAAC,QAAQ,IAAI,IAAI,CAAC;YAC9D,MAAM,CAAC;QAEX,IAAM,MAAM,GAAG,0BAA0B,CAAC,EAAE,CAAC,CAAC;QAC9C,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,IAAI,CAAC,CAAC,MAAM,YAAY,iBAAiB,CAAC,CAAC;YACzD,MAAM,CAAC;QAEX,IAAM,EAAE,GAAG,MAAM,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QAC/C,EAAE,EAAC,EAAE,IAAI,IAAI,CAAC;YAAC,MAAM,CAAC;QAEtB,IAAM,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QACzC,EAAE,EAAC,IAAI,IAAI,IAAI,CAAC;YAAC,MAAM,CAAC;QAExB,EAAE,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;YAC/B,IAAM,KAAK,GAAG,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;YAC3E,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAE7C,SAAS,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;YAC7B,OAAO,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;YAE5C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;YAC5C,SAAS,CAAC,aAAa,CAAC,KAAK,GAAG,IAAI,CAAC;YAErC,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;YAE9B,SAAS,CAAC,QAAQ,GAAG,IAAI,CAAC;QAC9B,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,IAAM,0BAA0B,GAAG,UAAC,EAA2B;QAC3D,EAAE,CAAC,CAAC,EAAE,YAAY,UAAU,CAAC,CAAC,CAAC;YAC3B,yBAAyB;YACzB,IAAM,KAAK,GAAG,EAAE,CAAC;YACjB,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QACrF,CAAC;QACD,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC;IACrB,CAAC;IAED;QACI,MAAM,CAAC,cAAc,IAAI,MAAM,CAAQ,0BAA0B;eAC1D,SAAS,CAAC,cAAc,CAAC,CAAO,+BAA+B;IAC1E,CAAC;IAAA,CAAC;AACN,CAAC;;;;;;;;;;AC5ID,IAAM,WAAW,GAAgB;IAC7B,aAAa,EAAE,IAAI;IACnB,iBAAiB,EAAE,IAAI;IACvB,wBAAwB,EAAE,CAAC;IAC3B,sBAAsB,EAAE,CAAC;IACzB,QAAQ,EAAE,IAAI;CACjB;AAED;;;;;GAKG;AACH,mBAAwB,OAAyB,EAAE,MAAqB;IAEpE,8BAA8B;IAC9B,IAAM,YAAY,GAAG,UAAC,EAAe,IAAK,cAAO,CAAC,IAAI,KAAK,QAAQ,IAAI,EAAE,IAAI,IAAI,IAAI,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,YAAY,CAAC,EAArF,CAAqF,CAAC;IAEhI,MAAM,CAAC,EAAE,CAAC,UAAU,EAAE,UAAC,EAAE;QACrB,EAAE,EAAC,CAAC,YAAY,CAAC,EAAE,CAAC,IAAI,WAAW,CAAC,aAAa,IAAI,IAAI,CAAC;YACtD,MAAM,CAAC;QAEX,IAAM,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QAClD,EAAE,EAAC,EAAE,IAAI,IAAI,CAAC;YAAC,MAAM,CAAC;QAEtB,IAAM,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QACzC,EAAE,EAAC,IAAI,IAAI,IAAI,CAAC;YAAC,MAAM,CAAC;QAExB,IAAM,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,qBAAqB,EAAE,CAAC;QAC7C,IAAM,IAAI,GAAG,CAAC,OAAO,CAAC,cAAc,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,OAAO,CAAC,eAAe,GAAG,OAAO,CAAC,UAAU,CAAC;QAE/G,IAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAC,IAAI,QAAC,CAAC,KAAK,IAAI,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,IAAI,EAAhC,CAAgC,CAAC,CAAC;QAE5E,EAAE,EAAC,QAAQ,IAAI,IAAI,CAAC;YAChB,MAAM,CAAC;QAEX,WAAW,CAAC,iBAAiB;YACzB,IAAI,GAAG,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC,QAAQ,CAAC,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC3D,MAAM,CAAC,CAAC;gBACR,OAAO,CAAC;QAEhB,IAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAC,IAAI,QAAC,CAAC,EAAE,KAAK,QAAQ,CAAC,EAAE,EAApB,CAAoB,CAAC,CAAC;QAC9D,EAAE,EAAC,OAAO,IAAI,IAAI,CAAC;YAAC,MAAM,CAAC;QAE3B,WAAW,CAAC,aAAa,GAAG,OAAO,CAAC;QAEpC,WAAW,CAAC,wBAAwB,GAAG,OAAO,CAAC,WAAW,CAAC;QAC3D,WAAW,CAAC,sBAAsB,GAAG,OAAO,CAAC,SAAS,CAAC;QAEvD,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC;QACrB,WAAW,CAAC,QAAQ,GAAG,IAAI,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,UAAC,EAAE;QACpB,EAAE,EAAC,CAAC,YAAY,CAAC,EAAE,CAAC,IAAI,WAAW,CAAC,QAAQ,IAAI,IAAI,CAAC;YACjD,MAAM,CAAC;QAEX,EAAE,EAAC,WAAW,CAAC,aAAa,IAAI,IAAI,CAAC;YACjC,MAAM,CAAC;QAEX,IAAM,MAAM,GAAG,CAAC,EAAE,CAAC,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC,GAAG,OAAO,CAAC,UAAU,CAAC;QAC1E,IAAI,OAAO,GAAG,WAAW,CAAC,iBAAiB,KAAK,MAAM,CAAC,CAAC;YACpD,WAAW,CAAC,wBAAwB,GAAG,MAAM,CAAC,CAAC;YAC/C,WAAW,CAAC,sBAAsB,GAAG,MAAM,CAAC;QAEhD,2CAA2C;QAC3C,EAAE,EAAC,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;YACb,OAAO,GAAG,CAAC,CAAC;QAChB,CAAC;QAED,IAAM,MAAM,GAAG,WAAW,CAAC,aAAa,CAAC;QACzC,IAAM,WAAW,GAAG,WAAW,CAAC,iBAAiB,KAAK,MAAM,CAAC,CAAC;YAC1D,CAAC,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,OAAO,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;YAC9E,CAAC,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,WAAW,GAAG,OAAO,CAAC;QAEnF,yBAAyB;QACzB,EAAE,EAAC,WAAW,IAAI,CAAC,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC;QACX,CAAC;QAED,WAAW,CAAC,iBAAiB,KAAK,MAAM,CAAC,CAAC;YACtC,MAAM,CAAC,WAAW,GAAG,OAAO,CAAC,CAAC;YAC9B,MAAM,CAAC,SAAS,GAAG,OAAO,CAAC;QAE/B,WAAW,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;QAC/B,OAAO,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,UAAC,EAAE;QACnB,EAAE,EAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YACjB,MAAM,CAAC;QAEX,WAAW,CAAC,aAAa,GAAG,IAAI,CAAC;QACjC,WAAW,CAAC,wBAAwB,GAAG,CAAC,CAAC;QACzC,WAAW,CAAC,sBAAsB,GAAG,CAAC,CAAC;QACvC,WAAW,CAAC,iBAAiB,GAAG,IAAI,CAAC;QACrC,WAAW,CAAC,QAAQ,GAAG,IAAI,CAAC;IAChC,CAAC,CAAC,CAAC;AACP,CAAC;AArFD,4BAqFC;;;;;;;;;;;;;;;;;;AC/GD;;;;;GAKG;AACH,mBAAe,UAAC,OAAyB,EAAE,MAAqB;IAE5D,IAAM,YAAY,GAAG,UAAC,EAAe,IAAK,cAAO,CAAC,IAAI,KAAK,KAAK,IAAI,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,YAAY,CAAC,EAApE,CAAoE,CAAC;IAE/G,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,UAAC,EAAe;QAC7B,EAAE,EAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YACjB,MAAM,CAAC;QAEX,IAAM,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QAClD,EAAE,EAAC,EAAE,IAAI,IAAI,CAAC;YAAC,MAAM,CAAC;QAEtB,IAAM,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QACzC,EAAE,EAAC,IAAI,IAAI,IAAI,CAAC;YAAC,MAAM,CAAC;QAExB,IAAM,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,qBAAqB,EAAE,CAAC;QAC7C,IAAM,IAAI,GAAG,CAAC,OAAO,CAAC,cAAc,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,OAAO,CAAC,eAAe,GAAG,OAAO,CAAC,UAAU,CAAC;QAE/G,IAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAC,IAAI,QAAC,CAAC,KAAK,IAAI,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,IAAI,EAAhC,CAAgC,CAAC,CAAC;QAC5E,EAAE,EAAC,QAAQ,IAAI,IAAI,CAAC;YAAC,MAAM,CAAC;QAE5B,IAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAC,IAAI,QAAC,CAAC,EAAE,KAAK,QAAQ,CAAC,EAAE,EAApB,CAAoB,CAAC,CAAC;QAC9D,EAAE,EAAC,OAAO,IAAI,IAAI,CAAC;YAAC,MAAM,CAAC;QAE3B,IAAM,OAAO,GAAG,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC;QAErC,IAAM,UAAU,gBAAQ,OAAO,CAAE;QACjC,UAAU,CAAC,WAAW,GAAG,OAAO,CAAC;QACjC,UAAU,CAAC,EAAE,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;QAErC,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC;QAC/C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAE/B,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;AACP,CAAC;;;;;;;;;;ACzCD,IAAM,SAAS,GAAG,GAAG,CAAC;AAOtB,IAAM,QAAQ,GAAa;IACvB,QAAQ,EAAE,CAAC;IACX,MAAM,EAAE,CAAC;CACZ;AAED;;;;;GAKG;AACH,mBAAwB,OAAyB,EAAE,MAAqB;IAEpE,8BAA8B;IAC9B,IAAM,YAAY,GAAG,UAAC,EAAe,IAAK,cAAO,CAAC,IAAI,KAAK,KAAK,IAAI,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,YAAY,CAAC,EAApE,CAAoE,CAAC;IAE/G,MAAM,CAAC,EAAE,CAAC,UAAU,EAAE,UAAC,EAAE;QACrB,EAAE,EAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YACjB,MAAM,CAAC;QAEX,QAAQ,CAAC,MAAM,GAAG,OAAO,CAAC,cAAc,EAAE,GAAG,SAAS,CAAC;QACvD,QAAQ,CAAC,QAAQ,GAAG,OAAO,CAAC,cAAc,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,UAAC,EAAE;QACpB,EAAE,EAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YACjB,MAAM,CAAC;QAEX,IAAM,WAAW,GAAG,QAAQ,CAAC,QAAQ,GAAG,EAAE,CAAC,MAAM,CAAC;QAElD,EAAE,EAAC,WAAW,GAAG,CAAC,CAAC;YACf,MAAM,CAAC;QAEX,EAAE,EAAC,WAAW,GAAG,QAAQ,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC;YAC7C,MAAM,CAAC;QAEX,OAAO,CAAC,cAAc,GAAG,WAAW,CAAC;QACrC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,UAAC,EAAE;QACnB,EAAE,EAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YACjB,MAAM,CAAC;QAEX,QAAQ,CAAC,QAAQ,GAAG,CAAC,CAAC;QACtB,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;IACxB,CAAC,CAAC,CAAC;AACP,CAAC;AApCD,4BAoCC;;;;;;;;;;ACtDD,IAAM,SAAS,GAAG,GAAG,CAAC;AAOtB,IAAM,SAAS,GAAc;IACzB,QAAQ,EAAE,CAAC;IACX,QAAQ,EAAE,CAAC;CACd;AAED;;;;;GAKG;AACH,mBAAwB,OAAyB,EAAE,MAAqB;IAEpE,IAAM,YAAY,GAAG,UAAC,EAAe,IAAK,cAAO,CAAC,IAAI,KAAK,KAAK,IAAI,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,YAAY,CAAC,EAApE,CAAoE,CAAC;IAE/G,MAAM,CAAC,EAAE,CAAC,YAAY,EAAE,UAAC,EAAE;QACvB,EAAE,EAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YACjB,MAAM,CAAC;QAEX,SAAS,CAAC,QAAQ,GAAG,OAAO,CAAC,eAAe,CAAC;QAC7C,SAAS,CAAC,QAAQ,GAAG,OAAO,CAAC,cAAc,EAAE,GAAG,SAAS,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,UAAC,EAAE;QACtB,EAAE,EAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YACjB,MAAM,CAAC;QAEX,IAAM,YAAY,GAAG,OAAO,CAAC,cAAc,GAAG,OAAO,CAAC,eAAe,CAAC;QACtE,IAAM,aAAa,GAAG,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,eAAe,CAAC;QAC9D,IAAM,eAAe,GAAG,aAAa,GAAG,CAAC,CAAC;QAE1C,IAAM,MAAM,GAAG,SAAS,CAAC,QAAQ,GAAG,EAAE,CAAC,KAAK,CAAC;QAC7C,IAAM,gBAAgB,GAAG,OAAO,CAAC,KAAK,GAAG,MAAM,CAAC;QAChD,IAAM,kBAAkB,GAAG,gBAAgB,GAAG,CAAC,CAAC;QAEhD,IAAM,QAAQ,GAAG,OAAO,CAAC,cAAc,EAAE,GAAG,SAAS,CAAC;QACtD,IAAM,gBAAgB,GAAG,QAAQ,GAAI,OAAO,CAAC,UAAU,CAAC;QAExD,EAAE,EAAC,gBAAgB,IAAI,gBAAgB,CAAC;YACpC,MAAM,CAAC;QAEX,IAAM,SAAS,GAAG,CAAC,YAAY,GAAG,eAAe,GAAG,kBAAkB,CAAC,GAAG,MAAM,CAAC;QAEjF,OAAO,CAAC,eAAe,GAAG,MAAM,CAAC;QACjC,OAAO,CAAC,cAAc,GAAG,SAAS,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;QAExD,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,EAAE,CAAC,UAAU,EAAE,UAAC,EAAE;QACrB,EAAE,EAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YACjB,MAAM,CAAC;QAEX,SAAS,CAAC,QAAQ,GAAG,CAAC,CAAC;QACvB,SAAS,CAAC,QAAQ,GAAG,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAC;AACP,CAAC;AA7CD,4BA6CC;;;;;;;;;;ACjED,oCAAmC;AAEnC,IAAM,aAAa,GAAkB;IACjC,WAAW,EAAG,OAAO;IACrB,WAAW,EAAE;QACT,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,MAAM,CAAC,oBAAoB,EAAE,CAAC;QACxD,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,MAAM,EAAG,IAAI,EAAE,CAAC;QACjC,CAAC,MAAM,CAAC,GAAG,CAAC;KACf;CACJ;AAED,kBAAe,aAAa,CAAC;;;;;;;;;;ACK7B,IAAM,cAAc,GAAmB;IACnC,cAAc,EAAE,CAAC;IACjB,eAAe,EAAE,IAAI;IACrB,UAAU,EAAE,EAAE;IACd,SAAS,EAAE,KAAK;IAChB,IAAI,EAAE,KAAK;IACX,KAAK,EAAE,GAAG;IACV,MAAM,EAAE,GAAG;IACX,UAAU,EAAE,cAAM,WAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAtB,CAAsB;CAC3C;AAED,kBAAe,cAAc,CAAC","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f7b75ec3aeb275868524","import { MeterType } from '../config/managerconfig';\r\nimport calculatePeaks from '../strategies/calculate/peak'\r\nimport calculateRms from '../strategies/calculate/rms'\r\nimport drawCanvasLine from '../strategies/render/line';\r\nimport Segment from '../models/segment';\r\nimport flattenSegments from '../methods/flatten';\r\nimport Interval from '../models/interval';\r\n\r\nexport interface LastDrawValues {\r\n    meterType: MeterType;\r\n    sampleSize: number;\r\n    samplesPerPixel: number,\r\n    scrollPosition: number,\r\n    samplerate: number\r\n}\r\n\r\nexport default class WaveShaper {\r\n    id: string;\r\n    color: string;\r\n    element: HTMLCanvasElement\r\n    segments: Segment[];\r\n    flattened: Interval[];\r\n    ctx: CanvasRenderingContext2D;\r\n    calculated: number[][];\r\n    width: number;\r\n    height: number;\r\n    skipDraw: boolean = false;\r\n    lastValues: LastDrawValues;\r\n\r\n    constructor(id: string, segments: Segment[], width: number, height: number, color: string) {\r\n        this.element = document.createElement('canvas');\r\n        this.element.setAttribute('data-wave-id', id);\r\n\r\n        this.id = id;\r\n        this.color = color;\r\n        this.segments = segments;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        this.flatten();\r\n\r\n        this.element.style.width = width + 'px';\r\n        this.element.style.height = height + 'px';\r\n        this.element.classList.add('waveshaper');\r\n\r\n        this.element.width = width * devicePixelRatio;\r\n        this.element.height = height;\r\n        this.ctx = <CanvasRenderingContext2D>this.element.getContext('2d');\r\n        const scale = (devicePixelRatio || 1) < 1 ? 1 : (devicePixelRatio || 1);\r\n        this.ctx.scale(scale, 1);\r\n    }\r\n\r\n    flatten() {\r\n        this.flattened = flattenSegments(this.segments);\r\n    }\r\n\r\n    /**\r\n     * Gets the duration of the audio in seconds\r\n     * \r\n     * @returns {number} Decimal value of total duration in seconds\r\n     */\r\n    getDuration(): number {\r\n        let maxLength = 0;\r\n        for (let segment of this.segments) {\r\n            const end = segment.start + segment.duration;\r\n            if (end > maxLength) {\r\n                maxLength = end;\r\n            }\r\n        }\r\n        return maxLength;\r\n    }\r\n\r\n    /**\r\n     * Gets the duration of the audio as a date\r\n     * \r\n     * @returns {Date} Date containing audio length\r\n     */\r\n    getDurationAsDate(): Date {\r\n        var date = new Date(0);\r\n        date.setTime(this.getDuration() * 1000);\r\n        return date;\r\n    }\r\n\r\n    /**\r\n     * Gets the width of scrollbar needed to scroll through the entire audio file\r\n     * \r\n     * @param {number} samplesPerPixel \r\n     * @param {number} samplerate \r\n     * @returns {number} Scroll width in pixels for the entire audio file\r\n     */\r\n    getScrollWidth(samplesPerPixel: number, samplerate: number) {\r\n        let maxLength = this.getDuration();\r\n        return maxLength * samplerate / samplesPerPixel;\r\n    }\r\n\r\n    /**\r\n     * Gets the summerized values for the current settings\r\n     * \r\n     * @param {string} meterType\r\n     * @param {number} sampleSize\r\n     * @param {number} samplesPerPixel\r\n     * @param {number} scrollPosition\r\n     * @param {boolean} forceDraw\r\n     * @param {Map<string, Float32Array>} dataMap\r\n     * @returns {Array} Two dimensional array, one entry for each pixel, for each pixel a min\r\n     * and a max value.\r\n     */\r\n    calculate(meterType: MeterType, sampleSize: number, samplesPerPixel: number, scrollPosition: number, \r\n        samplerate: number, forceDraw: boolean, dataMap: Map<string, Float32Array>): number[][] {\r\n        if (!forceDraw && this.lastValues != null && this.lastValues.meterType === meterType && this.lastValues.sampleSize === sampleSize &&\r\n            this.lastValues.samplesPerPixel === samplesPerPixel && this.lastValues.scrollPosition === scrollPosition &&\r\n            this.lastValues.samplerate === samplerate) {\r\n\r\n            this.skipDraw = true;\r\n            return this.calculated;\r\n        } else {\r\n            this.skipDraw = false;\r\n            this.lastValues = {\r\n                meterType,\r\n                sampleSize,\r\n                samplesPerPixel,\r\n                scrollPosition,\r\n                samplerate\r\n            }\r\n        }\r\n\r\n        switch (meterType) {\r\n            case 'peak':\r\n                this.calculated = calculatePeaks(\r\n                    sampleSize,\r\n                    samplesPerPixel,\r\n                    this.width,\r\n                    this.flattened,\r\n                    scrollPosition,\r\n                    samplerate,\r\n                    dataMap\r\n                );\r\n                break;\r\n            default:\r\n                this.calculated = calculateRms(\r\n                    sampleSize,\r\n                    samplesPerPixel,\r\n                    this.width,\r\n                    this.flattened,\r\n                    scrollPosition,\r\n                    samplerate,\r\n                    dataMap\r\n                );\r\n        }\r\n        return this.calculated;\r\n    }\r\n\r\n    /**\r\n     * Draws the waveform to the canvas with current settings\r\n     * \r\n     * @param {string} drawStyle\r\n     */\r\n    draw() {\r\n        if (!this.skipDraw) {\r\n            drawCanvasLine(\r\n                this.calculated,\r\n                this.height,\r\n                this.width,\r\n                this.ctx,\r\n                this.color\r\n            );\r\n        }\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/core/waveshaper.ts","/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/hammerjs/hammer.js\n// module id = 1\n// module chunks = 0","import WaveShapeManager from \"./core/manager\";\r\nimport WaveShaper from './core/waveshaper'\r\nimport Segment from './models/segment';\r\n\r\nexport { WaveShapeManager, WaveShaper, Segment };\r\n\r\n(window as any)[\"WaveShapeManager\"] = WaveShapeManager;\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","import WaveShaper from './waveshaper';\r\nimport Segment from '../models/segment';\r\nimport setupDrag from '../interaction/drag';\r\nimport setupResize from '../interaction/resize';\r\nimport setupCut from '../interaction/cut';\r\nimport setupPan from '../interaction/pan';\r\nimport setupZoom from '../interaction/zoom';\r\nimport * as Hammer from 'hammerjs';\r\nimport hammerconfig from '../config/hammerconfig';\r\nimport defaultOptions, { ManagerOptions, InteractionMode, MeterType, GenerateId } from '../config/managerconfig';\r\n\r\n/**\r\n * \r\n * \r\n * @class\r\n * @export\r\n */\r\nexport default class WaveShapeManager {\r\n\r\n    /**\r\n     * Map of waveshapers managed by the manager\r\n     * \r\n     * @readonly\r\n     * @memberof WaveShapeManager\r\n     */\r\n    public readonly waveShapers = new Map<string, WaveShaper>();\r\n\r\n    /**\r\n     * Map of audio data\r\n     * \r\n     * @readonly\r\n     * @memberof WaveShapeManager\r\n     */\r\n    public readonly audioData = new Map<string, Float32Array>();\r\n\r\n    /**\r\n     * @description Audio samplerate\r\n     * \r\n     * @readonly\r\n     * @memberof WaveShapeManager\r\n     */\r\n    public readonly samplerate: number;\r\n\r\n    /**\r\n     * @description Gesture recogniser\r\n     * \r\n     * @memberof WaveShapeManager\r\n     */\r\n    public readonly hammer: HammerManager;\r\n\r\n    /**\r\n     * @description Width of draw area in pixels\r\n     * \r\n     * @readonly\r\n     * @memberof WaveShapeManager\r\n     */\r\n    public readonly width: number;\r\n\r\n     /**\r\n     * @description Height of draw area in pixels\r\n     * \r\n     * @readonly\r\n     * @memberof WaveShapeManager\r\n     */\r\n    public readonly height: number;\r\n\r\n\r\n    /**\r\n     * @description Sample range per pixel, zoom level\r\n     * @example Lower value to zoom in, increase to zoom out\r\n     * \r\n     * @memberof WaveShapeManager\r\n     */\r\n    public samplesPerPixel: number;\r\n\r\n    /**\r\n     * @description Sample size per pixel, determines accuracy\r\n     * @example Lower value to decrease accuracy and increase performance\r\n     * \r\n     * @memberof WaveShapeManager\r\n     */\r\n    public resolution: number;\r\n\r\n    /**\r\n     * @description Virtual scrolling is used, changing this value pans the waveform\r\n     * @example Lower value to pan left, increase to pan right\r\n     * \r\n     * @memberof WaveShapeManager\r\n     */\r\n    public scrollPosition: number;\r\n\r\n    /**\r\n     * @description Calculation method used to determine value of sample range\r\n     * @example Peak get the peak values of the range, RMS is similar to average https://en.wikipedia.org/wiki/Root_mean_square\r\n     * \r\n     * @memberof WaveShapeManager\r\n     */\r\n    public meterType: MeterType;\r\n\r\n    /**\r\n     * @description Active id's, redraws when draw is called without argument\r\n     * \r\n     * @memberof WaveShapeManager\r\n     */\r\n    public activeWaveShapers: string[];\r\n\r\n    /**\r\n     * @description Interaction mode of the the waveforms\r\n     * \r\n     * @memberof WaveShapeManager\r\n     */\r\n    public mode: InteractionMode;\r\n\r\n    /**\r\n     * @description Method used to generate new id's\r\n     * \r\n     * @memberof WaveShapeManager\r\n     */\r\n    public generateId: GenerateId;\r\n\r\n    /**\r\n     * @param {number} samplerate Audio samplerate\r\n     * @param {HTMLElement} container Container element\r\n     * @param {ManagerOptions} [options=defaultOptions] Initial options\r\n     * @throws {Error} Throws an error if samplerate is null or NaN\r\n     * @constructor \r\n     */\r\n    constructor(samplerate: number, container: HTMLElement, options: ManagerOptions = defaultOptions) {\r\n        if(samplerate == null || isNaN(samplerate)) {\r\n            throw new Error('samplerate cannot be null and must be a number');\r\n        }\r\n\r\n        // Merge options and default options so ommited properties are set\r\n        options = { ...defaultOptions, ...options };\r\n        \r\n        // Setup readonly properties\r\n        this.samplerate = samplerate;\r\n        this.width = options.width;\r\n        this.height = options.height;\r\n        \r\n        // Setup variable properties\r\n        this.resolution = options.resolution;\r\n        this.samplesPerPixel = options.samplesPerPixel;\r\n        this.scrollPosition = options.scrollPosition;\r\n        this.meterType = options.meterType;\r\n        this.mode = options.mode;\r\n        this.generateId = options.generateId;\r\n\r\n        //Setup interaction\r\n        this.hammer = new Hammer(container, hammerconfig);\r\n\r\n        setupDrag(this, this.hammer, container);\r\n        setupResize(this, this.hammer);\r\n        setupCut(this, this.hammer);\r\n        setupPan(this, this.hammer);\r\n        setupZoom(this, this.hammer);\r\n    }\r\n    \r\n    /**\r\n     * @description Adds a waveshaper to the manager\r\n     * \r\n     * @param id id of WaveShaper\r\n     * @param element Html draw element\r\n     * @param segments Segments in wave\r\n     * @param color Background color of segments\r\n     * \r\n     * @memberof WaveShapeManager\r\n     */\r\n    addWaveShaper(id: string, segments: Segment[], color: string): WaveShaper {\r\n        const foundWave = this.waveShapers.get('id');\r\n        if(foundWave == null) {\r\n            const wave = new WaveShaper(id, segments, this.width, this.height, color);\r\n            this.waveShapers.set(id, wave);\r\n\r\n            return wave;\r\n        } \r\n        \r\n        return foundWave;\r\n    }\r\n\r\n    getWaveShaper(id: string): WaveShaper | undefined {\r\n        return this.waveShapers.get(id);\r\n    }\r\n\r\n    /**\r\n     * @description Adds audio data to the waveshaper and redraws waveshapers using it\r\n     * \r\n     * @param id  Data id, refered to by source parameter of segments\r\n     * @param data AudioBuffer with audio data\r\n     * \r\n     * @memberof WaveShapeManager\r\n     */\r\n    addAudioData(id: string, data: AudioBuffer) {\r\n        if(!this.audioData.has(id)) {\r\n            this.audioData.set(id, data.getChannelData(0));\r\n            this.draw(this.activeWaveShapers, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description Removes the wave with given id from the manager\r\n     * \r\n     * @param id \r\n     * \r\n     * @memberof WaveShapeManager\r\n     */\r\n    removeWave(id: string) {\r\n        this.waveShapers.delete(id);\r\n    }\r\n\r\n    /**\r\n     * @description Flattens the segments of the given waveshaper id\r\n     * \r\n     * @param id \r\n     * @memberof WaveShapeManager\r\n     */\r\n    flatten(id: string) {\r\n        const waveShaper = this.waveShapers.get(id)\r\n        if(waveShaper != null) waveShaper.flatten();\r\n    }\r\n\r\n    /**\r\n     * @description Returns the maximum duration of all the waveshapers managed by this class\r\n     * \r\n     * @returns Maximum duration in seconds\r\n     * @memberof WaveShapeManager\r\n     */\r\n    getDuration(): number {\r\n        var maxDuration = 0;\r\n        for (var wave of Array.from(this.waveShapers.values())) {\r\n            var duration = wave.getDuration();\r\n            if (duration > maxDuration) {\r\n                maxDuration = duration;\r\n            }\r\n        }\r\n        return maxDuration;\r\n    }\r\n\r\n    /**\r\n     * Gets the duration of the audio as a date\r\n     * \r\n     * @returns Date containing audio length\r\n     * @memberof WaveShapeManager\r\n     */\r\n    getDurationAsDate(): Date {\r\n        var date = new Date(0);\r\n        date.setTime(this.getDuration() * 1000);\r\n        return date;\r\n    }\r\n\r\n    /**\r\n     * @description Gets the width of scrollbar needed to scroll through the entire audio file\r\n     * \r\n     * @returns Scroll width in pixels for the entire audio file\r\n     * @memberof WaveShapeManager\r\n     */\r\n    getScrollWidth(): number {\r\n        var maxWidth = 0;\r\n        for (var wave of Array.from(this.waveShapers.values())) {\r\n            const width = wave.getScrollWidth(this.samplesPerPixel, this.samplerate);\r\n            if (width > maxWidth) {\r\n                maxWidth = width;\r\n            }\r\n        }\r\n    \r\n        return maxWidth;\r\n    }\r\n\r\n    /**\r\n     * Draws the waveform to the canvas with current settings, defaults to drawing all activeWaveShapers\r\n     * \r\n     * @param ids Options array of id's to draw\r\n     * @param forceDraw Force redraw of the given waves\r\n     * \r\n     * @memberof WaveShapeManager\r\n     */\r\n    draw(ids: string[] | null, forceDraw: boolean) {\r\n        const idsToDraw = ids == null ? this.activeWaveShapers == null ? Array.from(this.waveShapers.keys()) : this.activeWaveShapers : ids;\r\n        for (var i = 0; i < idsToDraw.length; i++) {\r\n            var wave = this.waveShapers.get(idsToDraw[i]);\r\n            if(wave == null) continue;\r\n\r\n            wave.calculate(\r\n                this.meterType, \r\n                this.resolution, \r\n                this.samplesPerPixel, \r\n                this.scrollPosition,\r\n                this.samplerate,\r\n                forceDraw,\r\n                this.audioData\r\n            );\r\n        }\r\n    \r\n        for (var i = 0; i < idsToDraw.length; i++) {\r\n            var wave = this.waveShapers.get(idsToDraw[i]);\r\n            if(wave == null) continue;\r\n\r\n            wave.draw();\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/core/manager.ts","import Interval from '../../models/interval';\r\n\r\n/**\r\n * Calculates peak values\r\n * \r\n * @export\r\n * @param resolution \r\n * @param samplesPerPixel \r\n * @param width \r\n * @param intervals \r\n * @param scrollPosition \r\n * @param sampleRate\r\n * @param dataMap\r\n * @returns \r\n */\r\nexport default (resolution: number, samplesPerPixel: number, width: number, intervals: Interval[], \r\n    scrollPosition: number, sampleRate: number, dataMap: Map<string, Float32Array>): number[][] => {\r\n        \r\n    const sampleSize = Math.ceil(samplesPerPixel / resolution);\r\n\r\n    const start = scrollPosition * samplesPerPixel;\r\n    const startSecond = start / sampleRate;\r\n\r\n    const secondsPerPixel = samplesPerPixel / sampleRate;\r\n\r\n    const peaks: number[][] = [];\r\n    // For each pixel we display\r\n    for (let i = 0; i < width; i++) {\r\n        let max = 0;\r\n        let min = 0;\r\n\r\n        const currentSecond = startSecond + ((i * samplesPerPixel) / sampleRate);\r\n        let currentInterval;\r\n        for (let i = 0; i < intervals.length; i++) {\r\n            const interval = intervals[i];\r\n            if (interval.start <= currentSecond && interval.end >= currentSecond) {\r\n                currentInterval = interval;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (currentInterval == null) {\r\n            peaks.push([0, 0, 0, 0]);\r\n            continue;\r\n        }\r\n\r\n        let intervalBorder = 0;\r\n        if (currentSecond + secondsPerPixel > currentInterval.end\r\n            || currentSecond - secondsPerPixel < currentInterval.start) {\r\n            intervalBorder = 1;\r\n        }\r\n\r\n        const buffer = dataMap.get(currentInterval.source);\r\n        if (buffer == null) {\r\n            peaks.push([0, 0, intervalBorder, 1]);\r\n            continue;\r\n        }\r\n\r\n        const offsetStart = currentInterval.start - currentInterval.originalStart;\r\n        const secondsIntoInterval = currentSecond - currentInterval.start;\r\n        const startSample = Math.floor(((secondsIntoInterval + offsetStart) * sampleRate));\r\n\r\n        const endSample = startSample + samplesPerPixel;\r\n        const length = buffer.length;\r\n        const loopEnd = length < endSample ? length : endSample;\r\n\r\n        // Cycle through the data-points relevant to the pixel\r\n        // Don't cycle through more than sampleSize frames per pixel.\r\n        for (let j = startSample; j < loopEnd; j += sampleSize) {\r\n            const sample = buffer[j];\r\n\r\n            // Keep track of positive and negative values separately\r\n            if (sample > max) max = sample;\r\n            else if (sample < min) min = sample;\r\n        }\r\n\r\n        peaks.push([min, max, intervalBorder, 1]);\r\n    }\r\n    return peaks;\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/strategies/calculate/peak.ts","import Interval from '../../models/interval';\r\n\r\n/**\r\n * Calculate rms values\r\n * \r\n * @export\r\n * @param resolution \r\n * @param samplesPerPixel \r\n * @param width \r\n * @param intervals \r\n * @param scrollPosition \r\n * @param sampleRate\r\n * @param dataMap\r\n * @returns \r\n */\r\nexport default (resolution: number, samplesPerPixel: number, width: number, intervals: Interval[], \r\n    scrollPosition: number, sampleRate: number, dataMap: Map<string, Float32Array>): number[][] => {\r\n\r\n    const sampleSize = Math.ceil(samplesPerPixel / resolution);\r\n    const start = scrollPosition * samplesPerPixel;\r\n    const startSecond = start / sampleRate;\r\n    const secondsPerPixel = samplesPerPixel / sampleRate;\r\n\r\n    const vals : number[][] = [];\r\n    // For each pixel we display\r\n    for (let i = 0; i < width; i++) {\r\n        let posSum = 0;\r\n        let negSum = 0;\r\n\r\n        const currentSecond = startSecond + ((i * samplesPerPixel) / sampleRate);\r\n        let interval;\r\n        for(let i = 0; i < intervals.length; i++) {\r\n            const s = intervals[i];\r\n            if(s.start <= currentSecond && s.end >= currentSecond) {\r\n                interval = s;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if(interval == null) {\r\n            vals.push([0, 0, 0, 0]);\r\n            continue;\r\n        }\r\n        \r\n        let intervalBorder = 0;\r\n        if(currentSecond + secondsPerPixel > interval.end \r\n            || currentSecond - secondsPerPixel < interval.start) {\r\n            intervalBorder = 1;\r\n        }\r\n\r\n        const buffer = dataMap.get(interval.source);\r\n        if(buffer == null) {\r\n            vals.push([0, 0, intervalBorder, 1]);\r\n            continue;\r\n        }\r\n\r\n        const offsetStart = interval.start - interval.originalStart;\r\n        const secondsIntoInterval = currentSecond - interval.start;\r\n        const startSample = Math.floor(((secondsIntoInterval + offsetStart) * sampleRate));\r\n        const length = buffer.length;\r\n        const loopEnd = startSample + samplesPerPixel;\r\n        const end = length < loopEnd ? length : loopEnd;\r\n\r\n        // Cycle through the data-points relevant to the pixel\r\n        // Don't cycle through more than sampleSize frames per pixel.\r\n        for (let j = startSample; j < end; j += sampleSize) {\r\n            const val = buffer[j];\r\n\r\n            // Keep track of positive and negative values separately\r\n            if (val > 0) {\r\n                posSum += val * val;\r\n            } else {\r\n                negSum += val * val;\r\n            }\r\n        }\r\n\r\n        const samples = Math.min(samplesPerPixel / 2, Math.round(resolution / 2));\r\n        const min = -Math.sqrt(negSum / samples);\r\n        const max = Math.sqrt(posSum / samples);\r\n\r\n        vals.push([min, max, intervalBorder, 1]);\r\n    }\r\n    return vals;\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/strategies/calculate/rms.ts","/**\r\n * \r\n * \r\n * @export\r\n * @param {number[][]} waveform Sampled data for each pixel, max at 0, min at 1 \r\n * @param {number} height \r\n * @param {number} width \r\n * @param {CanvasRenderingContext2D} ctx \r\n * @param {string} drawStyle \r\n * @param {string} color\r\n */\r\nexport default (waveform: number[][], height: number, width: number, ctx: CanvasRenderingContext2D, color: string) => {\r\n    const scale = height / 2;\r\n    ctx.fillStyle = color;\r\n    ctx.strokeStyle = 'black';\r\n\r\n    const length = waveform.length;\r\n    ctx.clearRect(0, 0, width, height);\r\n    \r\n    for(let i = 0, inSegment = false, segmentStart = 0; i < length; i++) {\r\n        const pointInSegment = waveform[i][3] === 1;\r\n        if(!inSegment && pointInSegment) {\r\n            inSegment = true;\r\n            segmentStart = i;\r\n        } else if (inSegment && (!pointInSegment || i === length - 1)) {\r\n            inSegment = false;\r\n            ctx.fillRect(segmentStart, 0, i - segmentStart, height);\r\n        }\r\n    }\r\n    \r\n    ctx.fillStyle = 'black';\r\n    ctx.beginPath();\r\n    \r\n    ctx.moveTo(0, scale);\r\n    for (let i = 0; i < length; i++) {\r\n        ctx.lineTo(i, Math.round((waveform[i][0] * scale) + scale));\r\n    }\r\n    ctx.lineTo(length - 1, scale);\r\n\r\n    ctx.moveTo(0, scale);\r\n    for (let i = 0; i < length; i++) {\r\n        ctx.lineTo(i, Math.round((waveform[i][1] * scale) + scale));\r\n    }\r\n    ctx.lineTo(length - 1, scale);\r\n    ctx.closePath();\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        if(i != 0 && waveform[i-1][2] === 0 && waveform[i][2] === 1) {\r\n            ctx.rect(i-1, 0, 1, height);\r\n        }\r\n    }\r\n    \r\n    ctx.fill();\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/strategies/render/line.ts","import Segment from \"../models/segment\";\r\nimport Interval from \"../models/interval\";\r\n\r\ndeclare type IntervalMap = {[key: string] : Interval[]};\r\n\r\n/**\r\n * The algorithm first calculates real start and end times of each segment,\r\n * sorts them by priority, then start time.\r\n *\r\n * Finally it merges the segments by index so there are no overlapping\r\n * segments and those with highest index are on top.\r\n *\r\n * @export\r\n * @param {Segment[]} segments\r\n * @returns {Interval[]}\r\n */\r\nexport default (segments: Segment[]): Interval[] => {\r\n  var normalized = normalizeIndex(segments);\r\n  var intervals = mapToIntervals(normalized);\r\n  var sorted = sort(intervals);\r\n  var grouped = grouByIndex(sorted);\r\n\r\n  return weightedMerge(grouped);\r\n}\r\n\r\n/**\r\n * When an element is altered the index is set very high,\r\n * this functions normalizes to indexes back to 0\r\n * \r\n * @param {Segment[]} segments \r\n */\r\nconst normalizeIndex = (segments: Segment[]): Segment[] => {\r\n  let index = 0;\r\n  segments.sort((a, b) => cmp(a.index, b.index)).forEach(el => {\r\n    if (el.index > index) {\r\n      el.index = ++index;\r\n    }\r\n    else {\r\n      el.index = index;\r\n    }\r\n  });\r\n  return segments;\r\n}\r\n\r\n/**\r\n * In order to preserve the original segments and allow for extra properties\r\n * the segments are mapped to Intervals\r\n * \r\n * @param {Segment[]} segments \r\n * @returns {Interval[]}\r\n */\r\nconst mapToIntervals = (segments: Segment[]): Interval[] => {\r\n  return segments\r\n    .map(s => {\r\n      return {\r\n        id: s.id,\r\n        start: s.start + s.offsetStart,\r\n        end: s.start + s.duration - s.offsetEnd,\r\n        index: s.index,\r\n        originalStart: s.start,\r\n        source: s.source\r\n      };\r\n    });\r\n}\r\n\r\n/**\r\n * Sorts the intervals by index, then by start\r\n * \r\n * @param {Interval[]} intervals \r\n * @return {Interval[]}\r\n */\r\nconst sort = (intervals: Interval[]): Interval[] => {\r\n  intervals.sort((a, b) => {\r\n    return cmp(a.index, b.index) || cmp(a.start, b.start);\r\n  });\r\n  return intervals;\r\n}\r\n\r\n/**\r\n * Returns a map of intervals grouped by the key property\r\n * \r\n * @param {Interval[]} intervals \r\n * @param {string} key \r\n * \r\n * @returns {{[key: string] : Interval[]}}\r\n */\r\nconst grouByIndex = (intervals: Interval[]): IntervalMap => {\r\n  return intervals.reduce((groups, interval) => {\r\n    (groups[interval.index] = groups[interval.index] || []).push(interval);\r\n    return groups;\r\n  }, <IntervalMap>{});\r\n};\r\n\r\n/**\r\n * Merges all the groups by index\r\n * \r\n * @param {IntervalMap} grouped \r\n * @returns {Interval[]}\r\n */\r\nconst weightedMerge = (grouped: IntervalMap): Interval[] => {\r\n  /** @type {Interval[]} */\r\n  let flattened: Interval[] = [];\r\n  for (let index of Object.keys(grouped)) {\r\n    merge(grouped[index]);\r\n    if (flattened == null) {\r\n      flattened = grouped[index];\r\n    }\r\n    else {\r\n      flattened = combine(grouped[index], flattened);\r\n    }\r\n  }\r\n  return flattened;\r\n}\r\n\r\n/**\r\n * Merges a set of intervals with the same index that are \r\n * completely overlapped by another\r\n * \r\n * @param {Interval[]} intervals \r\n * @returns {Interval[]}\r\n */\r\nconst merge = (intervals: Interval[]): Interval[] => {\r\n  if (intervals == null || intervals.length <= 1) return intervals;\r\n\r\n  const result: Interval[] = [];\r\n  let prev = intervals[0];\r\n  for (let i = 1; i < intervals.length; i++) {\r\n    const curr = intervals[i];\r\n\r\n    if (prev.end >= curr.end) {\r\n      // merged case\r\n      const merged = Object.assign({}, prev, { end: Math.max(prev.end, curr.end)});\r\n      prev = merged;\r\n    } else {\r\n      result.push(prev);\r\n      prev = curr;\r\n    }\r\n  }\r\n\r\n  result.push(prev);\r\n  return result;\r\n}\r\n\r\n/**\r\n * Given two sets of intervals it merges them so the highIndexes set has priority\r\n *\r\n * @param {Interval[]} highIndexes\r\n * @param {Interval[]} lowIndexes\r\n * \r\n * @returns {Interval[]}\r\n */\r\nconst combine = (highIndexes: Interval[], lowIndexes: Interval[]): Interval[] => {\r\n  let highCount = 0;\r\n  let lowCount = 0;\r\n\r\n  const merged: Interval[] = [];\r\n\r\n  while (highCount < highIndexes.length || lowCount < lowIndexes.length) {\r\n    // Only low priority left so push it on the stack\r\n    if (highCount === highIndexes.length) {\r\n      merged.push(Object.assign({}, lowIndexes[lowCount]));\r\n      lowCount++;\r\n      // Only high priority left so push it on the stack\r\n    } else if (lowCount === lowIndexes.length) {\r\n      merged.push(Object.assign(highIndexes[highCount]));\r\n      highCount++;\r\n      // if high priority starts first\r\n    } else if (highIndexes[highCount].start <= lowIndexes[lowCount].start) {\r\n      lowIndexes[lowCount].start = Math.max(lowIndexes[lowCount].start, highIndexes[highCount].end);\r\n      if (lowIndexes[lowCount].start >= lowIndexes[lowCount].end) {\r\n        lowCount++;\r\n      }\r\n      merged.push(Object.assign({}, highIndexes[highCount]));\r\n      highCount++;\r\n    } else if (highIndexes[highCount].start >= lowIndexes[lowCount].start) {\r\n      // end point of weak interval before the start of the strong\r\n      if (lowIndexes[lowCount].end <= highIndexes[highCount].start) {\r\n        merged.push(Object.assign({}, lowIndexes[lowCount]));\r\n        lowCount++;\r\n      } else if (highIndexes[highCount].start <= lowIndexes[lowCount].end && lowIndexes[lowCount].end <= highIndexes[highCount].end) {\r\n        lowIndexes[lowCount].end = highIndexes[highCount].start;\r\n        merged.push(Object.assign({}, lowIndexes[lowCount]));\r\n        lowCount++;\r\n      } else if (lowIndexes[lowCount].end >= highIndexes[highCount].end) {\r\n        merged.push(\r\n          Object.assign({}, lowIndexes[lowCount], {\r\n            end: highIndexes[highCount].start\r\n          })\r\n        );\r\n        lowIndexes[lowCount].start = highIndexes[highCount].end;\r\n      }\r\n    }\r\n  }\r\n\r\n  return merged;\r\n}\r\n\r\n/**\r\n *\r\n * @param {number} a\r\n * @param {number} b\r\n */\r\nconst cmp = (a: number, b: number): 1 | -1 | 0 => {\r\n  if (a > b) return +1;\r\n  if (a < b) return -1;\r\n  return 0;\r\n};\n\n\n// WEBPACK FOOTER //\n// ./src/methods/flatten.ts","import WaveShaper from '../core/waveshaper';\r\nimport WaveShapeManager from '../core/manager';\r\nimport Segment from '../models/segment';\r\n\r\ninterface DragState {\r\n    activeSegment: Segment | null;\r\n    activeSegmentStart: number;\r\n    dragWave: WaveShaper | null;\r\n}\r\n\r\nconst dragState: DragState = {\r\n    activeSegment: null,\r\n    activeSegmentStart: 0,\r\n    dragWave: null\r\n}\r\n\r\n/**\r\n * Adds drag functionality to waveshaper\r\n * \r\n * @param {WaveShapeManager} manager Waveshape Manager\r\n * @param {HammerManager} hammer Hammer instance\r\n * @param {HTMLElement} container Container element\r\n */\r\nexport default (manager: WaveShapeManager, hammer: HammerManager, container: HTMLElement) => {\r\n\r\n    /** @param {HammerInput} ev - Hammer event */\r\n    const shouldHandle = (ev: HammerInput) => manager.mode === 'drag' && ev.target.classList.contains('waveshaper');\r\n\r\n    /**\r\n     * Fires when the mouse moves over the container,\r\n     * If a segment is being dragged and the pointer moves\r\n     * into another canvas the segment is tranfered to the \r\n     * new canvas.\r\n     */\r\n    if(isTouchDevice()) {\r\n        container.addEventListener('touchmove', ev => mouseHover(ev));\r\n    } else {\r\n        container.addEventListener('mousemove', ev => mouseHover(ev));\r\n    }\r\n\r\n    /**\r\n     * Sets up the drag by finding the \r\n     */\r\n    hammer.on('panstart', (ev: HammerInput) => {\r\n        if (!shouldHandle(ev))\r\n            return;\r\n\r\n        const id = ev.target.getAttribute('data-wave-id');\r\n        if(id == null) return;\r\n\r\n        const wave = manager.waveShapers.get(id);\r\n        if(wave == null) return;\r\n\r\n        const bb = ev.target.getBoundingClientRect();\r\n        const time = (manager.scrollPosition + (ev.center.x - bb.left)) * manager.samplesPerPixel / manager.samplerate;\r\n        const interval = wave.flattened.find(i => i.start <= time && i.end >= time);\r\n\r\n        if (interval == null)\r\n            return;\r\n\r\n        const segment = wave.segments.find(s => s.id === interval.id);\r\n        if(segment == null) return;\r\n\r\n        dragState.activeSegment = segment;\r\n        dragState.activeSegmentStart = dragState.activeSegment.start;\r\n\r\n        dragState.activeSegment.index = 1000;\r\n        dragState.dragWave = wave;\r\n    });\r\n\r\n    hammer.on('panmove', (ev: HammerInput) => {\r\n        if (!shouldHandle(ev))\r\n            return;\r\n\r\n        if (dragState.activeSegment == null || dragState.dragWave == null)\r\n            return;\r\n\r\n        // If the target has moved it is handled by the mouse/touch move manager\r\n        const id = ev.target.getAttribute('data-wave-id');\r\n        if(id !== dragState.dragWave.id)\r\n            return;\r\n\r\n        const change = (ev.deltaX * manager.samplesPerPixel) / manager.samplerate;\r\n        let newTime = dragState.activeSegmentStart + change;\r\n\r\n        if (newTime + dragState.activeSegment.offsetStart < 0) {\r\n            newTime = -dragState.activeSegment.offsetStart;\r\n        }\r\n\r\n        dragState.activeSegment.start = newTime;\r\n        dragState.dragWave.flatten();\r\n        manager.draw([dragState.dragWave.id], true);\r\n    });\r\n\r\n    hammer.on('panend', (ev: HammerInput) => {\r\n        if (!shouldHandle(ev))\r\n            return;\r\n\r\n        dragState.activeSegment = null;\r\n        dragState.activeSegmentStart = 0;\r\n        dragState.dragWave = null;\r\n    });\r\n\r\n    const mouseHover = (ev: TouchEvent | MouseEvent) => {\r\n        if (manager.mode !== 'drag')\r\n            return;\r\n\r\n        if (dragState.activeSegment == null || dragState.dragWave == null)\r\n            return;\r\n\r\n        const canvas = getTouchMouseTargetElement(ev);\r\n        if (canvas == null || !(canvas instanceof HTMLCanvasElement))\r\n            return;\r\n\r\n        const id = canvas.getAttribute('data-wave-id');\r\n        if(id == null) return;\r\n\r\n        const wave = manager.waveShapers.get(id);\r\n        if(wave == null) return;\r\n\r\n        if (dragState.dragWave.id !== id) {\r\n            const index = dragState.dragWave.segments.indexOf(dragState.activeSegment);\r\n            dragState.dragWave.segments.splice(index, 1);\r\n\r\n            dragState.dragWave.flatten();\r\n            manager.draw([dragState.dragWave.id], true);\r\n\r\n            wave.segments.push(dragState.activeSegment);\r\n            dragState.activeSegment.index = 1000;\r\n\r\n            wave.flatten();\r\n            manager.draw([wave.id], true);\r\n\r\n            dragState.dragWave = wave;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the actual target from a pointer event\r\n     * @param {TouchEvent | MouseEvent} ev \r\n     */\r\n    const getTouchMouseTargetElement = (ev: TouchEvent | MouseEvent) => {\r\n        if (ev instanceof TouchEvent) {\r\n            /** @type {TouchEvent} */\r\n            const touch = ev;\r\n            return document.elementFromPoint(touch.touches[0].pageX, touch.touches[0].pageY);\r\n        }\r\n        return ev.target;\r\n    }\r\n\r\n    function isTouchDevice() {\r\n        return 'ontouchstart' in window        // works on most browsers \r\n            || navigator.maxTouchPoints;       // works on IE10/11 and Surface\r\n    };\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/interaction/drag.ts","import WaveShaper from '../core/waveshaper';\r\nimport WaveShapeManager from '../core/manager';\r\nimport Segment from '../models/segment';\r\n\r\ndeclare type SegmentSide = 'left' | 'right';\r\n\r\ninterface ResizeState {\r\n    activeSegment: Segment | null;\r\n    activeSegmentSide: SegmentSide | null;\r\n    activeSegmentOffsetStart: number;\r\n    activeSegmentOffsetEnd: number;\r\n    dragWave: WaveShaper | null;\r\n}\r\n\r\nconst resizeState: ResizeState = {\r\n    activeSegment: null,\r\n    activeSegmentSide: null,\r\n    activeSegmentOffsetStart: 0,\r\n    activeSegmentOffsetEnd: 0,\r\n    dragWave: null\r\n}\r\n\r\n/**\r\n * Adds drag functionality to waveshaper\r\n * \r\n * @param {WaveShapeManager} manager\r\n * @param {HammerManager} hammer\r\n */\r\nexport default function(manager: WaveShapeManager, hammer: HammerManager) {\r\n\r\n    /** @param {HammerInput} ev */\r\n    const shouldHandle = (ev: HammerInput) => manager.mode === 'resize' && ev != null && ev.target.classList.contains('waveshaper');\r\n\r\n    hammer.on('panstart', (ev) => { \r\n        if(!shouldHandle(ev) || resizeState.activeSegment == null)\r\n            return;\r\n\r\n        const id = ev.target.getAttribute('data-wave-id');\r\n        if(id == null) return;\r\n\r\n        const wave = manager.waveShapers.get(id);\r\n        if(wave == null) return;\r\n\r\n        const bb = ev.target.getBoundingClientRect();\r\n        const time = (manager.scrollPosition + (ev.center.x - bb.left)) * manager.samplesPerPixel / manager.samplerate;\r\n\r\n        const interval = wave.flattened.find(i => i.start <= time && i.end >= time);\r\n\r\n        if(interval == null) \r\n            return;\r\n\r\n        resizeState.activeSegmentSide = \r\n            time < interval.start + ((interval.end - interval.start) / 2) ? \r\n                'left' : \r\n                'right';\r\n\r\n        const segment = wave.segments.find(s => s.id === interval.id);\r\n        if(segment == null) return;\r\n\r\n        resizeState.activeSegment = segment;\r\n\r\n        resizeState.activeSegmentOffsetStart = segment.offsetStart;\r\n        resizeState.activeSegmentOffsetEnd = segment.offsetEnd;\r\n\r\n        segment.index = 1000;\r\n        resizeState.dragWave = wave;\r\n    });\r\n\r\n    hammer.on('panmove', (ev) =>  {\r\n        if(!shouldHandle(ev) || resizeState.dragWave == null)\r\n            return;\r\n            \r\n        if(resizeState.activeSegment == null)\r\n            return;\r\n\r\n        const change = (ev.deltaX * manager.samplesPerPixel) / manager.samplerate;\r\n        let newTime = resizeState.activeSegmentSide === 'left' ?\r\n            resizeState.activeSegmentOffsetStart + change :\r\n            resizeState.activeSegmentOffsetEnd - change;\r\n\r\n        // Don't allow offset to become less than 0\r\n        if(newTime < 0) {\r\n            newTime = 0;\r\n        }\r\n\r\n        const active = resizeState.activeSegment;\r\n        const newDuration = resizeState.activeSegmentSide === 'left' ?\r\n            (active.start + active.duration) - active.start - newTime - active.offsetEnd :\r\n            (active.start + active.duration) - active.start - active.offsetStart - newTime;\r\n\r\n        // Do not allow resizing \r\n        if(newDuration <= 2) {\r\n            return;\r\n        }\r\n        \r\n        resizeState.activeSegmentSide === 'left' ?\r\n            active.offsetStart = newTime :\r\n            active.offsetEnd = newTime;\r\n\r\n        resizeState.dragWave.flatten();\r\n        manager.draw([resizeState.dragWave.id], true);\r\n    });\r\n\r\n    hammer.on('panend', (ev) => {\r\n        if(!shouldHandle(ev))\r\n            return;\r\n\r\n        resizeState.activeSegment = null;\r\n        resizeState.activeSegmentOffsetStart = 0;\r\n        resizeState.activeSegmentOffsetEnd = 0;\r\n        resizeState.activeSegmentSide = null;\r\n        resizeState.dragWave = null;\r\n    });\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/interaction/resize.ts","import WaveShapeManager from '../core/manager';\r\n\r\n/**\r\n * Adds drag functionality to waveshaper\r\n * \r\n * @param {WaveShapeManager} manager\r\n * @param {HammerManager} hammer\r\n */\r\nexport default (manager: WaveShapeManager, hammer: HammerManager) => {\r\n\r\n    const shouldHandle = (ev: HammerInput) => manager.mode === 'cut' && ev.target.classList.contains('waveshaper');\r\n\r\n    hammer.on('tap', (ev: HammerInput) => { \r\n        if(!shouldHandle(ev))\r\n            return;\r\n\r\n        const id = ev.target.getAttribute('data-wave-id');\r\n        if(id == null) return;\r\n\r\n        const wave = manager.waveShapers.get(id);\r\n        if(wave == null) return;\r\n\r\n        const bb = ev.target.getBoundingClientRect();\r\n        const time = (manager.scrollPosition + (ev.center.x - bb.left)) * manager.samplesPerPixel / manager.samplerate;\r\n\r\n        const interval = wave.flattened.find(i => i.start <= time && i.end >= time);\r\n        if(interval == null) return;\r\n\r\n        const segment = wave.segments.find(s => s.id === interval.id);\r\n        if(segment == null) return;\r\n\r\n        const cutTime = time - segment.start;\r\n\r\n        const newSegment = { ...segment }\r\n        newSegment.offsetStart = cutTime;\r\n        newSegment.id = manager.generateId();\r\n\r\n        segment.offsetEnd = segment.duration - cutTime;\r\n        wave.segments.push(newSegment);\r\n        \r\n        wave.flatten();\r\n        manager.draw([wave.id], true);\r\n    });\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/interaction/cut.ts","import WaveShapeManager from '../core/manager';\r\n\r\nconst endMargin = 500;\r\n\r\ninterface PanState {\r\n    panStart: number;\r\n    panMax: number;\r\n}\r\n\r\nconst panState: PanState = {\r\n    panStart: 0,\r\n    panMax: 0\r\n}\r\n\r\n/**\r\n * Adds pan functionality to waveshaper\r\n * \r\n * @param {WaveShapeManager} manager\r\n * @param {HammerManager} hammer\r\n */\r\nexport default function(manager: WaveShapeManager, hammer: HammerManager) {\r\n\r\n    /** @param {HammerInput} ev */\r\n    const shouldHandle = (ev: HammerInput) => manager.mode === 'pan' && ev.target.classList.contains('waveshaper');\r\n\r\n    hammer.on('panstart', (ev) => { \r\n        if(!shouldHandle(ev))\r\n            return;\r\n\r\n        panState.panMax = manager.getScrollWidth() + endMargin;\r\n        panState.panStart = manager.scrollPosition;\r\n    });\r\n\r\n    hammer.on('panmove', (ev) =>  {\r\n        if(!shouldHandle(ev))\r\n            return;\r\n\r\n        const newPosition = panState.panStart - ev.deltaX;\r\n\r\n        if(newPosition < 0)\r\n            return;\r\n\r\n        if(newPosition > panState.panMax - manager.width)\r\n            return;\r\n        \r\n        manager.scrollPosition = newPosition;\r\n        manager.draw(null, false);\r\n    });\r\n\r\n    hammer.on('panend', (ev) => {\r\n        if(!shouldHandle(ev))\r\n            return;\r\n\r\n        panState.panStart = 0;\r\n        panState.panMax = 0;\r\n    });\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/interaction/pan.ts","import WaveShapeManager from '../core/manager';\r\n\r\nconst endMargin = 500;\r\n\r\ninterface ZoomState {\r\n    maxWidth: number;\r\n    sppStart: number;\r\n}\r\n\r\nconst zoomState: ZoomState = {\r\n    maxWidth: 0,\r\n    sppStart: 0\r\n}\r\n\r\n/**\r\n * Adds pinch zoom functionality to waveshaper\r\n * \r\n * @param {WaveShapeManager} manager\r\n * @param {HammerManager} hammer\r\n */\r\nexport default function(manager: WaveShapeManager, hammer: HammerManager) {\r\n\r\n    const shouldHandle = (ev: HammerInput) => manager.mode === 'pan' && ev.target.classList.contains('waveshaper');\r\n\r\n    hammer.on('pinchstart', (ev) => {\r\n        if(!shouldHandle(ev))\r\n            return;\r\n\r\n        zoomState.sppStart = manager.samplesPerPixel;\r\n        zoomState.maxWidth = manager.getScrollWidth() + endMargin;\r\n    });\r\n\r\n    hammer.on('pinchmove', (ev) => {\r\n        if(!shouldHandle(ev))\r\n            return;\r\n\r\n        const sampleAtLeft = manager.scrollPosition * manager.samplesPerPixel;\r\n        const samplesInView = manager.width * manager.samplesPerPixel;\r\n        const samplesToCenter = samplesInView / 2;\r\n\r\n        const newSpp = zoomState.sppStart * ev.scale;\r\n        const newSamplesInView = manager.width * newSpp;\r\n        const newSamplesToCenter = newSamplesInView / 2;\r\n\r\n        const maxWidth = manager.getScrollWidth() + endMargin;\r\n        const maxSamplesInView = maxWidth  * manager.samplerate;\r\n\r\n        if(newSamplesInView >= maxSamplesInView)\r\n            return;\r\n\r\n        const newScroll = (sampleAtLeft + samplesToCenter - newSamplesToCenter) / newSpp;\r\n\r\n        manager.samplesPerPixel = newSpp;\r\n        manager.scrollPosition = newScroll >= 0 ? newScroll : 0;\r\n\r\n        manager.draw(null, false);\r\n    });\r\n\r\n    hammer.on('pinchend', (ev) => {\r\n        if(!shouldHandle(ev))\r\n            return;\r\n\r\n        zoomState.sppStart = 0;\r\n        zoomState.maxWidth = 0;\r\n    });\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/interaction/zoom.ts","import * as Hammer from 'hammerjs';\r\n\r\nconst hammerOptions: HammerOptions = {\r\n    touchAction : 'pan-y',\r\n    recognizers: [\r\n        [Hammer.Pan, { direction: Hammer.DIRECTION_HORIZONTAL }],\r\n        [Hammer.Pinch, { enable : true }],\r\n        [Hammer.Tap]\r\n    ]\r\n}\r\n\r\nexport default hammerOptions;\n\n\n// WEBPACK FOOTER //\n// ./src/config/hammerconfig.ts","export type MeterType = 'peak' | 'rms';\r\nexport type InteractionMode = 'pan' | 'drag' | 'cut' | 'resize';\r\n\r\nexport type GenerateId = () => string;\r\n\r\nexport interface ManagerOptions {\r\n    scrollPosition: number;\r\n    samplesPerPixel: number;\r\n    resolution: number;\r\n    meterType: MeterType;\r\n    mode: InteractionMode;\r\n    width: number;\r\n    height: number;\r\n    generateId: GenerateId;\r\n}\r\n\r\nconst defaultOptions: ManagerOptions = {\r\n    scrollPosition: 0,\r\n    samplesPerPixel: 1024,\r\n    resolution: 10,\r\n    meterType: 'rms',\r\n    mode: 'pan',\r\n    width: 300,\r\n    height: 150,\r\n    generateId: () => Math.random.toString()\r\n}\r\n\r\nexport default defaultOptions;\n\n\n// WEBPACK FOOTER //\n// ./src/config/managerconfig.ts"],"sourceRoot":""}