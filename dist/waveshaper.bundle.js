/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!********************************!*\
  !*** ./src/models/interval.js ***!
  \********************************/
/*! exports provided: Interval */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* unused harmony export Interval */\n/**\r\n * A segment of audio\r\n * \r\n * @export\r\n * @param {string} id \r\n * @param {number} start \r\n * @param {number} end\r\n * @param {number} index\r\n * @param {number} originalStart \r\n * @param {Float32Array} data \r\n */\r\nfunction Interval(id, start, end, index, originalStart, data) {\r\n    this.id = id;\r\n    this.start = start;\r\n    this.end = end;\r\n    this.data = data;\r\n    this.index = index;\r\n    this.originalStart = originalStart;\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9tb2RlbHMvaW50ZXJ2YWwuanM/MDVjOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQSBzZWdtZW50IG9mIGF1ZGlvXHJcbiAqIFxyXG4gKiBAZXhwb3J0XHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBcclxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFxyXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxyXG4gKiBAcGFyYW0ge251bWJlcn0gb3JpZ2luYWxTdGFydCBcclxuICogQHBhcmFtIHtGbG9hdDMyQXJyYXl9IGRhdGEgXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gSW50ZXJ2YWwoaWQsIHN0YXJ0LCBlbmQsIGluZGV4LCBvcmlnaW5hbFN0YXJ0LCBkYXRhKSB7XHJcbiAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICB0aGlzLnN0YXJ0ID0gc3RhcnQ7XHJcbiAgICB0aGlzLmVuZCA9IGVuZDtcclxuICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XHJcbiAgICB0aGlzLm9yaWdpbmFsU3RhcnQgPSBvcmlnaW5hbFN0YXJ0O1xyXG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvbW9kZWxzL2ludGVydmFsLmpzXG4vLyBtb2R1bGUgaWQgPSAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/*!********************************!*\
  !*** ./src/core/waveshaper.js ***!
  \********************************/
/*! exports provided: WaveShaper */
/*! exports used: WaveShaper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = WaveShaper;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__defaults__ = __webpack_require__(/*! ../defaults */ 3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__strategies_calculate_peak__ = __webpack_require__(/*! ../strategies/calculate/peak */ 6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__strategies_calculate_rms__ = __webpack_require__(/*! ../strategies/calculate/rms */ 7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__strategies_render_double_loop__ = __webpack_require__(/*! ../strategies/render/double-loop */ 8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__models_segment__ = __webpack_require__(/*! ../models/segment */ 2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__methods_flatten__ = __webpack_require__(/*! ../methods/flatten */ 9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__models_interval__ = __webpack_require__(/*! ../models/interval */ 0);\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Default constructor \r\n * \r\n * @param {string} id\r\n * @param {HTMLCanvasElement} canvas\r\n * @param {Segment[]} segments \r\n * @param {Interval[]} flattened\r\n */\r\nfunction WaveShaper(id, canvas, segments) {\r\n    this.id = id;\r\n    this.canvas = canvas;\r\n    this.segments = segments;\r\n    this.flatten();\r\n    this.canvas.width = canvas.clientWidth;\r\n    this.canvas.height = canvas.clientHeight;\r\n    this.calculated;\r\n\r\n    this.offScreenCanvas = document.createElement('canvas');\r\n    this.offScreenCanvas.width = this.canvas.width;\r\n    this.offScreenCanvas.height = this.canvas.height;\r\n\r\n    this.width = this.canvas.width;\r\n    this.height = this.canvas.height;\r\n\r\n    this.ctx = canvas.getContext('2d');\r\n    this.offScreenCtx = this.offScreenCanvas.getContext('2d');\r\n}\r\n\r\nWaveShaper.prototype.flatten = function () {\r\n    this.flattened = Object(__WEBPACK_IMPORTED_MODULE_5__methods_flatten__[\"a\" /* flattenSegments */])(this.segments);\r\n}\r\n\r\n/**\r\n * Gets the duration of the audio in seconds\r\n * \r\n * @param {number} samplesPerPixel \r\n * @returns {number} Decimal value of total duration in seconds\r\n */\r\nWaveShaper.prototype.getDuration = function () {\r\n    let maxLength = 0;\r\n    for (let segment of this.segments) {\r\n        const end = segment.start + segment.duration;\r\n        if (end > maxLength) {\r\n            maxLength = end;\r\n        }\r\n    }\r\n    return maxLength;\r\n}\r\n\r\n/**\r\n * Gets the duration of the audio as a date\r\n * \r\n * @param {number} samplesPerPixel \r\n * @returns {Date} Date containing audio length\r\n */\r\nWaveShaper.prototype.getDurationAsDate = function (samplesPerPixel) {\r\n    var date = new Date(0);\r\n    date.setTime(this.getDuration(samplerate) * 1000);\r\n    return date;\r\n}\r\n\r\n/**\r\n * Gets the width of scrollbar needed to scroll through the entire audio file\r\n * \r\n * @param {number} samplesPerPixel \r\n * @param {number} samplerate \r\n * @returns {number} Scroll width in pixels for the entire audio file\r\n */\r\nWaveShaper.prototype.getScrollWidth = function (samplesPerPixel, samplerate) {\r\n    let maxLength = this.getDuration();\r\n    return maxLength * samplerate / samplesPerPixel;\r\n}\r\n\r\nWaveShaper.prototype.lastValues = {\r\n    meterType: null,\r\n    sampleSize: null,\r\n    samplesPerPixel: null,\r\n    scrollPosition: null,\r\n    samplerate: null\r\n}\r\n\r\nWaveShaper.prototype.skipDraw = false;\r\n\r\n/**\r\n * Gets the summerized values for the current settings\r\n * \r\n * @param {string} meterType\r\n * @param {number} sampleSize\r\n * @param {number} samplesPerPixel\r\n * @param {number} scrollPosition\r\n * @param {boolean} forceDraw\r\n * @returns {Array} Two dimensional array, one entry for each pixel, for each pixel a min\r\n * and a max value.\r\n */\r\nWaveShaper.prototype.calculate = function (meterType, sampleSize, samplesPerPixel, scrollPosition, samplerate, forceDraw) {\r\n    if (!forceDraw && this.lastValues.meterType === meterType && this.lastValues.sampleSize === sampleSize &&\r\n        this.lastValues.samplesPerPixel === samplesPerPixel && this.lastValues.scrollPosition === scrollPosition &&\r\n        this.lastValues.samplerate === samplerate) {\r\n\r\n        this.skipDraw = true;\r\n        return this.calculated;\r\n    } else {\r\n        this.skipDraw = false;\r\n        this.lastValues = {\r\n            meterType,\r\n            sampleSize,\r\n            samplesPerPixel,\r\n            scrollPosition,\r\n            samplerate\r\n        }\r\n    }\r\n\r\n    \r\n    switch (meterType) {\r\n        case 'peak':\r\n            this.calculated = Object(__WEBPACK_IMPORTED_MODULE_1__strategies_calculate_peak__[\"a\" /* calculatePeaks */])(\r\n                sampleSize,\r\n                samplesPerPixel,\r\n                this.width,\r\n                this.flattened,\r\n                scrollPosition,\r\n                samplerate\r\n            );\r\n            break;\r\n        default:\r\n            this.calculated = Object(__WEBPACK_IMPORTED_MODULE_2__strategies_calculate_rms__[\"a\" /* calculateRms */])(\r\n                sampleSize,\r\n                samplesPerPixel,\r\n                this.width,\r\n                this.height,\r\n                this.flattened,\r\n                scrollPosition,\r\n                samplerate,\r\n                this.ctx,\r\n                this.offScreenCtx\r\n            );\r\n    }\r\n    \r\n    return this.calculated;\r\n}\r\n\r\n/**\r\n * Draws the waveform to the canvas with current settings\r\n * \r\n * @param {string} drawStyle\r\n */\r\nWaveShaper.prototype.draw = function (drawStyle) {\r\n    if (!this.skipDraw) {\r\n        Object(__WEBPACK_IMPORTED_MODULE_3__strategies_render_double_loop__[\"a\" /* drawDoubleLoop */])(\r\n            this.calculated,\r\n            this.height,\r\n            this.width,\r\n            this.ctx,\r\n            this.offScreenCtx,\r\n            drawStyle\r\n        );\r\n    }\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/*!*******************************!*\
  !*** ./src/models/segment.js ***!
  \*******************************/
/*! exports provided: Segment */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* unused harmony export Segment */\n/**\r\n * A segment of audio\r\n * \r\n * @export\r\n * @param {string} id \r\n * @param {number} start \r\n * @param {number} duration \r\n * @param {number} offsetStart \r\n * @param {number} offsetEnd \r\n * @param {Float32Array} data \r\n * @param {number} index\r\n */\r\nfunction Segment(id, start, duration, offsetStart, offsetEnd, data, index) {\r\n    this.id = id;\r\n    this.start = start;\r\n    this.duration = duration;\r\n    this.offsetStart = offsetStart;\r\n    this.offsetEnd = offsetEnd;\r\n    this.data = data;\r\n    this.index = index;\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9tb2RlbHMvc2VnbWVudC5qcz83MzhiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBBIHNlZ21lbnQgb2YgYXVkaW9cclxuICogXHJcbiAqIEBleHBvcnRcclxuICogQHBhcmFtIHtzdHJpbmd9IGlkIFxyXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvbiBcclxuICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFN0YXJ0IFxyXG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0RW5kIFxyXG4gKiBAcGFyYW0ge0Zsb2F0MzJBcnJheX0gZGF0YSBcclxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gU2VnbWVudChpZCwgc3RhcnQsIGR1cmF0aW9uLCBvZmZzZXRTdGFydCwgb2Zmc2V0RW5kLCBkYXRhLCBpbmRleCkge1xyXG4gICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xyXG4gICAgdGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xyXG4gICAgdGhpcy5vZmZzZXRTdGFydCA9IG9mZnNldFN0YXJ0O1xyXG4gICAgdGhpcy5vZmZzZXRFbmQgPSBvZmZzZXRFbmQ7XHJcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgdGhpcy5pbmRleCA9IGluZGV4O1xyXG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvbW9kZWxzL3NlZ21lbnQuanNcbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/*!*************************!*\
  !*** ./src/defaults.js ***!
  \*************************/
/*! exports provided: defaultOptions */
/*! exports used: defaultOptions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("const defaultOptions = {\r\n    scrollPosition: 0,\r\n    samplesPerPixel: 1024,\r\n    resolution: 1,\r\n    drawStyle: 'fill',\r\n    meterType: 'rms'\r\n}\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = defaultOptions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9kZWZhdWx0cy5qcz82NmQ4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcclxuICAgIHNjcm9sbFBvc2l0aW9uOiAwLFxyXG4gICAgc2FtcGxlc1BlclBpeGVsOiAxMDI0LFxyXG4gICAgcmVzb2x1dGlvbjogMSxcclxuICAgIGRyYXdTdHlsZTogJ2ZpbGwnLFxyXG4gICAgbWV0ZXJUeXBlOiAncm1zJ1xyXG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvZGVmYXVsdHMuanNcbi8vIG1vZHVsZSBpZCA9IDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/*!*****************************!*\
  !*** ./src/core/manager.js ***!
  \*****************************/
/*! exports provided: WaveShapeManager */
/*! exports used: WaveShapeManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__waveshaper__ = __webpack_require__(/*! ./waveshaper */ 1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_segment__ = __webpack_require__(/*! ../models/segment */ 2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__defaults__ = __webpack_require__(/*! ../defaults */ 3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_hamsters_js__ = __webpack_require__(/*! hamsters.js */ 10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_hamsters_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_hamsters_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__interaction_drag__ = __webpack_require__(/*! ../interaction/drag */ 13);\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * \r\n * @export\r\n */\r\nclass WaveShapeManager {\r\n\r\n    /**\r\n     * Map of waveshapers managed by the manager\r\n     * \r\n     * @type {Map<string, WaveShaper>}\r\n     * @readonly\r\n     * @memberof WaveShapeManager\r\n     */\r\n    get waveShapers(){ return this._waveShapers; }\r\n\r\n    /**\r\n     * @description Audio samplerate\r\n     * \r\n     * @returns {number}\r\n     * @readonly\r\n     * @memberof WaveShapeManager\r\n     */\r\n    get samplerate() { return this._samplerate; }\r\n\r\n    /**\r\n     * @description Sample range per pixel, zoom level\r\n     * @example Lower value to zoom in, increase to zoom out\r\n     * \r\n     * @param {number}\r\n     * @returns {number}\r\n     * @memberof WaveShapeManager\r\n     */\r\n    get samplesPerPixel() { return this._samplesPerPixel; }\r\n    set samplesPerPixel(spp) { this._samplesPerPixel = spp; }\r\n\r\n    /**\r\n     * @description Sample size per pixel, determines accuracy\r\n     * @example Lower value to decrease accuracy and increase performance\r\n     * \r\n     * @param {number}\r\n     * @returns {number}\r\n     * @memberof WaveShapeManager\r\n     */\r\n    get resolution() { return this._resolution; }\r\n    set resolution(res) { this._resolution = res; }\r\n\r\n    /**\r\n     * @description Virtual scrolling is used, changing this value pans the waveform\r\n     * \r\n     * @param {number}\r\n     * @returns {number}\r\n     * @memberof WaveShapeManager\r\n     */\r\n    get scrollPosition() { return this._scrollPosition; }\r\n    set scrollPosition(position) { this._scrollPosition = position; }\r\n\r\n    /**\r\n     * @description Draw style of waveform, either filled or stroked\r\n     * \r\n     * @param {'stroke' | 'fill'}\r\n     * @returns {'stroke' | 'fill'}\r\n     * @memberof WaveShapeManager\r\n     */\r\n    get drawStyle() { return this._drawStyle; }\r\n    set drawStyle(style) { this._drawStyle = style; }\r\n\r\n    /**\r\n     * @description Calculation method used to determine value of sample range\r\n     * @example Peak get the peak values of the range, RMS is similar to average https://en.wikipedia.org/wiki/Root_mean_square\r\n     * \r\n     * @param {'peak' | 'rms'}\r\n     * @returns {'peak' | 'rms'}\r\n     * @memberof WaveShapeManager\r\n     */\r\n    get meterType() { return this._meterType; }\r\n    set meterType(type) { this._meterType = type; }\r\n\r\n    /**\r\n     * @description Set at start of an interaction, null when interaction is complete\r\n     * \r\n     * @param {Segment} segment Currently active segment\r\n     * @returns {Segment}\r\n     * @memberof WaveShapeManager\r\n     */\r\n    get activeSegment() { return this._activeSegment; }\r\n    set activeSegment(segment) { this._activeSegment = segment; }\r\n\r\n    /**\r\n     * @description Set at start of an interaction, null when interaction is complete\r\n     * \r\n     * @param {number} start Start time of Segment at beginning of interaction\r\n     * @returns {number}\r\n     * @memberof WaveShapeManager\r\n     */\r\n    get activeSegmentStart() { return this._activeSegmentStart; }\r\n    set activeSegmentStart(start) { this._activeSegmentStart = start; }\r\n\r\n    /**\r\n     * @param {number} samplerate Audio samplerate\r\n     * @param {defaultOptions} [options=defaultOptions] Initial options\r\n     * @throws {Error} Throws an error if samplerate is null or NaN\r\n     * @constructor \r\n     */\r\n    constructor(samplerate, options = __WEBPACK_IMPORTED_MODULE_2__defaults__[\"a\" /* defaultOptions */]) {\r\n        if(samplerate == null || isNaN(samplerate)) {\r\n            throw new Error('samplerate cannot be null and must be a number');\r\n        }\r\n\r\n        this._waveShapers = new Map();\r\n        this._samplerate = samplerate;\r\n    \r\n        this._resolution = options.resolution;\r\n        this._samplesPerPixel = options.samplesPerPixel;\r\n        this._scrollPosition = options.scrollPosition;\r\n        this._drawStyle = options.drawStyle;\r\n        this._meterType = options.meterType;\r\n    }\r\n    \r\n    /**\r\n     * @description Adds a waveshaper to the manager\r\n     * \r\n     * @param {string} id\r\n     * @param {HTMLCanvasElement} canvas Html canvas element\r\n     * @param {Segment[]} segments \r\n     * @memberof WaveShapeManager\r\n     */\r\n    addWave(id, canvas, segments) {\r\n        const wave = new __WEBPACK_IMPORTED_MODULE_0__waveshaper__[\"a\" /* WaveShaper */](id, canvas, segments);\r\n        this.waveShapers.set(id, wave);\r\n        \r\n        Object(__WEBPACK_IMPORTED_MODULE_4__interaction_drag__[\"a\" /* setupDrag */])(wave, this);\r\n    }\r\n\r\n    /**\r\n     * @description Removes the wave with given id from the manager\r\n     * \r\n     * @param {string} id \r\n     * @memberof WaveShapeManager\r\n     */\r\n    removeWave(id) {\r\n        this.waveShapers.delete(id);\r\n    }\r\n\r\n    /**\r\n     * @description Flattens the segments of the given waveshaper id\r\n     * \r\n     * @param {string} id \r\n     * @memberof WaveShapeManager\r\n     */\r\n    flatten(id) {\r\n        this.waveShapers.get(id).flatten();\r\n    }\r\n}\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = WaveShapeManager;\n\r\n\r\n/**\r\n * Gets the duration of the audio in seconds\r\n * \r\n * @returns {number} Decimal value of total duration in seconds\r\n */\r\nWaveShapeManager.prototype.getDuration = function () {\r\n    var maxDuration = 0;\r\n    for (var wave of this.waveShapers.values()) {\r\n        var duration = wave.getDuration(this.samplesPerPixel);\r\n        if (duration > maxDuration) {\r\n            maxDuration = duration;\r\n        }\r\n    }\r\n    return maxDuration;\r\n}\r\n\r\n/**\r\n * Gets the duration of the audio as a date\r\n * \r\n * @returns {Date} Date containing audio length\r\n */\r\nWaveShapeManager.prototype.getDurationAsDate = function () {\r\n    var date = new Date(0);\r\n    date.setTime(this.getDuration() * 1000);\r\n    return date;\r\n}\r\n\r\n/**\r\n * Gets the width of scrollbar needed to scroll through the entire audio file\r\n * \r\n * @returns {number} Scroll width in pixels for the entire audio file\r\n */\r\nWaveShapeManager.prototype.getScrollWidth = function () {\r\n    var maxWidth = 0;\r\n    for (var wave of this.waveShapers.values()) {\r\n        const width = wave.getScrollWidth(this.samplesPerPixel, this.samplerate);\r\n        if (width > maxWidth) {\r\n            maxWidth = width;\r\n        }\r\n    }\r\n\r\n    return maxWidth;\r\n}\r\n\r\n/**\r\n * Draws the waveform to the canvas with current settings\r\n * \r\n * @param {string[]} ids Options array of id's to draw\r\n * @param {boolean} forceDraw Force redraw of the given waves\r\n */\r\nWaveShapeManager.prototype.draw = function (ids, forceDraw) {\r\n    const idsToDraw = ids == null ? this.waveShapers.keys() : ids;\r\n    for (var id of idsToDraw) {\r\n        var wave = this.waveShapers.get(id);\r\n        wave.calculate(\r\n            this.meterType, \r\n            this.resolution, \r\n            this.samplesPerPixel, \r\n            this.scrollPosition,\r\n            this.samplerate,\r\n            forceDraw\r\n        );\r\n    }\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! exports provided: WaveShaper, WaveShapeManager, Schedular */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_core_waveshaper__ = __webpack_require__(/*! ./src/core/waveshaper */ 1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_core_manager__ = __webpack_require__(/*! ./src/core/manager */ 4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_schedular_schedular__ = __webpack_require__(/*! ./src/schedular/schedular */ 15);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"WaveShaper\", function() { return __WEBPACK_IMPORTED_MODULE_0__src_core_waveshaper__[\"a\"]; });\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"WaveShapeManager\", function() { return __WEBPACK_IMPORTED_MODULE_1__src_core_manager__[\"a\"]; });\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"Schedular\", function() { return __WEBPACK_IMPORTED_MODULE_2__src_schedular_schedular__[\"a\"]; });\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nwindow[\"WaveShaper\"] = __WEBPACK_IMPORTED_MODULE_0__src_core_waveshaper__[\"a\" /* WaveShaper */];\r\nwindow[\"WaveShapeManager\"] = __WEBPACK_IMPORTED_MODULE_1__src_core_manager__[\"a\" /* WaveShapeManager */];\r\nwindow[\"Schedular\"] = __WEBPACK_IMPORTED_MODULE_2__src_schedular_schedular__[\"a\" /* Schedular */];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2luZGV4LmpzPzI2NDUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgV2F2ZVNoYXBlciB9IGZyb20gXCIuL3NyYy9jb3JlL3dhdmVzaGFwZXJcIjtcclxuaW1wb3J0IHsgV2F2ZVNoYXBlTWFuYWdlciB9IGZyb20gXCIuL3NyYy9jb3JlL21hbmFnZXJcIjtcclxuaW1wb3J0IHsgU2NoZWR1bGFyIH0gZnJvbSAnLi9zcmMvc2NoZWR1bGFyL3NjaGVkdWxhcic7XHJcblxyXG5leHBvcnQgeyBXYXZlU2hhcGVyIH07XHJcbmV4cG9ydCB7IFdhdmVTaGFwZU1hbmFnZXIgfTtcclxuZXhwb3J0IHsgU2NoZWR1bGFyIH07XHJcblxyXG53aW5kb3dbXCJXYXZlU2hhcGVyXCJdID0gV2F2ZVNoYXBlcjtcclxud2luZG93W1wiV2F2ZVNoYXBlTWFuYWdlclwiXSA9IFdhdmVTaGFwZU1hbmFnZXI7XHJcbndpbmRvd1tcIlNjaGVkdWxhclwiXSA9IFNjaGVkdWxhcjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/*!******************************************!*\
  !*** ./src/strategies/calculate/peak.js ***!
  \******************************************/
/*! exports provided: calculatePeaks */
/*! exports used: calculatePeaks */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = calculatePeaks;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__models_interval__ = __webpack_require__(/*! ../../models/interval */ 0);\n\r\n\r\n/**\r\n * \r\n * \r\n * @export\r\n * @param {number} sampleRatio \r\n * @param {number} samplesPerPixel \r\n * @param {number} width \r\n * @param {Interval[]} segments \r\n * @param {number} scrollPosition \r\n * @param {number} sampleRate\r\n * @returns \r\n */\r\nfunction calculatePeaks(sampleRatio, samplesPerPixel, width, segments, scrollPosition, sampleRate) {\r\n    const sampleSize = Math.max(1, samplesPerPixel / sampleRatio);\r\n    const start = scrollPosition * samplesPerPixel;\r\n    const startSecond = start / sampleRate;\r\n\r\n    const vals = [];\r\n\r\n    // For each pixel we display\r\n    for (let i = 0; i < width; i++) {\r\n        let posMax = 0;\r\n        let negMax = 0;\r\n\r\n        const currentSecond = startSecond + ((i * samplesPerPixel) / sampleRate);\r\n        const interval = segments.find(s => s.start <= currentSecond && s.end >= currentSecond);\r\n\r\n        if(interval == null) {\r\n            vals.push([negMax, posMax]);\r\n            continue;\r\n        }\r\n\r\n        const offsetStart = interval.start - interval.originalStart;\r\n        const secondsIntoInterval = currentSecond - interval.start;\r\n        const startSample = Math.floor(((secondsIntoInterval + offsetStart) * sampleRate));\r\n\r\n        // Cycle through the data-points relevant to the pixel\r\n        // Don't cycle through more tha n sampleSize frames per pixel.\r\n        for (let j = 0; j < samplesPerPixel; j += sampleSize) {\r\n            const index = j + startSample;\r\n            if (index < interval.data.length) {\r\n                const val = interval.data[index];\r\n\r\n                // Keep track of positive and negative values separately\r\n                if (val > 0 && val > posMax) {\r\n                    posMax = val;\r\n                } else if (val < negMax) {\r\n                    negMax = val;\r\n                }\r\n            }\r\n        }\r\n        vals.push([negMax, posMax]);\r\n    }\r\n    return vals;\r\n}\r\n\r\n/**\r\n * \r\n * \r\n * @export\r\n * @param {number} sampleRatio \r\n * @param {number} samplesPerPixel \r\n * @param {number} width \r\n * @param {Interval[]} segments \r\n * @param {number} scrollPosition \r\n * @param {number} sampleRate\r\n * @returns \r\n */\r\n// export function calculatePeaks2(sampleRatio, samplesPerPixel, width, segments, scrollPosition, sampleRate) {\r\n//     const sampleSize = Math.max(1, samplesPerPixel / sampleRatio);\r\n//     const start = scrollPosition * samplesPerPixel;\r\n//     const startSecond = start / sampleRate;\r\n//     const endSecond = startSecond + (width * samplesPerPixel / sampleRate);\r\n\r\n//     const intervals = segments.filter(s => s.start <= endSecond && s.end >= startSecond);\r\n//     const vals = [];\r\n\r\n//     for(let interval of intervals) {\r\n//         const startPixel = Math.floor(Math.max(interval.start - startSecond, 0) * sampleRate / samplesPerPixel);\r\n//         const endPixel = startPixel + ((interval.end - interval.start) * sampleRate / samplesPerPixel);\r\n//     }\r\n\r\n//     // For each pixel we display\r\n//     for (let i = 0; i < width; i++) {\r\n//         let posMax = 0;\r\n//         let negMax = 0;\r\n\r\n//         const currentSecond = startSecond + ((i * samplesPerPixel) / sampleRate);\r\n//         const interval = segments.find(s => s.start <= currentSecond && s.end >= currentSecond);\r\n\r\n//         if(interval == null) {\r\n//             vals.push([negMax, posMax]);\r\n//             continue;\r\n//         }\r\n\r\n//         const startSample = Math.floor(((startSecond - interval.originalStart) * sampleRate) + (i * samplesPerPixel));\r\n\r\n//         // Cycle through the data-points relevant to the pixel\r\n//         // Don't cycle through more tha n sampleSize frames per pixel.\r\n//         for (let j = 0; j < samplesPerPixel; j += sampleSize) {\r\n//             const index = j + startSample;\r\n//             if (index < interval.data.length) {\r\n//                 const val = interval.data[index];\r\n\r\n//                 // Keep track of positive and negative values separately\r\n//                 if (val > 0 && val > posMax) {\r\n//                     posMax = val;\r\n//                 } else if (val < negMax) {\r\n//                     negMax = val;\r\n//                 }\r\n//             }\r\n//         }\r\n//         vals.push([negMax, posMax]);\r\n//     }\r\n//     return vals;\r\n// }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9zdHJhdGVnaWVzL2NhbGN1bGF0ZS9wZWFrLmpzP2YyMWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW50ZXJ2YWwgfSBmcm9tICcuLi8uLi9tb2RlbHMvaW50ZXJ2YWwnO1xyXG5cclxuLyoqXHJcbiAqIFxyXG4gKiBcclxuICogQGV4cG9ydFxyXG4gKiBAcGFyYW0ge251bWJlcn0gc2FtcGxlUmF0aW8gXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBzYW1wbGVzUGVyUGl4ZWwgXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCBcclxuICogQHBhcmFtIHtJbnRlcnZhbFtdfSBzZWdtZW50cyBcclxuICogQHBhcmFtIHtudW1iZXJ9IHNjcm9sbFBvc2l0aW9uIFxyXG4gKiBAcGFyYW0ge251bWJlcn0gc2FtcGxlUmF0ZVxyXG4gKiBAcmV0dXJucyBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVQZWFrcyhzYW1wbGVSYXRpbywgc2FtcGxlc1BlclBpeGVsLCB3aWR0aCwgc2VnbWVudHMsIHNjcm9sbFBvc2l0aW9uLCBzYW1wbGVSYXRlKSB7XHJcbiAgICBjb25zdCBzYW1wbGVTaXplID0gTWF0aC5tYXgoMSwgc2FtcGxlc1BlclBpeGVsIC8gc2FtcGxlUmF0aW8pO1xyXG4gICAgY29uc3Qgc3RhcnQgPSBzY3JvbGxQb3NpdGlvbiAqIHNhbXBsZXNQZXJQaXhlbDtcclxuICAgIGNvbnN0IHN0YXJ0U2Vjb25kID0gc3RhcnQgLyBzYW1wbGVSYXRlO1xyXG5cclxuICAgIGNvbnN0IHZhbHMgPSBbXTtcclxuXHJcbiAgICAvLyBGb3IgZWFjaCBwaXhlbCB3ZSBkaXNwbGF5XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdpZHRoOyBpKyspIHtcclxuICAgICAgICBsZXQgcG9zTWF4ID0gMDtcclxuICAgICAgICBsZXQgbmVnTWF4ID0gMDtcclxuXHJcbiAgICAgICAgY29uc3QgY3VycmVudFNlY29uZCA9IHN0YXJ0U2Vjb25kICsgKChpICogc2FtcGxlc1BlclBpeGVsKSAvIHNhbXBsZVJhdGUpO1xyXG4gICAgICAgIGNvbnN0IGludGVydmFsID0gc2VnbWVudHMuZmluZChzID0+IHMuc3RhcnQgPD0gY3VycmVudFNlY29uZCAmJiBzLmVuZCA+PSBjdXJyZW50U2Vjb25kKTtcclxuXHJcbiAgICAgICAgaWYoaW50ZXJ2YWwgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB2YWxzLnB1c2goW25lZ01heCwgcG9zTWF4XSk7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgb2Zmc2V0U3RhcnQgPSBpbnRlcnZhbC5zdGFydCAtIGludGVydmFsLm9yaWdpbmFsU3RhcnQ7XHJcbiAgICAgICAgY29uc3Qgc2Vjb25kc0ludG9JbnRlcnZhbCA9IGN1cnJlbnRTZWNvbmQgLSBpbnRlcnZhbC5zdGFydDtcclxuICAgICAgICBjb25zdCBzdGFydFNhbXBsZSA9IE1hdGguZmxvb3IoKChzZWNvbmRzSW50b0ludGVydmFsICsgb2Zmc2V0U3RhcnQpICogc2FtcGxlUmF0ZSkpO1xyXG5cclxuICAgICAgICAvLyBDeWNsZSB0aHJvdWdoIHRoZSBkYXRhLXBvaW50cyByZWxldmFudCB0byB0aGUgcGl4ZWxcclxuICAgICAgICAvLyBEb24ndCBjeWNsZSB0aHJvdWdoIG1vcmUgdGhhIG4gc2FtcGxlU2l6ZSBmcmFtZXMgcGVyIHBpeGVsLlxyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc2FtcGxlc1BlclBpeGVsOyBqICs9IHNhbXBsZVNpemUpIHtcclxuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBqICsgc3RhcnRTYW1wbGU7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA8IGludGVydmFsLmRhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWwgPSBpbnRlcnZhbC5kYXRhW2luZGV4XTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBLZWVwIHRyYWNrIG9mIHBvc2l0aXZlIGFuZCBuZWdhdGl2ZSB2YWx1ZXMgc2VwYXJhdGVseVxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbCA+IDAgJiYgdmFsID4gcG9zTWF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zTWF4ID0gdmFsO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWwgPCBuZWdNYXgpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZWdNYXggPSB2YWw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFscy5wdXNoKFtuZWdNYXgsIHBvc01heF0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZhbHM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBcclxuICogXHJcbiAqIEBleHBvcnRcclxuICogQHBhcmFtIHtudW1iZXJ9IHNhbXBsZVJhdGlvIFxyXG4gKiBAcGFyYW0ge251bWJlcn0gc2FtcGxlc1BlclBpeGVsIFxyXG4gKiBAcGFyYW0ge251bWJlcn0gd2lkdGggXHJcbiAqIEBwYXJhbSB7SW50ZXJ2YWxbXX0gc2VnbWVudHMgXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBzY3JvbGxQb3NpdGlvbiBcclxuICogQHBhcmFtIHtudW1iZXJ9IHNhbXBsZVJhdGVcclxuICogQHJldHVybnMgXHJcbiAqL1xyXG4vLyBleHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlUGVha3MyKHNhbXBsZVJhdGlvLCBzYW1wbGVzUGVyUGl4ZWwsIHdpZHRoLCBzZWdtZW50cywgc2Nyb2xsUG9zaXRpb24sIHNhbXBsZVJhdGUpIHtcclxuLy8gICAgIGNvbnN0IHNhbXBsZVNpemUgPSBNYXRoLm1heCgxLCBzYW1wbGVzUGVyUGl4ZWwgLyBzYW1wbGVSYXRpbyk7XHJcbi8vICAgICBjb25zdCBzdGFydCA9IHNjcm9sbFBvc2l0aW9uICogc2FtcGxlc1BlclBpeGVsO1xyXG4vLyAgICAgY29uc3Qgc3RhcnRTZWNvbmQgPSBzdGFydCAvIHNhbXBsZVJhdGU7XHJcbi8vICAgICBjb25zdCBlbmRTZWNvbmQgPSBzdGFydFNlY29uZCArICh3aWR0aCAqIHNhbXBsZXNQZXJQaXhlbCAvIHNhbXBsZVJhdGUpO1xyXG5cclxuLy8gICAgIGNvbnN0IGludGVydmFscyA9IHNlZ21lbnRzLmZpbHRlcihzID0+IHMuc3RhcnQgPD0gZW5kU2Vjb25kICYmIHMuZW5kID49IHN0YXJ0U2Vjb25kKTtcclxuLy8gICAgIGNvbnN0IHZhbHMgPSBbXTtcclxuXHJcbi8vICAgICBmb3IobGV0IGludGVydmFsIG9mIGludGVydmFscykge1xyXG4vLyAgICAgICAgIGNvbnN0IHN0YXJ0UGl4ZWwgPSBNYXRoLmZsb29yKE1hdGgubWF4KGludGVydmFsLnN0YXJ0IC0gc3RhcnRTZWNvbmQsIDApICogc2FtcGxlUmF0ZSAvIHNhbXBsZXNQZXJQaXhlbCk7XHJcbi8vICAgICAgICAgY29uc3QgZW5kUGl4ZWwgPSBzdGFydFBpeGVsICsgKChpbnRlcnZhbC5lbmQgLSBpbnRlcnZhbC5zdGFydCkgKiBzYW1wbGVSYXRlIC8gc2FtcGxlc1BlclBpeGVsKTtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICAvLyBGb3IgZWFjaCBwaXhlbCB3ZSBkaXNwbGF5XHJcbi8vICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdpZHRoOyBpKyspIHtcclxuLy8gICAgICAgICBsZXQgcG9zTWF4ID0gMDtcclxuLy8gICAgICAgICBsZXQgbmVnTWF4ID0gMDtcclxuXHJcbi8vICAgICAgICAgY29uc3QgY3VycmVudFNlY29uZCA9IHN0YXJ0U2Vjb25kICsgKChpICogc2FtcGxlc1BlclBpeGVsKSAvIHNhbXBsZVJhdGUpO1xyXG4vLyAgICAgICAgIGNvbnN0IGludGVydmFsID0gc2VnbWVudHMuZmluZChzID0+IHMuc3RhcnQgPD0gY3VycmVudFNlY29uZCAmJiBzLmVuZCA+PSBjdXJyZW50U2Vjb25kKTtcclxuXHJcbi8vICAgICAgICAgaWYoaW50ZXJ2YWwgPT0gbnVsbCkge1xyXG4vLyAgICAgICAgICAgICB2YWxzLnB1c2goW25lZ01heCwgcG9zTWF4XSk7XHJcbi8vICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4vLyAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgY29uc3Qgc3RhcnRTYW1wbGUgPSBNYXRoLmZsb29yKCgoc3RhcnRTZWNvbmQgLSBpbnRlcnZhbC5vcmlnaW5hbFN0YXJ0KSAqIHNhbXBsZVJhdGUpICsgKGkgKiBzYW1wbGVzUGVyUGl4ZWwpKTtcclxuXHJcbi8vICAgICAgICAgLy8gQ3ljbGUgdGhyb3VnaCB0aGUgZGF0YS1wb2ludHMgcmVsZXZhbnQgdG8gdGhlIHBpeGVsXHJcbi8vICAgICAgICAgLy8gRG9uJ3QgY3ljbGUgdGhyb3VnaCBtb3JlIHRoYSBuIHNhbXBsZVNpemUgZnJhbWVzIHBlciBwaXhlbC5cclxuLy8gICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHNhbXBsZXNQZXJQaXhlbDsgaiArPSBzYW1wbGVTaXplKSB7XHJcbi8vICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gaiArIHN0YXJ0U2FtcGxlO1xyXG4vLyAgICAgICAgICAgICBpZiAoaW5kZXggPCBpbnRlcnZhbC5kYXRhLmxlbmd0aCkge1xyXG4vLyAgICAgICAgICAgICAgICAgY29uc3QgdmFsID0gaW50ZXJ2YWwuZGF0YVtpbmRleF07XHJcblxyXG4vLyAgICAgICAgICAgICAgICAgLy8gS2VlcCB0cmFjayBvZiBwb3NpdGl2ZSBhbmQgbmVnYXRpdmUgdmFsdWVzIHNlcGFyYXRlbHlcclxuLy8gICAgICAgICAgICAgICAgIGlmICh2YWwgPiAwICYmIHZhbCA+IHBvc01heCkge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIHBvc01heCA9IHZhbDtcclxuLy8gICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsIDwgbmVnTWF4KSB7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgbmVnTWF4ID0gdmFsO1xyXG4vLyAgICAgICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIHZhbHMucHVzaChbbmVnTWF4LCBwb3NNYXhdKTtcclxuLy8gICAgIH1cclxuLy8gICAgIHJldHVybiB2YWxzO1xyXG4vLyB9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvc3RyYXRlZ2llcy9jYWxjdWxhdGUvcGVhay5qc1xuLy8gbW9kdWxlIGlkID0gNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/*!*****************************************!*\
  !*** ./src/strategies/calculate/rms.js ***!
  \*****************************************/
/*! exports provided: calculateRms */
/*! exports used: calculateRms */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = calculateRms;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__models_interval__ = __webpack_require__(/*! ../../models/interval */ 0);\n\r\nconst savedValues = [];\r\n\r\n/**\r\n * \r\n * \r\n * @export\r\n * @param {number} sampleRatio \r\n * @param {number} samplesPerPixel \r\n * @param {number} width \r\n * @param {number} height\r\n * @param {Interval[]} segments \r\n * @param {number} scrollPosition \r\n * @param {number} sampleRate\r\n * @param {CanvasRenderingContext2D} ctx \r\n * @param {CanvasRenderingContext2D} offScreenCtx \r\n * @returns \r\n */\r\nfunction calculateRms(sampleRatio, samplesPerPixel, width, height, segments, scrollPosition, sampleRate, ctx, offScreenCtx) {\r\n    const scale = height / 2;\r\n    const sampleSize = Math.max(1, samplesPerPixel / sampleRatio);\r\n    //const sampleSize = Math.max(1, Math.log2(samplesPerPixel));\r\n    const start = scrollPosition * samplesPerPixel;\r\n    const startSecond = start / sampleRate;\r\n\r\n    const vals = [];\r\n\r\n    offScreenCtx.beginPath();\r\n    // For each pixel we display\r\n    for (let i = 0; i < width; i++) {\r\n        let posSum = 0;\r\n        let negSum = 0;\r\n\r\n        const currentSecond = startSecond + ((i * samplesPerPixel) / sampleRate);\r\n        let interval;\r\n        for(let i = 0; i < segments.length; i++) {\r\n            const s = segments[i];\r\n            if(s.start <= currentSecond && s.end >= currentSecond) {\r\n                interval = s;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if(interval == null) {\r\n            vals.push([posSum, negSum]);\r\n            continue;\r\n        }\r\n\r\n        const offsetStart = interval.start - interval.originalStart;\r\n        const secondsIntoInterval = currentSecond - interval.start;\r\n        const startSample = Math.floor(((secondsIntoInterval + offsetStart) * sampleRate));\r\n\r\n        // Cycle through the data-points relevant to the pixel\r\n        // Don't cycle through more than sampleSize frames per pixel.\r\n        for (let j = 0; j < samplesPerPixel; j += sampleSize) {\r\n            const index = j + startSample;\r\n            if (index < interval.data.length) {\r\n                const val = interval.data[index];\r\n\r\n                // Keep track of positive and negative values separately\r\n                if (val > 0) {\r\n                    posSum += val * val;\r\n                } else {\r\n                    negSum += val * val;\r\n                }\r\n            }\r\n        }\r\n\r\n        const samples = Math.round(samplesPerPixel / sampleSize);\r\n        const minHeight = -Math.sqrt(negSum / samples * 2) * scale + scale;\r\n        const maxHeight = Math.sqrt(posSum / samples * 2) * scale + scale;\r\n        const height = maxHeight - minHeight;\r\n\r\n        offScreenCtx.moveTo(i, minHeight);\r\n        offScreenCtx.lineTo(i, maxHeight)\r\n    }\r\n    offScreenCtx.closePath();\r\n    offScreenCtx.stroke();\r\n\r\n    ctx.clearRect(0, 0, width, height);\r\n    ctx.drawImage(offScreenCtx.canvas, 0, 0);\r\n    offScreenCtx.clearRect(0, 0, width, height);\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9zdHJhdGVnaWVzL2NhbGN1bGF0ZS9ybXMuanM/OGI3NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnRlcnZhbCB9IGZyb20gJy4uLy4uL21vZGVscy9pbnRlcnZhbCc7XHJcbmNvbnN0IHNhdmVkVmFsdWVzID0gW107XHJcblxyXG4vKipcclxuICogXHJcbiAqIFxyXG4gKiBAZXhwb3J0XHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBzYW1wbGVSYXRpbyBcclxuICogQHBhcmFtIHtudW1iZXJ9IHNhbXBsZXNQZXJQaXhlbCBcclxuICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIFxyXG4gKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XHJcbiAqIEBwYXJhbSB7SW50ZXJ2YWxbXX0gc2VnbWVudHMgXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBzY3JvbGxQb3NpdGlvbiBcclxuICogQHBhcmFtIHtudW1iZXJ9IHNhbXBsZVJhdGVcclxuICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBcclxuICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IG9mZlNjcmVlbkN0eCBcclxuICogQHJldHVybnMgXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlUm1zKHNhbXBsZVJhdGlvLCBzYW1wbGVzUGVyUGl4ZWwsIHdpZHRoLCBoZWlnaHQsIHNlZ21lbnRzLCBzY3JvbGxQb3NpdGlvbiwgc2FtcGxlUmF0ZSwgY3R4LCBvZmZTY3JlZW5DdHgpIHtcclxuICAgIGNvbnN0IHNjYWxlID0gaGVpZ2h0IC8gMjtcclxuICAgIGNvbnN0IHNhbXBsZVNpemUgPSBNYXRoLm1heCgxLCBzYW1wbGVzUGVyUGl4ZWwgLyBzYW1wbGVSYXRpbyk7XHJcbiAgICAvL2NvbnN0IHNhbXBsZVNpemUgPSBNYXRoLm1heCgxLCBNYXRoLmxvZzIoc2FtcGxlc1BlclBpeGVsKSk7XHJcbiAgICBjb25zdCBzdGFydCA9IHNjcm9sbFBvc2l0aW9uICogc2FtcGxlc1BlclBpeGVsO1xyXG4gICAgY29uc3Qgc3RhcnRTZWNvbmQgPSBzdGFydCAvIHNhbXBsZVJhdGU7XHJcblxyXG4gICAgY29uc3QgdmFscyA9IFtdO1xyXG5cclxuICAgIG9mZlNjcmVlbkN0eC5iZWdpblBhdGgoKTtcclxuICAgIC8vIEZvciBlYWNoIHBpeGVsIHdlIGRpc3BsYXlcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgd2lkdGg7IGkrKykge1xyXG4gICAgICAgIGxldCBwb3NTdW0gPSAwO1xyXG4gICAgICAgIGxldCBuZWdTdW0gPSAwO1xyXG5cclxuICAgICAgICBjb25zdCBjdXJyZW50U2Vjb25kID0gc3RhcnRTZWNvbmQgKyAoKGkgKiBzYW1wbGVzUGVyUGl4ZWwpIC8gc2FtcGxlUmF0ZSk7XHJcbiAgICAgICAgbGV0IGludGVydmFsO1xyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBzID0gc2VnbWVudHNbaV07XHJcbiAgICAgICAgICAgIGlmKHMuc3RhcnQgPD0gY3VycmVudFNlY29uZCAmJiBzLmVuZCA+PSBjdXJyZW50U2Vjb25kKSB7XHJcbiAgICAgICAgICAgICAgICBpbnRlcnZhbCA9IHM7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYoaW50ZXJ2YWwgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB2YWxzLnB1c2goW3Bvc1N1bSwgbmVnU3VtXSk7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgb2Zmc2V0U3RhcnQgPSBpbnRlcnZhbC5zdGFydCAtIGludGVydmFsLm9yaWdpbmFsU3RhcnQ7XHJcbiAgICAgICAgY29uc3Qgc2Vjb25kc0ludG9JbnRlcnZhbCA9IGN1cnJlbnRTZWNvbmQgLSBpbnRlcnZhbC5zdGFydDtcclxuICAgICAgICBjb25zdCBzdGFydFNhbXBsZSA9IE1hdGguZmxvb3IoKChzZWNvbmRzSW50b0ludGVydmFsICsgb2Zmc2V0U3RhcnQpICogc2FtcGxlUmF0ZSkpO1xyXG5cclxuICAgICAgICAvLyBDeWNsZSB0aHJvdWdoIHRoZSBkYXRhLXBvaW50cyByZWxldmFudCB0byB0aGUgcGl4ZWxcclxuICAgICAgICAvLyBEb24ndCBjeWNsZSB0aHJvdWdoIG1vcmUgdGhhbiBzYW1wbGVTaXplIGZyYW1lcyBwZXIgcGl4ZWwuXHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzYW1wbGVzUGVyUGl4ZWw7IGogKz0gc2FtcGxlU2l6ZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGogKyBzdGFydFNhbXBsZTtcclxuICAgICAgICAgICAgaWYgKGluZGV4IDwgaW50ZXJ2YWwuZGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbCA9IGludGVydmFsLmRhdGFbaW5kZXhdO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEtlZXAgdHJhY2sgb2YgcG9zaXRpdmUgYW5kIG5lZ2F0aXZlIHZhbHVlcyBzZXBhcmF0ZWx5XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc1N1bSArPSB2YWwgKiB2YWw7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG5lZ1N1bSArPSB2YWwgKiB2YWw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHNhbXBsZXMgPSBNYXRoLnJvdW5kKHNhbXBsZXNQZXJQaXhlbCAvIHNhbXBsZVNpemUpO1xyXG4gICAgICAgIGNvbnN0IG1pbkhlaWdodCA9IC1NYXRoLnNxcnQobmVnU3VtIC8gc2FtcGxlcyAqIDIpICogc2NhbGUgKyBzY2FsZTtcclxuICAgICAgICBjb25zdCBtYXhIZWlnaHQgPSBNYXRoLnNxcnQocG9zU3VtIC8gc2FtcGxlcyAqIDIpICogc2NhbGUgKyBzY2FsZTtcclxuICAgICAgICBjb25zdCBoZWlnaHQgPSBtYXhIZWlnaHQgLSBtaW5IZWlnaHQ7XHJcblxyXG4gICAgICAgIG9mZlNjcmVlbkN0eC5tb3ZlVG8oaSwgbWluSGVpZ2h0KTtcclxuICAgICAgICBvZmZTY3JlZW5DdHgubGluZVRvKGksIG1heEhlaWdodClcclxuICAgIH1cclxuICAgIG9mZlNjcmVlbkN0eC5jbG9zZVBhdGgoKTtcclxuICAgIG9mZlNjcmVlbkN0eC5zdHJva2UoKTtcclxuXHJcbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgY3R4LmRyYXdJbWFnZShvZmZTY3JlZW5DdHguY2FudmFzLCAwLCAwKTtcclxuICAgIG9mZlNjcmVlbkN0eC5jbGVhclJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9zdHJhdGVnaWVzL2NhbGN1bGF0ZS9ybXMuanNcbi8vIG1vZHVsZSBpZCA9IDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/*!**********************************************!*\
  !*** ./src/strategies/render/double-loop.js ***!
  \**********************************************/
/*! exports provided: drawDoubleLoop */
/*! exports used: drawDoubleLoop */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = drawDoubleLoop;\n\r\n/**\r\n * \r\n * \r\n * @export\r\n * @param {number[][]} waveform Sampled data for each pixel, max at 0, min at 1 \r\n * @param {number} height \r\n * @param {number} width \r\n * @param {CanvasRenderingContext2D} ctx \r\n * @param {CanvasRenderingContext2D} offScreenCtx \r\n * @param {string} drawStyle \r\n */\r\nfunction drawDoubleLoop(waveform, height, width, ctx, offScreenCtx, drawStyle) {\r\n    const scale = height / 2;\r\n    offScreenCtx.clearRect(0, 0, width, height);\r\n    offScreenCtx.beginPath();\r\n\r\n    for (let i = 0; i < waveform.length; i++) {\r\n        const minHeight = (waveform[i][0] * scale) + scale;\r\n        const maxHeight = (waveform[i][1] * scale) + scale;\r\n        const height = maxHeight - minHeight;\r\n        offScreenCtx.rect(i, minHeight, 1, height);\r\n    }\r\n    offScreenCtx.closePath();\r\n    offScreenCtx.fill();\r\n    \r\n    ctx.clearRect(0, 0, width, height);\r\n    ctx.drawImage(offScreenCtx.canvas, 0, 0);\r\n    \r\n    // ctx.moveTo(0, scale);\r\n    // for (let i = 0; i < waveform.length; i++) {\r\n    //     ctx.lineTo(i, (waveform[i][0] * scale) + scale);\r\n    // }\r\n    // ctx.lineTo(waveform.length - 1, scale);\r\n\r\n    // ctx.moveTo(0, scale);\r\n    // for (let i = 0; i < waveform.length; i++) {\r\n    //     ctx.lineTo(i, (waveform[i][1] * scale) + scale);\r\n    // }\r\n    // ctx.lineTo(waveform.length - 1, scale);\r\n\r\n    // ctx.closePath();\r\n    // switch (drawStyle) { \r\n    //     case 'stroke':\r\n    //         ctx.stroke();\r\n    //         break;\r\n    //     default:\r\n    //         ctx.fill();\r\n    // }\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9zdHJhdGVnaWVzL3JlbmRlci9kb3VibGUtbG9vcC5qcz9jYWExIl0sInNvdXJjZXNDb250ZW50IjpbIlxyXG4vKipcclxuICogXHJcbiAqIFxyXG4gKiBAZXhwb3J0XHJcbiAqIEBwYXJhbSB7bnVtYmVyW11bXX0gd2F2ZWZvcm0gU2FtcGxlZCBkYXRhIGZvciBlYWNoIHBpeGVsLCBtYXggYXQgMCwgbWluIGF0IDEgXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCBcclxuICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBcclxuICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IG9mZlNjcmVlbkN0eCBcclxuICogQHBhcmFtIHtzdHJpbmd9IGRyYXdTdHlsZSBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkcmF3RG91YmxlTG9vcCh3YXZlZm9ybSwgaGVpZ2h0LCB3aWR0aCwgY3R4LCBvZmZTY3JlZW5DdHgsIGRyYXdTdHlsZSkge1xyXG4gICAgY29uc3Qgc2NhbGUgPSBoZWlnaHQgLyAyO1xyXG4gICAgb2ZmU2NyZWVuQ3R4LmNsZWFyUmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcclxuICAgIG9mZlNjcmVlbkN0eC5iZWdpblBhdGgoKTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdhdmVmb3JtLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgbWluSGVpZ2h0ID0gKHdhdmVmb3JtW2ldWzBdICogc2NhbGUpICsgc2NhbGU7XHJcbiAgICAgICAgY29uc3QgbWF4SGVpZ2h0ID0gKHdhdmVmb3JtW2ldWzFdICogc2NhbGUpICsgc2NhbGU7XHJcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gbWF4SGVpZ2h0IC0gbWluSGVpZ2h0O1xyXG4gICAgICAgIG9mZlNjcmVlbkN0eC5yZWN0KGksIG1pbkhlaWdodCwgMSwgaGVpZ2h0KTtcclxuICAgIH1cclxuICAgIG9mZlNjcmVlbkN0eC5jbG9zZVBhdGgoKTtcclxuICAgIG9mZlNjcmVlbkN0eC5maWxsKCk7XHJcbiAgICBcclxuICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICBjdHguZHJhd0ltYWdlKG9mZlNjcmVlbkN0eC5jYW52YXMsIDAsIDApO1xyXG4gICAgXHJcbiAgICAvLyBjdHgubW92ZVRvKDAsIHNjYWxlKTtcclxuICAgIC8vIGZvciAobGV0IGkgPSAwOyBpIDwgd2F2ZWZvcm0ubGVuZ3RoOyBpKyspIHtcclxuICAgIC8vICAgICBjdHgubGluZVRvKGksICh3YXZlZm9ybVtpXVswXSAqIHNjYWxlKSArIHNjYWxlKTtcclxuICAgIC8vIH1cclxuICAgIC8vIGN0eC5saW5lVG8od2F2ZWZvcm0ubGVuZ3RoIC0gMSwgc2NhbGUpO1xyXG5cclxuICAgIC8vIGN0eC5tb3ZlVG8oMCwgc2NhbGUpO1xyXG4gICAgLy8gZm9yIChsZXQgaSA9IDA7IGkgPCB3YXZlZm9ybS5sZW5ndGg7IGkrKykge1xyXG4gICAgLy8gICAgIGN0eC5saW5lVG8oaSwgKHdhdmVmb3JtW2ldWzFdICogc2NhbGUpICsgc2NhbGUpO1xyXG4gICAgLy8gfVxyXG4gICAgLy8gY3R4LmxpbmVUbyh3YXZlZm9ybS5sZW5ndGggLSAxLCBzY2FsZSk7XHJcblxyXG4gICAgLy8gY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgLy8gc3dpdGNoIChkcmF3U3R5bGUpIHsgXHJcbiAgICAvLyAgICAgY2FzZSAnc3Ryb2tlJzpcclxuICAgIC8vICAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgLy8gICAgICAgICBicmVhaztcclxuICAgIC8vICAgICBkZWZhdWx0OlxyXG4gICAgLy8gICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgLy8gfVxyXG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvc3RyYXRlZ2llcy9yZW5kZXIvZG91YmxlLWxvb3AuanNcbi8vIG1vZHVsZSBpZCA9IDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/*!********************************!*\
  !*** ./src/methods/flatten.js ***!
  \********************************/
/*! exports provided: flattenSegments */
/*! exports used: flattenSegments */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = flattenSegments;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__models_segment__ = __webpack_require__(/*! ../models/segment */ 2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__models_interval__ = __webpack_require__(/*! ../models/interval */ 0);\n\r\n\r\n\r\n/**\r\n *\r\n * @param {number} a\r\n * @param {number} b\r\n */\r\nconst cmp = (a, b) => {\r\n  if (a > b) return +1;\r\n  if (a < b) return -1;\r\n  return 0;\r\n};\r\n\r\nvar groupBy = function(xs, key) {\r\n  return xs.reduce(function(rv, x) {\r\n    (rv[x[key]] = rv[x[key]] || []).push(x);\r\n    return rv;\r\n  }, {});\r\n};\r\n\r\n/**\r\n * The algorithm first calculates real start and end times of each segment,\r\n * sorts them by priority, then start time.\r\n *\r\n * Finally it merges the segments by index so there are no overlapping\r\n * segments and those with highest index are on top.\r\n *\r\n * @export\r\n * @param {Segment[]} segments\r\n * @returns {Interval[]}\r\n */\r\nfunction flattenSegments(segments) {\r\n  let ind = 0;\r\n  let lastIndex = -1;\r\n\r\n  segments.sort((a, b) => cmp(a.index, b.index) || cmp(a.start, b.start)).forEach(el => {\r\n    if (el.index != lastIndex) {\r\n      el.index = ind;\r\n      lastIndex = ind;\r\n      ind++;\r\n    } else {\r\n      el.index = ind;\r\n    }\r\n  });\r\n\r\n  var intervals = segments\r\n    .map(s => {\r\n      return {\r\n        id: s.id,\r\n        start: s.start + s.offsetStart,\r\n        end: s.start + s.duration - s.offsetEnd,\r\n        index: s.index,\r\n        originalStart: s.start,\r\n        data: s.data\r\n      };\r\n    })\r\n    .sort((a, b) => {\r\n      return cmp(a.index, b.index) || cmp(a.start, b.start);\r\n    });\r\n\r\n  var grouped = groupBy(intervals, \"index\");\r\n  var indexes = Object.keys(grouped);\r\n\r\n  if (indexes.length === 1) {\r\n    return intervals;\r\n  }\r\n\r\n  var weak;\r\n  for (var index in Object.keys(grouped)) {\r\n    if (weak == null) {\r\n      weak = grouped[index];\r\n    } else {\r\n      weak = combine(grouped[index], weak);\r\n    }\r\n  }\r\n\r\n  var final = merge(weak);\r\n  return final;\r\n}\r\n\r\n/**\r\n *\r\n *\r\n * @param {[]} S\r\n * @param {[]} W\r\n */\r\nfunction combine(S, W) {\r\n  var s = 0;\r\n  var w = 0;\r\n  var common = [];\r\n\r\n  while (s < S.length || w < W.length) {\r\n    // Only low priority left so push it on the stack\r\n    if (s === S.length) {\r\n      common.push(Object.assign({}, W[w]));\r\n      w++;\r\n      // Only high priority left so push it on the stack\r\n    } else if (w === W.length) {\r\n      common.push(Object.assign(S[s]));\r\n      s++;\r\n      // if high priority starts first\r\n    } else if (S[s].start <= W[w].start) {\r\n      W[w].start = Math.max(W[w].start, S[s].end);\r\n      if (W[w].start >= W[w].end) {\r\n        w++;\r\n      }\r\n      common.push(Object.assign({}, S[s]));\r\n      s++;\r\n    } else if (S[s].start >= W[w].start) {\r\n      // end point of weak interval before the start of the strong\r\n      if (W[w].end <= S[s].start) {\r\n        common.push(Object.assign({}, W[w]));\r\n        w++;\r\n      } else if (S[s].start <= W[w].end && W[w].end <= S[s].end) {\r\n        W[w].end = S[s].start;\r\n        common.push(Object.assign({}, W[w]));\r\n        w++;\r\n      } else if (W[w].end >= S[s].end) {\r\n        common.push(\r\n          Object.assign({}, W[w], {\r\n            end: S[s].start\r\n          })\r\n        );\r\n        W[w].start = S[s].end;\r\n      }\r\n    }\r\n  }\r\n\r\n  return common;\r\n}\r\n\r\n/**\r\n * \r\n * \r\n * @param {Interval[]} intervals \r\n * @returns {Interval[]}\r\n */\r\nfunction merge(intervals) {\r\n  if (intervals == null || intervals.length <= 1) return intervals;\r\n\r\n  var result = [];\r\n  var prev = intervals[0];\r\n  for (var i = 1; i < intervals.length; i++) {\r\n    var curr = intervals[i];\r\n\r\n    if (prev.end >= curr.start && prev.index === curr.index) {\r\n      // merged case\r\n      var merged = Object.assign({}, prev, { end: Math.max(prev.end, curr.end)});\r\n      prev = merged;\r\n    } else {\r\n      result.push(prev);\r\n      prev = curr;\r\n    }\r\n  }\r\n\r\n  result.push(prev);\r\n  return result;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9tZXRob2RzL2ZsYXR0ZW4uanM/OGQyMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZWdtZW50IH0gZnJvbSBcIi4uL21vZGVscy9zZWdtZW50XCI7XHJcbmltcG9ydCB7IEludGVydmFsIH0gZnJvbSBcIi4uL21vZGVscy9pbnRlcnZhbFwiO1xyXG5cclxuLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBhXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBiXHJcbiAqL1xyXG5jb25zdCBjbXAgPSAoYSwgYikgPT4ge1xyXG4gIGlmIChhID4gYikgcmV0dXJuICsxO1xyXG4gIGlmIChhIDwgYikgcmV0dXJuIC0xO1xyXG4gIHJldHVybiAwO1xyXG59O1xyXG5cclxudmFyIGdyb3VwQnkgPSBmdW5jdGlvbih4cywga2V5KSB7XHJcbiAgcmV0dXJuIHhzLnJlZHVjZShmdW5jdGlvbihydiwgeCkge1xyXG4gICAgKHJ2W3hba2V5XV0gPSBydlt4W2tleV1dIHx8IFtdKS5wdXNoKHgpO1xyXG4gICAgcmV0dXJuIHJ2O1xyXG4gIH0sIHt9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBUaGUgYWxnb3JpdGhtIGZpcnN0IGNhbGN1bGF0ZXMgcmVhbCBzdGFydCBhbmQgZW5kIHRpbWVzIG9mIGVhY2ggc2VnbWVudCxcclxuICogc29ydHMgdGhlbSBieSBwcmlvcml0eSwgdGhlbiBzdGFydCB0aW1lLlxyXG4gKlxyXG4gKiBGaW5hbGx5IGl0IG1lcmdlcyB0aGUgc2VnbWVudHMgYnkgaW5kZXggc28gdGhlcmUgYXJlIG5vIG92ZXJsYXBwaW5nXHJcbiAqIHNlZ21lbnRzIGFuZCB0aG9zZSB3aXRoIGhpZ2hlc3QgaW5kZXggYXJlIG9uIHRvcC5cclxuICpcclxuICogQGV4cG9ydFxyXG4gKiBAcGFyYW0ge1NlZ21lbnRbXX0gc2VnbWVudHNcclxuICogQHJldHVybnMge0ludGVydmFsW119XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZmxhdHRlblNlZ21lbnRzKHNlZ21lbnRzKSB7XHJcbiAgbGV0IGluZCA9IDA7XHJcbiAgbGV0IGxhc3RJbmRleCA9IC0xO1xyXG5cclxuICBzZWdtZW50cy5zb3J0KChhLCBiKSA9PiBjbXAoYS5pbmRleCwgYi5pbmRleCkgfHwgY21wKGEuc3RhcnQsIGIuc3RhcnQpKS5mb3JFYWNoKGVsID0+IHtcclxuICAgIGlmIChlbC5pbmRleCAhPSBsYXN0SW5kZXgpIHtcclxuICAgICAgZWwuaW5kZXggPSBpbmQ7XHJcbiAgICAgIGxhc3RJbmRleCA9IGluZDtcclxuICAgICAgaW5kKys7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBlbC5pbmRleCA9IGluZDtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgdmFyIGludGVydmFscyA9IHNlZ21lbnRzXHJcbiAgICAubWFwKHMgPT4ge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGlkOiBzLmlkLFxyXG4gICAgICAgIHN0YXJ0OiBzLnN0YXJ0ICsgcy5vZmZzZXRTdGFydCxcclxuICAgICAgICBlbmQ6IHMuc3RhcnQgKyBzLmR1cmF0aW9uIC0gcy5vZmZzZXRFbmQsXHJcbiAgICAgICAgaW5kZXg6IHMuaW5kZXgsXHJcbiAgICAgICAgb3JpZ2luYWxTdGFydDogcy5zdGFydCxcclxuICAgICAgICBkYXRhOiBzLmRhdGFcclxuICAgICAgfTtcclxuICAgIH0pXHJcbiAgICAuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICByZXR1cm4gY21wKGEuaW5kZXgsIGIuaW5kZXgpIHx8IGNtcChhLnN0YXJ0LCBiLnN0YXJ0KTtcclxuICAgIH0pO1xyXG5cclxuICB2YXIgZ3JvdXBlZCA9IGdyb3VwQnkoaW50ZXJ2YWxzLCBcImluZGV4XCIpO1xyXG4gIHZhciBpbmRleGVzID0gT2JqZWN0LmtleXMoZ3JvdXBlZCk7XHJcblxyXG4gIGlmIChpbmRleGVzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgcmV0dXJuIGludGVydmFscztcclxuICB9XHJcblxyXG4gIHZhciB3ZWFrO1xyXG4gIGZvciAodmFyIGluZGV4IGluIE9iamVjdC5rZXlzKGdyb3VwZWQpKSB7XHJcbiAgICBpZiAod2VhayA9PSBudWxsKSB7XHJcbiAgICAgIHdlYWsgPSBncm91cGVkW2luZGV4XTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHdlYWsgPSBjb21iaW5lKGdyb3VwZWRbaW5kZXhdLCB3ZWFrKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZhciBmaW5hbCA9IG1lcmdlKHdlYWspO1xyXG4gIHJldHVybiBmaW5hbDtcclxufVxyXG5cclxuLyoqXHJcbiAqXHJcbiAqXHJcbiAqIEBwYXJhbSB7W119IFNcclxuICogQHBhcmFtIHtbXX0gV1xyXG4gKi9cclxuZnVuY3Rpb24gY29tYmluZShTLCBXKSB7XHJcbiAgdmFyIHMgPSAwO1xyXG4gIHZhciB3ID0gMDtcclxuICB2YXIgY29tbW9uID0gW107XHJcblxyXG4gIHdoaWxlIChzIDwgUy5sZW5ndGggfHwgdyA8IFcubGVuZ3RoKSB7XHJcbiAgICAvLyBPbmx5IGxvdyBwcmlvcml0eSBsZWZ0IHNvIHB1c2ggaXQgb24gdGhlIHN0YWNrXHJcbiAgICBpZiAocyA9PT0gUy5sZW5ndGgpIHtcclxuICAgICAgY29tbW9uLnB1c2goT2JqZWN0LmFzc2lnbih7fSwgV1t3XSkpO1xyXG4gICAgICB3Kys7XHJcbiAgICAgIC8vIE9ubHkgaGlnaCBwcmlvcml0eSBsZWZ0IHNvIHB1c2ggaXQgb24gdGhlIHN0YWNrXHJcbiAgICB9IGVsc2UgaWYgKHcgPT09IFcubGVuZ3RoKSB7XHJcbiAgICAgIGNvbW1vbi5wdXNoKE9iamVjdC5hc3NpZ24oU1tzXSkpO1xyXG4gICAgICBzKys7XHJcbiAgICAgIC8vIGlmIGhpZ2ggcHJpb3JpdHkgc3RhcnRzIGZpcnN0XHJcbiAgICB9IGVsc2UgaWYgKFNbc10uc3RhcnQgPD0gV1t3XS5zdGFydCkge1xyXG4gICAgICBXW3ddLnN0YXJ0ID0gTWF0aC5tYXgoV1t3XS5zdGFydCwgU1tzXS5lbmQpO1xyXG4gICAgICBpZiAoV1t3XS5zdGFydCA+PSBXW3ddLmVuZCkge1xyXG4gICAgICAgIHcrKztcclxuICAgICAgfVxyXG4gICAgICBjb21tb24ucHVzaChPYmplY3QuYXNzaWduKHt9LCBTW3NdKSk7XHJcbiAgICAgIHMrKztcclxuICAgIH0gZWxzZSBpZiAoU1tzXS5zdGFydCA+PSBXW3ddLnN0YXJ0KSB7XHJcbiAgICAgIC8vIGVuZCBwb2ludCBvZiB3ZWFrIGludGVydmFsIGJlZm9yZSB0aGUgc3RhcnQgb2YgdGhlIHN0cm9uZ1xyXG4gICAgICBpZiAoV1t3XS5lbmQgPD0gU1tzXS5zdGFydCkge1xyXG4gICAgICAgIGNvbW1vbi5wdXNoKE9iamVjdC5hc3NpZ24oe30sIFdbd10pKTtcclxuICAgICAgICB3Kys7XHJcbiAgICAgIH0gZWxzZSBpZiAoU1tzXS5zdGFydCA8PSBXW3ddLmVuZCAmJiBXW3ddLmVuZCA8PSBTW3NdLmVuZCkge1xyXG4gICAgICAgIFdbd10uZW5kID0gU1tzXS5zdGFydDtcclxuICAgICAgICBjb21tb24ucHVzaChPYmplY3QuYXNzaWduKHt9LCBXW3ddKSk7XHJcbiAgICAgICAgdysrO1xyXG4gICAgICB9IGVsc2UgaWYgKFdbd10uZW5kID49IFNbc10uZW5kKSB7XHJcbiAgICAgICAgY29tbW9uLnB1c2goXHJcbiAgICAgICAgICBPYmplY3QuYXNzaWduKHt9LCBXW3ddLCB7XHJcbiAgICAgICAgICAgIGVuZDogU1tzXS5zdGFydFxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIFdbd10uc3RhcnQgPSBTW3NdLmVuZDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGNvbW1vbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFxyXG4gKiBcclxuICogQHBhcmFtIHtJbnRlcnZhbFtdfSBpbnRlcnZhbHMgXHJcbiAqIEByZXR1cm5zIHtJbnRlcnZhbFtdfVxyXG4gKi9cclxuZnVuY3Rpb24gbWVyZ2UoaW50ZXJ2YWxzKSB7XHJcbiAgaWYgKGludGVydmFscyA9PSBudWxsIHx8IGludGVydmFscy5sZW5ndGggPD0gMSkgcmV0dXJuIGludGVydmFscztcclxuXHJcbiAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gIHZhciBwcmV2ID0gaW50ZXJ2YWxzWzBdO1xyXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgaW50ZXJ2YWxzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICB2YXIgY3VyciA9IGludGVydmFsc1tpXTtcclxuXHJcbiAgICBpZiAocHJldi5lbmQgPj0gY3Vyci5zdGFydCAmJiBwcmV2LmluZGV4ID09PSBjdXJyLmluZGV4KSB7XHJcbiAgICAgIC8vIG1lcmdlZCBjYXNlXHJcbiAgICAgIHZhciBtZXJnZWQgPSBPYmplY3QuYXNzaWduKHt9LCBwcmV2LCB7IGVuZDogTWF0aC5tYXgocHJldi5lbmQsIGN1cnIuZW5kKX0pO1xyXG4gICAgICBwcmV2ID0gbWVyZ2VkO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmVzdWx0LnB1c2gocHJldik7XHJcbiAgICAgIHByZXYgPSBjdXJyO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVzdWx0LnB1c2gocHJldik7XHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9tZXRob2RzL2ZsYXR0ZW4uanNcbi8vIG1vZHVsZSBpZCA9IDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/*!****************************************************!*\
  !*** ./node_modules/hamsters.js/build/hamsters.js ***!
  \****************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process, global) {/*\n* Title: Hamsters.js\n* Description: Javascript library to add multi-threading support to javascript by exploiting concurrent web workers\n* Author: Austin K. Smith\n* Contact: austin@asmithdev.com\n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com\n* License: Artistic License 2.0\n*/\n\n\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar hamsters = {\n  version: '4.2.1',\n  debug: false,\n  cache: false,\n  persistence: true,\n  maxThreads: 4,\n  atomics: false,\n  habitat: {\n    legacy: false,\n    node: false,\n    shell: false,\n    worker: false,\n    browser: false,\n    ie10: false,\n    atomics: false,\n    transferrable: true\n  },\n  tools: {},\n  pool: {\n    errors: [],\n    tasks: [],\n    threads: [],\n    running: [],\n    pending: []\n  },\n  uri: null\n};\n\nhamsters.init = function (startOptions) {\n  setupHamstersEnvironment(startOptions, function () {\n    if (hamsters.habitat.legacy) {\n      hamsters.pool.newWheel = legacyHamsterWheel;\n    } else {\n      hamsters.pool.newWheel = hamsterWheel;\n      spawnHamsters();\n    }\n    chewGarbage(startOptions);\n  });\n  hamsters.run = runHamster;\n  hamsters.tools.randomArray = randomArray;\n  hamsters.tools.loop = loop;\n  hamsters.tools.parseJson = parseJsonOnThread;\n  hamsters.tools.stringifyJson = stringifyJsonOnThread;\n};\n\nfunction isIE(version) {\n  return new RegExp('msie' + (!isNaN(version) ? '\\\\s' + version : ''), 'i').test(navigator.userAgent);\n}\n\nfunction setupBrowserSupport() {\n  if (!Worker || ['Kindle/3.0', 'Mobile/8F190', 'IEMobile'].indexOf(navigator.userAgent) !== -1) {\n    hamsters.habitat.legacy = true;\n  }\n  if (navigator.userAgent.toLowerCase().indexOf('firefox') !== -1) {\n    hamsters.maxThreads = hamsters.maxThreads > 20 ? 20 : hamsters.maxThreads;\n  }\n  if (isIE(10)) {\n    try {\n      var testThread = new Worker('src/common/wheel.min.js');\n      testThread.terminate();\n      hamsters.habitat.ie10 = true;\n    } catch (e) {\n      hamsters.habitat.legacy = true;\n    }\n  }\n}\n\nfunction setupWorkerSupport() {\n  try {\n    var workerBlob = generateWorkerBlob();\n    var SharedHamster = new SharedWorker(workerBlob, 'SharedHamsterWheel');\n    hamsters.uri = workerBlob;\n  } catch (e) {\n    hamsters.habitat.legacy = true;\n  }\n}\n\nfunction processStartOptions(startOptions) {\n  for (var key in startOptions) {\n    if (startOptions.hasOwnProperty(key)) {\n      hamsters[key] = startOptions[key];\n    }\n  }\n}\n\nfunction setupHamstersEnvironment(startOptions, onSuccess) {\n  hamsters.habitat.browser = (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === \"object\";\n  hamsters.habitat.worker = typeof importScripts === \"function\";\n  hamsters.habitat.node = (typeof process === 'undefined' ? 'undefined' : _typeof(process)) === \"object\" && \"function\" === \"function\" && !hamsters.habitat.browser && !hamsters.habitat.worker && !hamsters.habitat.reactNative;\n  hamsters.habitat.reactNative = !hamsters.habitat.node && (typeof global === 'undefined' ? 'undefined' : _typeof(global)) === 'object';\n  hamsters.habitat.shell = !hamsters.habitat.browser && !hamsters.habitat.node && !hamsters.habitat.worker && !hamsters.habitat.reactNative;\n  if (typeof navigator !== 'undefined' && typeof navigator.hardwareConcurrency !== 'undefined') {\n    hamsters.maxThreads = navigator.hardwareConcurrency;\n  }\n  if (typeof startOptions !== 'undefined') {\n    processStartOptions(startOptions);\n  }\n  if (hamsters.habitat.browser && !hamsters.habitat.reactNative) {\n    setupBrowserSupport();\n  }\n  if (hamsters.habitat.worker) {\n    setupWorkerSupport();\n  }\n  if (hamsters.habitat.node || hamsters.habitat.reactNative) {\n    if (typeof hamsters.Worker !== 'undefined') {\n      global.Worker = hamsters.Worker;\n    }\n  }\n  if (hamsters.habitat.shell || typeof Worker === 'undefined') {\n    hamsters.habitat.legacy = true;\n  }\n  if (typeof Uint8Array === 'undefined') {\n    hamsters.habitat.transferrable = false;\n  }\n  if (typeof SharedArrayBuffer !== 'undefined') {\n    hamsters.habitat.atomics = true;\n  }\n  onSuccess();\n}\n\nfunction generateWorkerBlob() {\n  return URL.createObjectURL(createBlob('(' + String(giveHamsterWork()) + ')();'));\n}\n\nfunction spawnHamsters() {\n  if (hamsters.habitat.browser) {\n    hamsters.uri = generateWorkerBlob();\n  }\n  if (hamsters.persistence) {\n    var i = hamsters.maxThreads;\n    for (i; i > 0; i--) {\n      hamsters.pool.threads.push(spawnHamster());\n    }\n  }\n}\n\nfunction spawnHamster() {\n  if (hamsters.habitat.ie10) {\n    return new Worker('src/common/wheel.min.js');\n  } else if (hamsters.habitat.worker) {\n    return new SharedWorker(hamsters.uri, 'SharedHamsterWheel');\n  } else if (hamsters.habitat.node) {\n    return new Worker(giveHamsterWork());\n  } else {\n    return new Worker(hamsters.uri);\n  }\n}\n\nfunction giveHamsterWork() {\n  if (hamsters.habitat.worker) {\n    return workerWorker;\n  }\n  return worker;\n}\n\nfunction createBlob(textContent) {\n  if (!Blob) {\n    var BlobMaker = BlobBuilder || WebKitBlobBuilder || MozBlobBuilder || MSBlobBuilder;\n    var blob = new BlobMaker();\n    blob.append([textContent], {\n      type: 'application/javascript'\n    });\n    return blob.getBlob();\n  }\n  return new Blob([textContent], {\n    type: 'application/javascript'\n  });\n}\n\nfunction workerWorker() {\n  addEventListener(\"connect\", function (e) {\n    var port = e.ports[0];\n    port.start();\n    port.addEventListener(\"message\", function (e) {\n      self.params = e.data;\n      self.rtn = {\n        data: [],\n        dataType: params.dataType\n      };\n      var fn = eval(\"(\" + params.fn + \")\");\n      if (fn) {\n        fn();\n      }\n      port.postMessage({\n        results: rtn\n      });\n    }, false);\n  }, false);\n}\n\nfunction worker() {\n  function processDataType(dataType, buffer) {\n    var types = {\n      'uint32': Uint32Array,\n      'uint16': Uint16Array,\n      'uint8': Uint8Array,\n      'uint8clamped': Uint8ClampedArray,\n      'int32': Int32Array,\n      'int16': Int16Array,\n      'int8': Int8Array,\n      'float32': Float32Array,\n      'float64': Float64Array\n    };\n    if (!types[dataType]) {\n      return buffer;\n    }\n    return new types[dataType](buffer);\n  }\n\n  onmessage = function onmessage(e) {\n    self.params = e.data;\n    self.rtn = {\n      data: [],\n      dataType: params.dataType\n    };\n    var fn = new Function(params.fn);\n    if (fn) {\n      fn();\n    }\n    if (params.dataType) {\n      rtn.data = processDataType(params.dataType, rtn.data);\n      postMessage({\n        results: rtn\n      }, [rtn.data.buffer]);\n    } else {\n      postMessage({\n        results: rtn\n      });\n    }\n    //Garbage collection\n    self.params = undefined;\n    self.rtn = undefined;\n  };\n}\n\nfunction legacyHamsterWheel(inputArray, hamsterFood, aggregate, onSuccess, task, thread_id, hamster, memoize) {\n  trackThread(task, hamsters.pool.running, thread_id);\n  if (memoize || hamsters.debug) {\n    trackInput(inputArray, thread_id, task, hamsterFood);\n  }\n  legacyProcessor(hamsterFood, inputArray, function (output) {\n    clean(task, thread_id);\n    task.output[thread_id] = output.data;\n    if (task.workers.length === 0 && task.count === task.threads) {\n      onSuccess(getOutput(task.output, aggregate, output.dataType));\n      hamsters.pool.tasks[task.id] = null;\n      if (hamsters.cache && memoize !== false) {\n        memoize(task.fn, task.input, output.data, output.dataType);\n      }\n    }\n  });\n  task.count += 1; //Thread finished\n}\n\nfunction hamsterWheel(inputArray, hamsterFood, aggregate, onSuccess, task, thread_id, hamster, memoize) {\n  if (hamsters.maxThreads === hamsters.pool.running.length) {\n    poolThread(inputArray, hamsterFood, thread_id, onSuccess, task, aggregate, memoize);\n    return;\n  }\n  if (memoize || hamsters.debug) {\n    trackInput(inputArray, thread_id, task, hamsterFood);\n  }\n  if (!hamster) {\n    if (hamsters.persistence) {\n      hamster = hamsters.pool.threads[hamsters.pool.running.length];\n    } else {\n      hamster = spawnHamster();\n    }\n  }\n  trainHamster(thread_id, aggregate, onSuccess, task, hamster, memoize);\n  trackThread(task, hamsters.pool.running, thread_id);\n  hamsterFood.array = inputArray;\n  feedHamster(hamster, hamsterFood);\n  task.count += 1; //Increment count, thread is running\n  if (hamsters.debug === 'verbose') {\n    console.info('Spawning Hamster #' + thread_id + ' @ ' + new Date().getTime());\n  }\n}\n\nfunction chewGarbage(startOptions) {\n  delete hamsters.init;\n  startOptions = null;\n}\n\nfunction splitArray(array, n) {\n  var i = 0;\n  var threadArrays = [];\n  var size = Math.ceil(array.length / n);\n  if (array.slice) {\n    while (i < array.length) {\n      threadArrays.push(array.slice(i, i += size));\n    }\n  } else {\n    while (i < array.length) {\n      threadArrays.push(array.subarray(i, i += size));\n    }\n  }\n  return threadArrays;\n}\n\nfunction loop(input, onSuccess) {\n  var params = {\n    run: prepareFunction(input.operator),\n    init: input.startIndex || 0,\n    limit: input.limit,\n    array: input.array,\n    incrementBy: input.incrementBy || 1,\n    dataType: input.dataType || null,\n    worker: hamsters.habitat.worker\n  };\n  runHamster(params, function () {\n    var operator = params.run;\n    if (typeof operator === \"string\") {\n      if (params.worker) {\n        operator = eval(\"(\" + operator + \")\");\n      } else {\n        operator = new Function(operator);\n      }\n    }\n    if (!params.limit) {\n      params.limit = params.array.length;\n    }\n    var i = params.init;\n    for (i; i < params.limit; i += params.incrementBy) {\n      rtn.data[i] = operator(params.array[i]);\n    }\n  }, function (rtn) {\n    onSuccess(rtn);\n  }, input.threads, 1, input.dataType);\n}\n\nfunction prepareFunction(functionBody) {\n  if (!hamsters.habitat.legacy) {\n    functionBody = String(functionBody);\n    if (!hamsters.habitat.worker) {\n      var startingIndex = functionBody.indexOf(\"{\") + 1;\n      var endingIndex = functionBody.length - 1;\n      return functionBody.substring(startingIndex, endingIndex);\n    }\n  }\n  return functionBody;\n}\n\nfunction parseJsonOnThread(string, onSuccess) {\n  runHamster({ input: string }, function () {\n    rtn.data = JSON.parse(params.input);\n  }, function (output) {\n    onSuccess(output[0]);\n  }, 1);\n}\n\nfunction stringifyJsonOnThread(json, onSuccess) {\n  runHamster({ input: json }, function () {\n    rtn.data = JSON.stringify(params.input);\n  }, function (output) {\n    onSuccess(output[0]);\n  }, 1);\n}\n\nfunction randomArray(count, onSuccess) {\n  var params = {\n    count: count\n  };\n  runHamster(params, function () {\n    while (params.count > 0) {\n      rtn.data[rtn.data.length] = Math.round(Math.random() * (100 - 1) + 1);\n      params.count -= 1;\n    }\n  }, function (result) {\n    onSuccess(result);\n  });\n}\n\nfunction aggregateThreadOutputs(input, dataType) {\n  if (!dataType || !hamsters.habitat.transferrable) {\n    return input.reduce(function (a, b) {\n      return a.concat(b);\n    });\n  }\n  var i = 0;\n  var len = input.length;\n  var bufferLength = 0;\n  for (i; i < len; i += 1) {\n    bufferLength += input[i].length;\n  }\n  var output = processDataType(dataType, bufferLength);\n  var offset = 0;\n  for (i = 0; i < len; i += 1) {\n    output.set(input[i], offset);\n    offset += input[i].length;\n  }\n  return output;\n}\n\nfunction checkCache(fn, input, dataType) {\n  var cachedResult = hamsters.cache[fn];\n  if (cachedResult) {\n    if (cachedResult[0] === input && cachedResult[2] === dataType) {\n      return cachedResult;\n    }\n  }\n}\n\nfunction memoize(fn, inputArray, output, dataType) {\n  hamsters.cache[fn] = [inputArray, output, dataType];\n}\n\nfunction sort(arr, order) {\n  switch (order) {\n    case 'desc':\n    case 'asc':\n      return Array.prototype.sort.call(arr, function (a, b) {\n        return order === 'asc' ? a - b : b - a;\n      });\n    case 'ascAlpha':\n      return arr.sort();\n    case 'descAlpha':\n      return arr.reverse();\n    default:\n      return arr;\n  }\n}\n\nfunction runHamster(params, fn, onSuccess, workers, aggregate, dataType, memoize, order) {\n  if (!params || !fn) {\n    return 'Error processing for loop, missing params or function';\n  }\n  workers = hamsters.habitat.legacy ? 1 : workers || 1;\n  var task = newTask(hamsters.pool.tasks.length, workers, order, dataType, fn, onSuccess);\n  if (dataType) {\n    dataType = dataType.toLowerCase();\n  }\n  if (hamsters.cache && memoize) {\n    var result = checkCache(fn, task.input, dataType);\n    if (result && onSuccess) {\n      setTimeout(function () {\n        hamsters.pool.tasks[taskid] = null; //Clean up our task, not needed any longer\n        onSuccess(result);\n      }, 4);\n      return;\n    }\n  }\n  work(task, params, fn, onSuccess, aggregate, dataType, memoize, order);\n}\n\nfunction work(task, params, fn, onSuccess, aggregate, dataType, memoize, order) {\n  var workArray = params.array;\n  if (workArray && task.threads !== 1) {\n    workArray = splitArray(workArray, task.threads); //Divide our array into equal array sizes\n  }\n  var food = {};\n  var key = void 0;\n  for (key in params) {\n    if (params.hasOwnProperty(key) && key !== 'array') {\n      food[key] = params[key];\n    }\n  }\n  food.fn = prepareFunction(fn);\n  food.dataType = dataType;\n  var i = 0;\n  while (i < task.threads) {\n    if (workArray && task.threads !== 1) {\n      hamsters.pool.newWheel(workArray[i], food, aggregate, onSuccess, task, task.count, null, memoize);\n    } else {\n      hamsters.pool.newWheel(workArray, food, aggregate, onSuccess, task, task.count, null, memoize);\n    }\n    i += 1;\n  }\n}\n\nfunction newTask(taskid, workers, order, dataType, fn, cb) {\n  hamsters.pool.tasks.push({\n    id: taskid,\n    workers: [],\n    count: 0,\n    threads: workers,\n    input: [],\n    dataType: dataType || null,\n    fn: fn,\n    output: [],\n    order: order || null,\n    onSuccess: cb\n  });\n  return hamsters.pool.tasks[taskid];\n}\n\nfunction assignOutput(task, inputArray) {\n  if (!task || !inputArray || !hamsters.habitat.atomics) {\n    return;\n  }\n  task.output = new SharedArrayBuffer(inputArray.length);\n}\n\nfunction trackInput(inputArray, thread_id, task, hamsterFood) {\n  task.input.push({\n    input: inputArray,\n    workerid: thread_id,\n    taskid: task.id,\n    params: hamsterFood,\n    start: new Date().getTime()\n  });\n}\n\nfunction trackThread(task, running, id) {\n  task.workers.push(id); //Keep track of threads scoped to current task\n  running.push(id); //Keep track of all currently running threads\n}\n\nfunction poolThread(inputArray, hamsterFood, thread_id, cb, task, agg, memoize) {\n  hamsters.pool.pending.push({\n    memoize: memoize,\n    input: inputArray,\n    params: hamsterFood,\n    workerid: thread_id,\n    onSuccess: cb,\n    task: task,\n    aggregate: agg\n  });\n}\n\nfunction legacyProcessor(params, inputArray, onSuccess) {\n  setTimeout(function () {\n    var rtn = {\n      success: true,\n      data: []\n    };\n    var params = params;\n    params.array = inputArray;\n    params.fn();\n    if (params.dataType && params.dataType != \"na\") {\n      rtn.data = processDataType(params.dataType, rtn.data);\n      rtn.dataType = params.dataType;\n    }\n    onSuccess(rtn);\n  }, 4); //4ms delay (HTML5 spec minimum), simulate threading\n}\n\nfunction getOutput(output, aggregate, dataType) {\n  if (aggregate && output.length <= 20) {\n    return aggregateThreadOutputs(output, dataType);\n  }\n  return output;\n}\n\nfunction processQueue(hamster, item) {\n  if (!item) {\n    return;\n  }\n  hamsters.pool.newWheel(item.input, item.params, item.aggregate, item.onSuccess, item.task, item.workerid, hamster, item.memoize); //Assign most recently finished thread to queue item\n}\n\nfunction clean(task, id) {\n  hamsters.pool.running.splice(hamsters.pool.running.indexOf(id), 1); //Remove thread from running pool\n  task.workers.splice(task.workers.indexOf(id), 1); //Remove thread from task running pool\n}\n\nfunction trainHamster(id, aggregate, onSuccess, task, hamster, memoize) {\n  function onmessage(e, results) {\n    clean(task, id);\n    results = e.data.results;\n    task.output[id] = results.data;\n    if (hamsters.debug === 'verbose') {\n      console.info('Hamster #' + id + ' finished ' + '@ ' + e.timeStamp);\n    }\n    if (task.workers.length === 0 && task.count === task.threads) {\n      if (task.order) {\n        onSuccess(sort(getOutput(task.output, aggregate, results.dataType), task.order));\n      } else {\n        onSuccess(getOutput(task.output, aggregate, results.dataType));\n      }\n      if (hamsters.debug) {\n        console.info('Execution Complete! Elapsed: ' + (e.timeStamp - task.input[0].start) / 1000 + 's');\n      }\n      hamsters.pool.tasks[task.id] = null; //Clean up our task, not needed any longer\n      if (hamsters.cache && memoize) {\n        if (task.output[id] && !task.output[id].slice) {\n          memoize(task.fn, task.input[0].input, normalizeArray(output), results.dataType);\n        } else {\n          memoize(task.fn, task.input[0].input, getOutput(task.output, aggregate, results.dataType), results.dataType);\n        }\n      }\n    }\n    if (hamsters.pool.pending.length !== 0) {\n      processQueue(hamster, hamsters.pool.pending.shift());\n    } else if (!hamsters.persistence && !hamsters.habitat.worker) {\n      hamster.terminate(); //Kill the thread only if no items waiting to run (20-22% performance improvement observed during testing, repurposing threads vs recreating them)\n    }\n  };\n\n  function onerror(e) {\n    if (!hamsters.habitat.worker) {\n      hamster.terminate(); //Kill the thread\n    }\n    hamsters.pool.errors.push({\n      msg: 'Error Hamster #' + id + ': Line ' + e.lineno + ' in ' + e.filename + ': ' + e.message\n    });\n    console.error('Error Hamster #' + id + ': Line ' + e.lineno + ' in ' + e.filename + ': ' + e.message);\n  };\n\n  if (hamsters.habitat.worker) {\n    hamster.port.onmessage = onmessage;\n    hamster.port.onerror = onerror;\n  } else {\n    hamster.onmessage = onmessage;\n    hamster.onerror = onerror;\n  }\n}\n\nfunction processData(dataType, buffer) {\n  var types = {\n    'uint32': Uint32Array,\n    'uint16': Uint16Array,\n    'uint8': Uint8Array,\n    'uint8clamped': Uint8ClampedArray,\n    'int32': Int32Array,\n    'int16': Int16Array,\n    'int8': Int8Array,\n    'float32': Float32Array,\n    'float64': Float64Array\n  };\n  if (!types[dataType]) {\n    return dataType;\n  }\n  return new types[dataType](buffer);\n}\n\nfunction processDataType(dataType, buffer) {\n  if (hamsters.habitat.transferrable) {\n    return processData(dataType, buffer);\n  }\n  return buffer;\n}\n\nfunction feedHamster(hamster, food) {\n  if (hamsters.habitat.worker) {\n    return hamster.port.postMessage(food);\n  }\n  if (hamsters.habitat.ie10) {\n    return hamster.postMessage(food);\n  }\n  var buffers = [],\n      key = void 0;\n  for (key in food) {\n    if (food.hasOwnProperty(key) && food[key] && food[key].buffer) {\n      buffers.push(food[key].buffer);\n    }\n  }\n  return hamster.postMessage(food, buffers);\n}\n\nif (true) {\n  module.exports = hamsters;\n}\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../process/browser.js */ 11), __webpack_require__(/*! ./../../webpack/buildin/global.js */ 12)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\n} catch(e) {\n\t// This works if the window reference is available\n\tif(typeof window === \"object\")\n\t\tg = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsZXZhbCkoXCJ0aGlzXCIpO1xufSBjYXRjaChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpXG5cdFx0ZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzXG4vLyBtb2R1bGUgaWQgPSAxMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/*!*********************************!*\
  !*** ./src/interaction/drag.js ***!
  \*********************************/
/*! exports provided: setupDrag */
/*! exports used: setupDrag */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_waveshaper__ = __webpack_require__(/*! ../core/waveshaper */ 1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_manager__ = __webpack_require__(/*! ../core/manager */ 4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_hammerjs__ = __webpack_require__(/*! hammerjs */ 14);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_hammerjs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_hammerjs__);\n\r\n\r\n\r\n\r\n/**\r\n * Adds drag functionality to waveshaper\r\n * \r\n * @param {WaveShaper} wave \r\n * @param {WaveShapeManager} manager\r\n */\r\nconst setupDrag = function(wave, manager) {\r\n    const canvas = wave.canvas;\r\n    const hammer = new __WEBPACK_IMPORTED_MODULE_2_hammerjs__(canvas);\r\n\r\n    canvas.addEventListener('mouseenter', (e) => {\r\n        if(manager.activeSegment != null && manager.dragWave != null && manager.dragWave.id !== wave.id) {\r\n            const index = manager.dragWave.segments.indexOf(manager.activeSegment);\r\n            manager.dragWave.segments.splice(index, 1);\r\n\r\n            manager.dragWave.flatten();\r\n            manager.draw([manager.dragWave.id], true);\r\n\r\n            wave.segments.push(manager.activeSegment);\r\n            manager.activeSegment.index = 1000;\r\n\r\n            wave.flatten();\r\n            manager.draw([wave.id], true);\r\n\r\n            manager.dragWave = wave;\r\n        } \r\n    });\r\n\r\n    hammer.on('panstart', (ev) => { \r\n        const bb = ev.target.getBoundingClientRect();\r\n        const time = (manager.scrollPosition + (ev.center.x - bb.left)) * manager.samplesPerPixel / manager.samplerate;\r\n        const interval = wave.flattened.find(i => i.start <= time && i.end >= time);\r\n\r\n        manager.activeSegment = wave.segments.find(s => s.id === interval.id);\r\n        manager.activeSegment.index = 1000;\r\n        manager.activeSegmentStart = manager.activeSegment.start;\r\n        manager.dragWave = wave;\r\n    });\r\n\r\n    hammer.on('pan', (ev) =>  {\r\n        if(manager.activeSegment == null)\r\n            return;\r\n\r\n        const change = (ev.deltaX * manager.samplesPerPixel) / manager.samplerate;\r\n        manager.activeSegment.start = manager.activeSegmentStart + change;\r\n\r\n        manager.dragWave.flatten();\r\n        manager.draw([manager.dragWave.id], true);\r\n    });\r\n\r\n    hammer.on('panend', (ev) => {\r\n        manager.activeSegment = null;\r\n        manager.activeSegmentStart = null;\r\n        manager.dragWave = null;\r\n    });\r\n}\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = setupDrag;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW50ZXJhY3Rpb24vZHJhZy5qcz8wNDNmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFdhdmVTaGFwZXIgfSBmcm9tICcuLi9jb3JlL3dhdmVzaGFwZXInO1xyXG5pbXBvcnQgeyBXYXZlU2hhcGVNYW5hZ2VyIH0gZnJvbSAnLi4vY29yZS9tYW5hZ2VyJztcclxuaW1wb3J0ICogYXMgSGFtbWVyIGZyb20gJ2hhbW1lcmpzJztcclxuXHJcbi8qKlxyXG4gKiBBZGRzIGRyYWcgZnVuY3Rpb25hbGl0eSB0byB3YXZlc2hhcGVyXHJcbiAqIFxyXG4gKiBAcGFyYW0ge1dhdmVTaGFwZXJ9IHdhdmUgXHJcbiAqIEBwYXJhbSB7V2F2ZVNoYXBlTWFuYWdlcn0gbWFuYWdlclxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHNldHVwRHJhZyA9IGZ1bmN0aW9uKHdhdmUsIG1hbmFnZXIpIHtcclxuICAgIGNvbnN0IGNhbnZhcyA9IHdhdmUuY2FudmFzO1xyXG4gICAgY29uc3QgaGFtbWVyID0gbmV3IEhhbW1lcihjYW52YXMpO1xyXG5cclxuICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgKGUpID0+IHtcclxuICAgICAgICBpZihtYW5hZ2VyLmFjdGl2ZVNlZ21lbnQgIT0gbnVsbCAmJiBtYW5hZ2VyLmRyYWdXYXZlICE9IG51bGwgJiYgbWFuYWdlci5kcmFnV2F2ZS5pZCAhPT0gd2F2ZS5pZCkge1xyXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IG1hbmFnZXIuZHJhZ1dhdmUuc2VnbWVudHMuaW5kZXhPZihtYW5hZ2VyLmFjdGl2ZVNlZ21lbnQpO1xyXG4gICAgICAgICAgICBtYW5hZ2VyLmRyYWdXYXZlLnNlZ21lbnRzLnNwbGljZShpbmRleCwgMSk7XHJcblxyXG4gICAgICAgICAgICBtYW5hZ2VyLmRyYWdXYXZlLmZsYXR0ZW4oKTtcclxuICAgICAgICAgICAgbWFuYWdlci5kcmF3KFttYW5hZ2VyLmRyYWdXYXZlLmlkXSwgdHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICB3YXZlLnNlZ21lbnRzLnB1c2gobWFuYWdlci5hY3RpdmVTZWdtZW50KTtcclxuICAgICAgICAgICAgbWFuYWdlci5hY3RpdmVTZWdtZW50LmluZGV4ID0gMTAwMDtcclxuXHJcbiAgICAgICAgICAgIHdhdmUuZmxhdHRlbigpO1xyXG4gICAgICAgICAgICBtYW5hZ2VyLmRyYXcoW3dhdmUuaWRdLCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIG1hbmFnZXIuZHJhZ1dhdmUgPSB3YXZlO1xyXG4gICAgICAgIH0gXHJcbiAgICB9KTtcclxuXHJcbiAgICBoYW1tZXIub24oJ3BhbnN0YXJ0JywgKGV2KSA9PiB7IFxyXG4gICAgICAgIGNvbnN0IGJiID0gZXYudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIGNvbnN0IHRpbWUgPSAobWFuYWdlci5zY3JvbGxQb3NpdGlvbiArIChldi5jZW50ZXIueCAtIGJiLmxlZnQpKSAqIG1hbmFnZXIuc2FtcGxlc1BlclBpeGVsIC8gbWFuYWdlci5zYW1wbGVyYXRlO1xyXG4gICAgICAgIGNvbnN0IGludGVydmFsID0gd2F2ZS5mbGF0dGVuZWQuZmluZChpID0+IGkuc3RhcnQgPD0gdGltZSAmJiBpLmVuZCA+PSB0aW1lKTtcclxuXHJcbiAgICAgICAgbWFuYWdlci5hY3RpdmVTZWdtZW50ID0gd2F2ZS5zZWdtZW50cy5maW5kKHMgPT4gcy5pZCA9PT0gaW50ZXJ2YWwuaWQpO1xyXG4gICAgICAgIG1hbmFnZXIuYWN0aXZlU2VnbWVudC5pbmRleCA9IDEwMDA7XHJcbiAgICAgICAgbWFuYWdlci5hY3RpdmVTZWdtZW50U3RhcnQgPSBtYW5hZ2VyLmFjdGl2ZVNlZ21lbnQuc3RhcnQ7XHJcbiAgICAgICAgbWFuYWdlci5kcmFnV2F2ZSA9IHdhdmU7XHJcbiAgICB9KTtcclxuXHJcbiAgICBoYW1tZXIub24oJ3BhbicsIChldikgPT4gIHtcclxuICAgICAgICBpZihtYW5hZ2VyLmFjdGl2ZVNlZ21lbnQgPT0gbnVsbClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICBjb25zdCBjaGFuZ2UgPSAoZXYuZGVsdGFYICogbWFuYWdlci5zYW1wbGVzUGVyUGl4ZWwpIC8gbWFuYWdlci5zYW1wbGVyYXRlO1xyXG4gICAgICAgIG1hbmFnZXIuYWN0aXZlU2VnbWVudC5zdGFydCA9IG1hbmFnZXIuYWN0aXZlU2VnbWVudFN0YXJ0ICsgY2hhbmdlO1xyXG5cclxuICAgICAgICBtYW5hZ2VyLmRyYWdXYXZlLmZsYXR0ZW4oKTtcclxuICAgICAgICBtYW5hZ2VyLmRyYXcoW21hbmFnZXIuZHJhZ1dhdmUuaWRdLCB0cnVlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGhhbW1lci5vbigncGFuZW5kJywgKGV2KSA9PiB7XHJcbiAgICAgICAgbWFuYWdlci5hY3RpdmVTZWdtZW50ID0gbnVsbDtcclxuICAgICAgICBtYW5hZ2VyLmFjdGl2ZVNlZ21lbnRTdGFydCA9IG51bGw7XHJcbiAgICAgICAgbWFuYWdlci5kcmFnV2F2ZSA9IG51bGw7XHJcbiAgICB9KTtcclxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2ludGVyYWN0aW9uL2RyYWcuanNcbi8vIG1vZHVsZSBpZCA9IDEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/*!*****************************************!*\
  !*** ./node_modules/hammerjs/hammer.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n        return Hammer;\n    }.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/*!************************************!*\
  !*** ./src/schedular/schedular.js ***!
  \************************************/
/*! exports provided: Schedular */
/*! exports used: Schedular */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * \r\n * A job schedular that limmits the time it can take up\r\n * in an animationframe by the interval given to it.\r\n * \r\n * This should only be used for jobs that can be dropped if a new\r\n * one arrives before the old is completed. \r\n * \r\n * @param {number} interval ms that jobs are sceduled for each animationframe\r\n * @param {Handle[]} jobs array that jobs are stored in\r\n */\r\nconst Schedular = function(interval, jobs) {\r\n    this.interval =  interval || 16;\r\n    this.jobs = jobs || [];\r\n    \r\n    this.currentJobIndex = 0;\r\n    this.frame = -1; // current animation frame\r\n}\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = Schedular;\n\r\n\r\n/**\r\n * \r\n * Returns a handle that can be used to schedule jobs,\r\n * a single handle should be used for a single repeating task.\r\n * \r\n * @returns {Handle} A scheduling handle\r\n */\r\nSchedular.prototype.getHandle = function() {\r\n    const handle = new Handle();\r\n    this.jobs.push(handle);\r\n}\r\n\r\n/**\r\n * \r\n * Returns an array of handles that can be used to schedule jobs,\r\n * a single handle should be used for a single repeating task.\r\n * \r\n * @param {number} ammount Ammount of handles you want\r\n * @returns {Handle[]} An array of scheduling handles\r\n */\r\nSchedular.prototype.getHandles = function(ammount) {\r\n    var arr = [];\r\n    for(let i = 0; i < ammount; i ++) {\r\n        const handle = new Handle();\r\n\r\n        this.jobs.push(handle);\r\n        arr.push(handle);\r\n    }\r\n    return arr;\r\n}\r\n\r\n/**\r\n * \r\n * Sets the scheduling interval\r\n * \r\n * @param {number} interval\r\n */\r\nSchedular.prototype.setInterval = function(interval) {\r\n    this.interval = interval;\r\n}\r\n\r\n/**\r\n * Call this function to start the schedular\r\n */\r\nSchedular.prototype.start = function() {\r\n    this.frame = requestAnimationFrame(() => this.start());\r\n    if(this.jobs.length === 0) return;\r\n\r\n    const startIndex = this.currentJobIndex;\r\n    const endTime = performance.now() + this.interval;\r\n    while(true || performance.now() < endTime) {\r\n        const job = this.jobs[this.currentJobIndex];\r\n        if(job.hasJob) job.doJob();\r\n\r\n        this.currentJobIndex = ++this.currentJobIndex % this.jobs.length; \r\n        if(this.currentJobIndex === startIndex) break;\r\n    }\r\n}\r\n\r\n/**\r\n * Call this function to stop the schedular\r\n */\r\nSchedular.prototype.stop = function() {\r\n    cancelAnimationFrame(this.frame);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * \r\n * Handles guarentee the schedular processes jobs\r\n * in the order they are requested in while removing jobs\r\n * that have not been completed if addJob is called on the\r\n * same handle before completion.\r\n * \r\n * @param {{() => void}} job\r\n * @param {boolean} hasJob\r\n */\r\nconst Handle = function(job, hasJob) {\r\n    this.currentJob = job || null;\r\n    this.hasJob = hasJob || job != null;\r\n}\r\n\r\n/**\r\n * Cancles a job if it has not been done yet by the schedular\r\n */\r\nHandle.prototype.cancleJob = function() {\r\n    this.hasJob = false;\r\n}\r\n\r\n/**\r\n * Adds a job to the schedular, if the handle had\r\n * an uncompleted job it will be replaced by the new one\r\n * \r\n * @param {() => void} job\r\n */\r\nHandle.prototype.addJob = function(job) {\r\n    this.currentJob = job;\r\n    this.hasJob = true;\r\n}\r\n\r\nHandle.prototype.doJob = function() {\r\n    this.currentJob();\r\n    this.hasJob = false;\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2NoZWR1bGFyL3NjaGVkdWxhci5qcz8yNWY1Il0sInNvdXJjZXNDb250ZW50IjpbIlxyXG4vKipcclxuICogXHJcbiAqIEEgam9iIHNjaGVkdWxhciB0aGF0IGxpbW1pdHMgdGhlIHRpbWUgaXQgY2FuIHRha2UgdXBcclxuICogaW4gYW4gYW5pbWF0aW9uZnJhbWUgYnkgdGhlIGludGVydmFsIGdpdmVuIHRvIGl0LlxyXG4gKiBcclxuICogVGhpcyBzaG91bGQgb25seSBiZSB1c2VkIGZvciBqb2JzIHRoYXQgY2FuIGJlIGRyb3BwZWQgaWYgYSBuZXdcclxuICogb25lIGFycml2ZXMgYmVmb3JlIHRoZSBvbGQgaXMgY29tcGxldGVkLiBcclxuICogXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbnRlcnZhbCBtcyB0aGF0IGpvYnMgYXJlIHNjZWR1bGVkIGZvciBlYWNoIGFuaW1hdGlvbmZyYW1lXHJcbiAqIEBwYXJhbSB7SGFuZGxlW119IGpvYnMgYXJyYXkgdGhhdCBqb2JzIGFyZSBzdG9yZWQgaW5cclxuICovXHJcbmV4cG9ydCBjb25zdCBTY2hlZHVsYXIgPSBmdW5jdGlvbihpbnRlcnZhbCwgam9icykge1xyXG4gICAgdGhpcy5pbnRlcnZhbCA9ICBpbnRlcnZhbCB8fCAxNjtcclxuICAgIHRoaXMuam9icyA9IGpvYnMgfHwgW107XHJcbiAgICBcclxuICAgIHRoaXMuY3VycmVudEpvYkluZGV4ID0gMDtcclxuICAgIHRoaXMuZnJhbWUgPSAtMTsgLy8gY3VycmVudCBhbmltYXRpb24gZnJhbWVcclxufVxyXG5cclxuLyoqXHJcbiAqIFxyXG4gKiBSZXR1cm5zIGEgaGFuZGxlIHRoYXQgY2FuIGJlIHVzZWQgdG8gc2NoZWR1bGUgam9icyxcclxuICogYSBzaW5nbGUgaGFuZGxlIHNob3VsZCBiZSB1c2VkIGZvciBhIHNpbmdsZSByZXBlYXRpbmcgdGFzay5cclxuICogXHJcbiAqIEByZXR1cm5zIHtIYW5kbGV9IEEgc2NoZWR1bGluZyBoYW5kbGVcclxuICovXHJcblNjaGVkdWxhci5wcm90b3R5cGUuZ2V0SGFuZGxlID0gZnVuY3Rpb24oKSB7XHJcbiAgICBjb25zdCBoYW5kbGUgPSBuZXcgSGFuZGxlKCk7XHJcbiAgICB0aGlzLmpvYnMucHVzaChoYW5kbGUpO1xyXG59XHJcblxyXG4vKipcclxuICogXHJcbiAqIFJldHVybnMgYW4gYXJyYXkgb2YgaGFuZGxlcyB0aGF0IGNhbiBiZSB1c2VkIHRvIHNjaGVkdWxlIGpvYnMsXHJcbiAqIGEgc2luZ2xlIGhhbmRsZSBzaG91bGQgYmUgdXNlZCBmb3IgYSBzaW5nbGUgcmVwZWF0aW5nIHRhc2suXHJcbiAqIFxyXG4gKiBAcGFyYW0ge251bWJlcn0gYW1tb3VudCBBbW1vdW50IG9mIGhhbmRsZXMgeW91IHdhbnRcclxuICogQHJldHVybnMge0hhbmRsZVtdfSBBbiBhcnJheSBvZiBzY2hlZHVsaW5nIGhhbmRsZXNcclxuICovXHJcblNjaGVkdWxhci5wcm90b3R5cGUuZ2V0SGFuZGxlcyA9IGZ1bmN0aW9uKGFtbW91bnQpIHtcclxuICAgIHZhciBhcnIgPSBbXTtcclxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBhbW1vdW50OyBpICsrKSB7XHJcbiAgICAgICAgY29uc3QgaGFuZGxlID0gbmV3IEhhbmRsZSgpO1xyXG5cclxuICAgICAgICB0aGlzLmpvYnMucHVzaChoYW5kbGUpO1xyXG4gICAgICAgIGFyci5wdXNoKGhhbmRsZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXJyO1xyXG59XHJcblxyXG4vKipcclxuICogXHJcbiAqIFNldHMgdGhlIHNjaGVkdWxpbmcgaW50ZXJ2YWxcclxuICogXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbnRlcnZhbFxyXG4gKi9cclxuU2NoZWR1bGFyLnByb3RvdHlwZS5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKGludGVydmFsKSB7XHJcbiAgICB0aGlzLmludGVydmFsID0gaW50ZXJ2YWw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxsIHRoaXMgZnVuY3Rpb24gdG8gc3RhcnQgdGhlIHNjaGVkdWxhclxyXG4gKi9cclxuU2NoZWR1bGFyLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5mcmFtZSA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLnN0YXJ0KCkpO1xyXG4gICAgaWYodGhpcy5qb2JzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IHN0YXJ0SW5kZXggPSB0aGlzLmN1cnJlbnRKb2JJbmRleDtcclxuICAgIGNvbnN0IGVuZFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKSArIHRoaXMuaW50ZXJ2YWw7XHJcbiAgICB3aGlsZSh0cnVlIHx8IHBlcmZvcm1hbmNlLm5vdygpIDwgZW5kVGltZSkge1xyXG4gICAgICAgIGNvbnN0IGpvYiA9IHRoaXMuam9ic1t0aGlzLmN1cnJlbnRKb2JJbmRleF07XHJcbiAgICAgICAgaWYoam9iLmhhc0pvYikgam9iLmRvSm9iKCk7XHJcblxyXG4gICAgICAgIHRoaXMuY3VycmVudEpvYkluZGV4ID0gKyt0aGlzLmN1cnJlbnRKb2JJbmRleCAlIHRoaXMuam9icy5sZW5ndGg7IFxyXG4gICAgICAgIGlmKHRoaXMuY3VycmVudEpvYkluZGV4ID09PSBzdGFydEluZGV4KSBicmVhaztcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIENhbGwgdGhpcyBmdW5jdGlvbiB0byBzdG9wIHRoZSBzY2hlZHVsYXJcclxuICovXHJcblNjaGVkdWxhci5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5mcmFtZSk7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBcclxuICogSGFuZGxlcyBndWFyZW50ZWUgdGhlIHNjaGVkdWxhciBwcm9jZXNzZXMgam9ic1xyXG4gKiBpbiB0aGUgb3JkZXIgdGhleSBhcmUgcmVxdWVzdGVkIGluIHdoaWxlIHJlbW92aW5nIGpvYnNcclxuICogdGhhdCBoYXZlIG5vdCBiZWVuIGNvbXBsZXRlZCBpZiBhZGRKb2IgaXMgY2FsbGVkIG9uIHRoZVxyXG4gKiBzYW1lIGhhbmRsZSBiZWZvcmUgY29tcGxldGlvbi5cclxuICogXHJcbiAqIEBwYXJhbSB7eygpID0+IHZvaWR9fSBqb2JcclxuICogQHBhcmFtIHtib29sZWFufSBoYXNKb2JcclxuICovXHJcbmNvbnN0IEhhbmRsZSA9IGZ1bmN0aW9uKGpvYiwgaGFzSm9iKSB7XHJcbiAgICB0aGlzLmN1cnJlbnRKb2IgPSBqb2IgfHwgbnVsbDtcclxuICAgIHRoaXMuaGFzSm9iID0gaGFzSm9iIHx8IGpvYiAhPSBudWxsO1xyXG59XHJcblxyXG4vKipcclxuICogQ2FuY2xlcyBhIGpvYiBpZiBpdCBoYXMgbm90IGJlZW4gZG9uZSB5ZXQgYnkgdGhlIHNjaGVkdWxhclxyXG4gKi9cclxuSGFuZGxlLnByb3RvdHlwZS5jYW5jbGVKb2IgPSBmdW5jdGlvbigpIHtcclxuICAgIHRoaXMuaGFzSm9iID0gZmFsc2U7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRzIGEgam9iIHRvIHRoZSBzY2hlZHVsYXIsIGlmIHRoZSBoYW5kbGUgaGFkXHJcbiAqIGFuIHVuY29tcGxldGVkIGpvYiBpdCB3aWxsIGJlIHJlcGxhY2VkIGJ5IHRoZSBuZXcgb25lXHJcbiAqIFxyXG4gKiBAcGFyYW0geygpID0+IHZvaWR9IGpvYlxyXG4gKi9cclxuSGFuZGxlLnByb3RvdHlwZS5hZGRKb2IgPSBmdW5jdGlvbihqb2IpIHtcclxuICAgIHRoaXMuY3VycmVudEpvYiA9IGpvYjtcclxuICAgIHRoaXMuaGFzSm9iID0gdHJ1ZTtcclxufVxyXG5cclxuSGFuZGxlLnByb3RvdHlwZS5kb0pvYiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5jdXJyZW50Sm9iKCk7XHJcbiAgICB0aGlzLmhhc0pvYiA9IGZhbHNlO1xyXG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvc2NoZWR1bGFyL3NjaGVkdWxhci5qc1xuLy8gbW9kdWxlIGlkID0gMTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///15\n");

/***/ })
/******/ ]);