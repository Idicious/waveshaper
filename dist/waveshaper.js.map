{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 978a91f1a6bce1d17cdf","webpack:///./src/core/track.ts","webpack:///./src/strategies/peak.ts","webpack:///./src/strategies/rms.ts","webpack:///./src/config/managerconfig.ts","webpack:///./src/index.ts","webpack:///./src/core/waveshaper.ts","webpack:///./node_modules/weighted-interval-merge/dist/weighted-interval-merge.js"],"names":[],"mappings":"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W;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0EAA0E,gEAAgE;AAC1I;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa,WAAW;AACxB,eAAe,WAAW;AAC1B;AACA;AACA;;AAEA;;AAEA;AACA,mBAAmB,sBAAsB;AACzC;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP,+BAA+B,YAAY,uBAAuB;AAClE;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,WAAW;AACxB,aAAa,WAAW;AACxB;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,OAAO;AACP,+BAA+B;AAC/B;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,+BAA+B;AAC/B;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,SAAS;AACT,iCAAiC,QAAQ,uBAAuB;AAChE;AACA;AACA;AACA;AACA,SAAS;AACT,iCAAiC,QAAQ,uBAAuB;AAChE;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,gDAAgD,cAAc;;AAE9D,CAAC","file":"waveshaper.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"waveshaper\"] = factory();\n\telse\n\t\troot[\"waveshaper\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 978a91f1a6bce1d17cdf","import { ManagerOptions } from \"../config/managerconfig\";\r\nimport calculatePeaks from \"../strategies/peak\";\r\nimport calculateRms from \"../strategies/rms\";\r\nimport AudioInterval from \"../models/interval\";\r\nimport { weightedIntervalMerge } from \"weighted-interval-merge\";\r\n\r\nexport default class Track {\r\n  public readonly id: string;\r\n\r\n  public intervals: AudioInterval[];\r\n\r\n  public get flattened(): AudioInterval[] {\r\n    return [...this._flattened];\r\n  }\r\n  protected _flattened: AudioInterval[];\r\n\r\n  protected _lastValue = new Float32Array(this.width * 4);\r\n\r\n  constructor(id: string, intervals: AudioInterval[], protected width: number) {\r\n    this.id = id;\r\n    this.intervals = intervals || [];\r\n\r\n    this._flattened = weightedIntervalMerge(this.intervals) as AudioInterval[];\r\n  }\r\n\r\n  flatten() {\r\n    this._flattened = weightedIntervalMerge(this.intervals) as AudioInterval[];\r\n  }\r\n\r\n  /**\r\n   * Gets the duration of the audio in seconds\r\n   *\r\n   * @returns Decimal value of total duration in seconds\r\n   */\r\n  getDuration() {\r\n    return Math.max(...this.intervals.map(s => s.end));\r\n  }\r\n\r\n  /**\r\n   * Gets the summerized values for the current settings\r\n   *\r\n   * @param options\r\n   * @param dataMap\r\n   * @returns Two dimensional array, one entry for each pixel, for each pixel a min\r\n   * and a max value.\r\n   */\r\n  calculate(\r\n    options: ManagerOptions,\r\n    dataMap: Map<string, Float32Array>,\r\n    start: number,\r\n    width: number,\r\n    shift: number\r\n  ): Float32Array {\r\n    switch (options.meterType) {\r\n      case \"peak\":\r\n        this._lastValue = calculatePeaks(\r\n          options,\r\n          this.flattened,\r\n          dataMap,\r\n          start,\r\n          width,\r\n          shift,\r\n          this._lastValue\r\n        );\r\n        break;\r\n      default:\r\n        this._lastValue = calculateRms(\r\n          options,\r\n          this.flattened,\r\n          dataMap,\r\n          start,\r\n          width,\r\n          shift,\r\n          this._lastValue\r\n        );\r\n        break;\r\n    }\r\n\r\n    return this._lastValue;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/track.ts","//import Interval from '../models/interval';\r\nimport { ManagerOptions } from \"../config/managerconfig\";\r\nimport AudioInterval from \"../models/interval\";\r\n\r\n/**\r\n * Calculates peak values\r\n *\r\n * @export\r\n * @param resolution\r\n * @param samplesPerPixel\r\n * @param width\r\n * @param intervals\r\n * @param scrollPosition\r\n * @param sampleRate\r\n * @param dataMap\r\n * @returns\r\n */\r\nexport default (\r\n  options: ManagerOptions,\r\n  intervals: AudioInterval[],\r\n  dataMap: Map<string, Float32Array>,\r\n  startPosition: number,\r\n  width: number,\r\n  shift: number,\r\n  lastValue: Float32Array\r\n): Float32Array => {\r\n  const sampleSize = Math.ceil(options.samplesPerPixel / options.resolution);\r\n  const start = options.scrollPosition * options.samplesPerPixel;\r\n  const startSecond = start / options.samplerate;\r\n  const secondsPerPixel = options.samplesPerPixel / options.samplerate;\r\n  const calcStartSecond = startSecond + startPosition * secondsPerPixel;\r\n  const calcEndSecond = calcStartSecond + width * secondsPerPixel;\r\n\r\n  const absShift = Math.abs(shift) * 4;\r\n  const shiftTarget = shift > 0 ? 0 : absShift;\r\n  const shiftStart = shift > 0 ? absShift : 0;\r\n\r\n  const peaks = new Float32Array(lastValue.buffer)\r\n    .copyWithin(shiftTarget, shiftStart)\r\n    .fill(0, startPosition * 4, (startPosition + width) * 4);\r\n\r\n  let currentIntervalIndex = intervals.findIndex(\r\n    i => i.end > calcStartSecond && i.start + i.offsetStart < calcEndSecond\r\n  );\r\n\r\n  // There are no intervals in this range so return empty array\r\n  if (currentIntervalIndex === -1) return peaks;\r\n\r\n  const maxIntervalIncrementIndex = intervals.length - 1;\r\n\r\n  let currentInterval = intervals[currentIntervalIndex];\r\n  let buffer = dataMap.get(currentInterval.source);\r\n\r\n  // For each pixel we display\r\n  for (let i = startPosition; i < startPosition + width; i++) {\r\n    const currentSecond = startSecond + i * secondsPerPixel;\r\n\r\n    if (currentSecond >= currentInterval.end) {\r\n      if (currentIntervalIndex === maxIntervalIncrementIndex) {\r\n        return peaks;\r\n      } else {\r\n        currentInterval = intervals[++currentIntervalIndex];\r\n        buffer = dataMap.get(currentInterval.source);\r\n      }\r\n    }\r\n\r\n    if (currentInterval.start + currentInterval.offsetStart > currentSecond) {\r\n      peaks.set([0, 0, 0, 0], i * 4);\r\n      continue;\r\n    }\r\n\r\n    const startBorder =\r\n      currentSecond - secondsPerPixel <\r\n      currentInterval.start + currentInterval.offsetStart;\r\n    const endBorder = currentSecond + secondsPerPixel > currentInterval.end;\r\n    const intervalBorder = startBorder || endBorder ? 1 : 0;\r\n\r\n    if (buffer == null) {\r\n      peaks.set([0, 0, intervalBorder, 1], i * 4);\r\n      continue;\r\n    }\r\n\r\n    const secondsIntoInterval = currentSecond - currentInterval.start;\r\n    const startSample = Math.floor(secondsIntoInterval * options.samplerate);\r\n\r\n    const endSample = startSample + options.samplesPerPixel;\r\n    const length = buffer.length;\r\n    const loopEnd = length < endSample ? length : endSample;\r\n\r\n    // Cycle through the data-points relevant to the pixel\r\n    // Don't cycle through more than sampleSize frames per pixel.\r\n    let min = 0,\r\n      max = 0;\r\n    for (let j = startSample; j < loopEnd; j += sampleSize) {\r\n      const sample = buffer[j];\r\n\r\n      // Keep track of positive and negative values separately\r\n      if (sample > max) max = sample;\r\n      else if (sample < min) min = sample;\r\n    }\r\n\r\n    peaks.set([min, max, intervalBorder, 1], i * 4);\r\n  }\r\n  return peaks;\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/strategies/peak.ts","//import Interval from '../models/interval';\r\nimport { ManagerOptions } from \"../config/managerconfig\";\r\nimport AudioInterval from \"../models/interval\";\r\n\r\n/**\r\n * Calculate rms values\r\n *\r\n * @export\r\n * @param resolution\r\n * @param samplesPerPixel\r\n * @param width\r\n * @param intervals\r\n * @param scrollPosition\r\n * @param sampleRate\r\n * @param dataMap\r\n * @returns\r\n */\r\nexport default (\r\n  options: ManagerOptions,\r\n  intervals: AudioInterval[],\r\n  dataMap: Map<string, Float32Array>,\r\n  startPosition: number,\r\n  width: number,\r\n  shift: number,\r\n  lastValue: Float32Array\r\n): Float32Array => {\r\n  const sampleSize = Math.ceil(options.samplesPerPixel / options.resolution);\r\n  const start = options.scrollPosition * options.samplesPerPixel;\r\n  const startSecond = start / options.samplerate;\r\n  const secondsPerPixel = options.samplesPerPixel / options.samplerate;\r\n  const calcStartSecond = startSecond + startPosition * secondsPerPixel;\r\n  const calcEndSecond = calcStartSecond + width * secondsPerPixel;\r\n\r\n  const absShift = Math.abs(shift) * 4;\r\n  const shiftTarget = shift > 0 ? 0 : absShift;\r\n  const shiftStart = shift > 0 ? absShift : 0;\r\n\r\n  let peaks = new Float32Array(lastValue.buffer)\r\n    .copyWithin(shiftTarget, shiftStart)\r\n    .fill(0, startPosition * 4, (startPosition + width) * 4);\r\n\r\n  let currentIntervalIndex = intervals.findIndex(\r\n    i => i.end > calcStartSecond && i.start + i.offsetStart < calcEndSecond\r\n  );\r\n\r\n  // There are no intervals in this range so return empty array\r\n  if (currentIntervalIndex === -1) {\r\n    return peaks;\r\n  }\r\n\r\n  const maxIntervalIncrementIndex = intervals.length - 1;\r\n\r\n  let currentInterval = intervals[currentIntervalIndex];\r\n  let buffer = dataMap.get(currentInterval.source);\r\n\r\n  // For each pixel we display\r\n  for (let i = startPosition; i < startPosition + width; i++) {\r\n    const currentSecond = startSecond + i * secondsPerPixel;\r\n\r\n    if (currentSecond >= currentInterval.end) {\r\n      if (currentIntervalIndex === maxIntervalIncrementIndex) {\r\n        return peaks;\r\n      } else {\r\n        currentInterval = intervals[++currentIntervalIndex];\r\n        buffer = dataMap.get(currentInterval.source);\r\n      }\r\n    }\r\n\r\n    if (currentInterval.start + currentInterval.offsetStart > currentSecond) {\r\n      peaks.set([0, 0, 0, 0], i * 4);\r\n      continue;\r\n    }\r\n\r\n    const startBorder =\r\n      currentSecond - secondsPerPixel <\r\n      currentInterval.start + currentInterval.offsetStart;\r\n    const endBorder = currentSecond + secondsPerPixel > currentInterval.end;\r\n    const intervalBorder = startBorder || endBorder ? 1 : 0;\r\n\r\n    if (buffer == null) {\r\n      peaks.set([0, 0, intervalBorder, 1], i * 4);\r\n      continue;\r\n    }\r\n\r\n    const secondsIntoInterval = currentSecond - currentInterval.start;\r\n    const startSample = Math.floor(secondsIntoInterval * options.samplerate);\r\n\r\n    const endSample = startSample + options.samplesPerPixel;\r\n    const length = buffer.length;\r\n    const loopEnd = length < endSample ? length : endSample;\r\n\r\n    // Cycle through the data-points relevant to the pixel\r\n    // Don't cycle through more than sampleSize frames per pixel.\r\n    let posSum = 0,\r\n      negSum = 0,\r\n      count = 0;\r\n    for (let j = startSample; j < loopEnd; j += sampleSize, count++) {\r\n      const val = buffer[j];\r\n      // Keep track of positive and negative values separately\r\n      if (val > 0) {\r\n        posSum += val * val;\r\n      } else {\r\n        negSum += val * val;\r\n      }\r\n    }\r\n\r\n    const min = -Math.sqrt(negSum / count);\r\n    const max = Math.sqrt(posSum / count);\r\n\r\n    peaks.set([min, max, intervalBorder, 1], i * 4);\r\n  }\r\n  return peaks;\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/strategies/rms.ts","export type MeterType = 'peak' | 'rms';\r\n\r\nexport interface ManagerOptions {\r\n    scrollPosition: number;\r\n    samplesPerPixel: number;\r\n    resolution: number;\r\n    meterType: MeterType;\r\n    width: number;\r\n    samplerate: number;\r\n}\r\n\r\nexport interface ManagerInput {\r\n    scrollPosition?: number;\r\n    samplesPerPixel?: number;\r\n    resolution?: number;\r\n    meterType?: MeterType;\r\n    width?: number;\r\n    samplerate?: number;\r\n}\r\n\r\nconst defaultOptions: ManagerOptions = {\r\n    scrollPosition: 0,\r\n    samplesPerPixel: 1024,\r\n    resolution: 10,\r\n    meterType: 'rms',\r\n    width: 300,\r\n    samplerate: 44100\r\n}\r\n\r\nexport default defaultOptions;\n\n\n// WEBPACK FOOTER //\n// ./src/config/managerconfig.ts","import WaveShaper from \"./core/waveshaper\";\r\nimport Track from \"./core/track\";\r\nimport AudioInterval from \"./models/interval\";\r\nimport defaultConfig, {\r\n  ManagerInput,\r\n  ManagerOptions\r\n} from \"./config/managerconfig\";\r\nimport rms from \"./strategies/rms\";\r\nimport peak from \"./strategies/peak\";\r\n\r\nexport {\r\n  WaveShaper,\r\n  Track,\r\n  AudioInterval,\r\n  defaultConfig,\r\n  rms,\r\n  peak,\r\n  ManagerOptions,\r\n  ManagerInput\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","import Track from \"./track\";\r\nimport Data from \"../models/data\";\r\nimport defaultOptions, {\r\n  ManagerOptions,\r\n  ManagerInput\r\n} from \"../config/managerconfig\";\r\nimport TrackInput from \"../models/track-input\";\r\nimport ProcessResult from \"../models/process-result\";\r\nimport {\r\n  WaveShaperCallback,\r\n  SegmentCallback,\r\n  OptionsCallback\r\n} from \"../models/callback\";\r\nimport { AudioInterval } from \"..\";\r\n\r\n/**\r\n *\r\n *\r\n * @export\r\n */\r\nexport default class WaveShaper {\r\n  /**\r\n   * Map of waveshapers managed by the manager\r\n   *\r\n   * @readonly\r\n   * @memberof WaveShaper\r\n   */\r\n  protected readonly tracks = new Map<string, Track>();\r\n\r\n  /**\r\n   * Map of audio data\r\n   *\r\n   * @readonly\r\n   * @memberof WaveShaper\r\n   */\r\n  protected readonly audioData = new Map<string, Float32Array>();\r\n\r\n  /**\r\n   * @description Map of callback functions\r\n   *\r\n   * @readonly\r\n   * @memberof WaveShaper\r\n   */\r\n  protected readonly callbackMap = new Map<string, WaveShaperCallback[]>();\r\n\r\n  /**\r\n   * @description Segment callback functions\r\n   *\r\n   * @readonly\r\n   * @memberof WaveShaper\r\n   */\r\n  protected readonly segmentCallbackMap = new Array<SegmentCallback>();\r\n\r\n  /**\r\n   * @description Options callbacks\r\n   *\r\n   * @readonly\r\n   * @memberof WaveShaper\r\n   */\r\n  protected readonly optionsCallbacks = new Array<OptionsCallback>();\r\n\r\n  /**\r\n   * @description Currect settings\r\n   *\r\n   * @readonly\r\n   * @memberof WaveShaper\r\n   */\r\n  public get options(): ManagerOptions {\r\n    return { ...this._options };\r\n  }\r\n  protected _options: ManagerOptions;\r\n\r\n  /**\r\n   * @description Active id's, redraws when draw is called without argument\r\n   *\r\n   * @readonly\r\n   * @unused\r\n   * @memberof WaveShaper\r\n   */\r\n  public get activeWaveShapers(): string[] {\r\n    return [...this._activeWaveShapers];\r\n  }\r\n  protected _activeWaveShapers: string[] = [];\r\n\r\n  /**\r\n   * @description Last result of calling process, argument given to all callbacks\r\n   *\r\n   * @readonly\r\n   * @memberof WaveShaper\r\n   */\r\n  public get lastProcessResult(): ProcessResult | null {\r\n    return this._lastProcessResult;\r\n  }\r\n  protected _lastProcessResult: ProcessResult | null;\r\n\r\n  /**\r\n   * @description Total duration of all tracks\r\n   *\r\n   * @readonly\r\n   * @memberof WaveShaper\r\n   */\r\n  public get duration() {\r\n    return this._duration;\r\n  }\r\n  protected _duration: number;\r\n\r\n  /**\r\n   * @param [options=defaultOptions] Initial options\r\n   * @throws Throws an error if samplerate is null or NaN\r\n   */\r\n  constructor(options: ManagerInput = defaultOptions) {\r\n    this.validateOptions(options);\r\n    this._options = { ...defaultOptions, ...options };\r\n  }\r\n\r\n  /**\r\n   * Gives the position corresponding to a given time\r\n   *\r\n   * @param time\r\n   */\r\n  timeToPosition(time: number) {\r\n    return (time * this._options.samplerate) / this._options.samplesPerPixel;\r\n  }\r\n\r\n  /**\r\n   * Gives the time corresponding to a given position\r\n   * @param position\r\n   */\r\n  positionToTime(position: number) {\r\n    return (\r\n      (position * this._options.samplesPerPixel) / this._options.samplerate\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @description Flattens the segments of the given waveshaper id\r\n   *\r\n   * @param id\r\n   * @returns WaveShaper instance\r\n   */\r\n  flatten(ids: string[] = []): WaveShaper {\r\n    this.getProcessIds(ids).forEach(id => {\r\n      const waveShaper = this.getTrack(id);\r\n      if (waveShaper != null) waveShaper.flatten();\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Processes all relevant WaveShapers and invokes registered callbacks\r\n   *\r\n   * @param ids Options array of id's to draw\r\n   * @param start Start position\r\n   * @param width Width to process\r\n   * @param shift Units to shift current data\r\n   *\r\n   * @returns WaveShaper instance\r\n   */\r\n  process(\r\n    ids: string[] = [],\r\n    start = 0,\r\n    width = this.options.width,\r\n    shift = 0\r\n  ): WaveShaper {\r\n    const toProcess = this.getProcessIds(ids);\r\n    const options: ManagerOptions = { ...this.options };\r\n\r\n    const data: Data[] = [];\r\n    for (let i = 0; i < toProcess.length; i++) {\r\n      const id = toProcess[i];\r\n\r\n      const wave = this.getTrack(id);\r\n      if (wave == null) continue;\r\n\r\n      const peaks = wave.calculate(\r\n        options,\r\n        this.audioData,\r\n        start,\r\n        width,\r\n        shift\r\n      );\r\n      data.push({ id, data: peaks });\r\n    }\r\n\r\n    // Invoke callbacks after returning value.\r\n    this._lastProcessResult = { options, data };\r\n    this.invokeCallbacks(this._lastProcessResult, start, width, shift);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Registers a callback that fires when the track with given id is processed\r\n   *\r\n   * @param id id of Track to register to\r\n   * @param callBack will be invoked when the given track is processed\r\n   *\r\n   * @returns WaveShaper instance\r\n   */\r\n  on(id: string, callBack: WaveShaperCallback): WaveShaper {\r\n    let callbackArray = this.callbackMap.get(id);\r\n    if (callbackArray == null) {\r\n      this.callbackMap.set(id, [callBack]);\r\n    } else {\r\n      callbackArray.push(callBack);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Unregisters a callback from the given track, will no longer be called\r\n   *\r\n   * @param id id of Track to unregister from\r\n   * @param callBack callback to remove\r\n   *\r\n   * @returns WaveShaper instance\r\n   */\r\n  off(id: string, callBack: WaveShaperCallback): WaveShaper {\r\n    let callbackArray = this.callbackMap.get(id);\r\n    if (callbackArray == null) return this;\r\n\r\n    const index = callbackArray.indexOf(callBack);\r\n    if (index < 0) return this;\r\n\r\n    callbackArray = callbackArray.splice(index, 1);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds a callback that is triggered when an Interval is updated\r\n   *\r\n   * @param cb Callback function\r\n   */\r\n  onSegment(cb: SegmentCallback) {\r\n    this.segmentCallbackMap.push(cb);\r\n  }\r\n\r\n  /**\r\n   * Removes a previously added callback for the Interval update callback\r\n   *\r\n   * @param cb Callback function\r\n   */\r\n  offSegment(cb: SegmentCallback) {\r\n    const index = this.segmentCallbackMap.indexOf(cb);\r\n    if (index !== -1) {\r\n      this.segmentCallbackMap.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emits a segment update\r\n   *\r\n   * @param old Old interval\r\n   * @param changed Updated interval\r\n   */\r\n  emitSegment(old: AudioInterval | null, changed: AudioInterval | null) {\r\n    this.segmentCallbackMap.forEach(cb => cb(old, changed));\r\n  }\r\n\r\n  /**\r\n   * Adds a callback that is fired when options are updated\r\n   *\r\n   * @param cb Callback function\r\n   */\r\n  onOptions(cb: OptionsCallback) {\r\n    this.optionsCallbacks.push(cb);\r\n  }\r\n\r\n  /**\r\n   * Removes a previously added callback\r\n   * @param cb Callback function\r\n   */\r\n  offOptions(cb: OptionsCallback) {\r\n    const index = this.optionsCallbacks.indexOf(cb);\r\n    if (index !== -1) {\r\n      this.optionsCallbacks.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emits an options update\r\n   *\r\n   * @param old Old options\r\n   * @param updated New options\r\n   */\r\n  protected emitOptions(old: ManagerOptions, updated: ManagerOptions) {\r\n    this.optionsCallbacks.forEach(cb => cb(old, updated));\r\n  }\r\n\r\n  /**\r\n   * @description Merges the given options into the current and returns updated options\r\n   *\r\n   * @param options A (partial) ManagerOptions object\r\n   * @returns WaveShaper instance\r\n   */\r\n  setOptions(options: ManagerInput): WaveShaper {\r\n    this.validateOptions(options);\r\n\r\n    const oldOptions = { ...this.options };\r\n\r\n    this._options = { ...oldOptions, ...options };\r\n    this.emitOptions(oldOptions, this.options);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @description Adds a waveshaper to the manager\r\n   *\r\n   * @param id id of WaveShaper\r\n   * @param segments Segments in wave\r\n   * @param color Background color of segments\r\n   *\r\n   * @returns WaveShaper instance\r\n   */\r\n  setTracks(...tracks: TrackInput[]): WaveShaper {\r\n    for (let i = 0; i < tracks.length; i++) {\r\n      const track = tracks[i];\r\n      const foundWave = this.getTrack(track.id);\r\n      if (foundWave == null) {\r\n        const wave = new Track(track.id, track.intervals, this._options.width);\r\n        this.tracks.set(track.id, wave);\r\n      } else {\r\n        foundWave.intervals = track.intervals || [];\r\n        foundWave.flatten();\r\n      }\r\n    }\r\n\r\n    this._duration = this.getDuration();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @description Adds audio data to the waveshaper and redraws waveshapers using it\r\n   *\r\n   * @param id  Data id, refered to by source parameter of segments\r\n   * @param data AudioBuffer with audio data\r\n   *\r\n   * @returns WaveShaper instance\r\n   */\r\n  setData(...data: Data[]) {\r\n    data.forEach(d => {\r\n      this.audioData.set(d.id, d.data);\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @description The given id's are set as the active waveshapers, process only processes these when set,\r\n   * call with no values to allways process all values (default)\r\n   *\r\n   * @param ids Waveshaper id's to set as active\r\n   *\r\n   * @returns WaveShaper instance\r\n   */\r\n  setActive(...ids: string[]): WaveShaper {\r\n    this._activeWaveShapers = ids;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @description Removes the waves and all callbacks with given id from the manager\r\n   *\r\n   * @param id\r\n   *\r\n   * @returns WaveShaper instance\r\n   */\r\n  clearTracks(...ids: string[]): WaveShaper {\r\n    ids.forEach(id => {\r\n      this.removeCallbacksById(id);\r\n      this.tracks.delete(id);\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @description Gets Track with given id\r\n   *\r\n   * @param id\r\n   * @returns Track with given ID\r\n   */\r\n  getTrack(id: string): Track | undefined {\r\n    return this.tracks.get(id);\r\n  }\r\n\r\n  /**\r\n   * Validates given options\r\n   *\r\n   * @param options\r\n   * @returns true if valid, false if not\r\n   */\r\n  protected validateOptions(options: ManagerInput) {\r\n    const currentOptions = this._options || defaultOptions;\r\n\r\n    if (!options.samplesPerPixel || options.samplesPerPixel <= 0) {\r\n      options.samplesPerPixel = currentOptions.samplesPerPixel;\r\n    }\r\n    if (!options.meterType) {\r\n      options.meterType = currentOptions.meterType;\r\n    }\r\n    if (!options.resolution || options.resolution <= 0) {\r\n      options.resolution = currentOptions.resolution;\r\n    }\r\n    if (!options.width || this.options.width <= 0) {\r\n      options.width = currentOptions.width;\r\n    }\r\n    if (!options.scrollPosition || this.options.scrollPosition <= 0) {\r\n      options.scrollPosition = currentOptions.scrollPosition;\r\n    }\r\n    if (!options.samplerate || this.options.samplerate <= 0) {\r\n      options.samplerate = currentOptions.samplerate;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Invokes all registered callbacks registered to a waveshaper id in the data list\r\n   *\r\n   * @param options\r\n   * @param data\r\n   */\r\n  protected invokeCallbacks(\r\n    result: ProcessResult,\r\n    start: number,\r\n    width: number,\r\n    shift: number\r\n  ) {\r\n    for (let i = 0; i < result.data.length; i++) {\r\n      const trackResult = result.data[i];\r\n\r\n      const callbacks = this.callbackMap.get(trackResult.id);\r\n      if (callbacks == null) continue;\r\n\r\n      for (let j = 0; j < callbacks.length; j++) {\r\n        const callback = callbacks[j];\r\n        callback(\r\n          result.options,\r\n          new Float32Array(trackResult.data),\r\n          start,\r\n          width,\r\n          shift\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  protected getProcessIds(ids: string[]): string[] {\r\n    if (ids.length > 0) return ids;\r\n\r\n    if (this._activeWaveShapers.length > 0) return this._activeWaveShapers;\r\n\r\n    return Array.from(this.tracks.keys());\r\n  }\r\n\r\n  protected removeCallbacksById(id: string) {\r\n    const callbackArray = this.callbackMap.get(id);\r\n    if (callbackArray == null) return;\r\n\r\n    callbackArray.splice(0, callbackArray.length);\r\n    this.callbackMap.delete(id);\r\n  }\r\n\r\n  /**\r\n   * @description Returns the maximum duration of all the waveshapers managed by this class\r\n   *\r\n   * @returns Maximum duration in seconds\r\n   * @memberof WaveShaper\r\n   */\r\n  protected getDuration(): number {\r\n    return Array.from(this.tracks.values()).reduce(\r\n      (maxDuration, waveShaper) => {\r\n        const duration = waveShaper.getDuration();\r\n        return duration > maxDuration ? duration : maxDuration;\r\n      },\r\n      0\r\n    );\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/waveshaper.ts","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.intervalMerge = {})));\n}(this, (function (exports) { 'use strict';\n\n  var _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  /**\r\n   * @typedef {Object} Interval\r\n   * \r\n   * @property {number} start\r\n   * @property {number} offsetStart\r\n   * @property {number} end\r\n   * @property {number} index\r\n   */\n\n  /**\r\n   * @typedef {{[key: string]: Interval}} IntervalMap\r\n   */\n\n  /**\r\n   * @param {Interval} interval\r\n   */\n  var calcStart = function calcStart(interval) {\n    return interval.start + interval.offsetStart;\n  };\n\n  /**\r\n   * The algorithm first calculates real start and end times of each segment,\r\n   * sorts them by priority, then start time.\r\n   *\r\n   * Finally it merges the segments by index so there are no overlapping\r\n   * segments and those with highest index are on top.\r\n   *\r\n   * @export\r\n   * @param {Interval[]} intervals Segments to flatten\r\n   * @returns {Interval[]} flattened Interval array\r\n   */\n  var weightedIntervalMerge = function weightedIntervalMerge(intervals) {\n    if (intervals == null || intervals.length === 0) return [];\n\n    var sorted = sort(intervals);\n    var normalized = normalizeIndex(sorted);\n    var copied = copy(normalized);\n    var grouped = groupByIndex(copied);\n\n    return weightedMerge(grouped);\n  };\n\n  /**\r\n   * Copies elements so original are unaltered\r\n   * \r\n   * @param {Interval[]} intervals \r\n   */\n  var copy = function copy(intervals) {\n    return intervals.map(function (i) {\n      return _extends({}, i, {\n        offsetStart: i.offsetStart || 0,\n        index: i.index || 1\n      });\n    });\n  };\n\n  /**\r\n   * When an element is altered the index is set very high,\r\n   * this functions normalizes to indexes back to 0\r\n   * \r\n   * @param {Intervalp[]} intervals \r\n   */\n  var normalizeIndex = function normalizeIndex(intervals) {\n    var index = 0;\n    var preNormalizeIndex = Number.MIN_SAFE_INTEGER;\n    intervals.forEach(function (el) {\n      if (el.index > preNormalizeIndex) {\n        preNormalizeIndex = el.index;\n        el.index = ++index;\n      } else {\n        el.index = index;\n      }\n    });\n    return intervals;\n  };\n\n  /**\r\n   * Sorts the intervals by index, then by start\r\n   * \r\n   * @param {Interval[]} intervals \r\n   * @return {Interval[]} Interval array\r\n   */\n  var sort = function sort(intervals) {\n    return intervals.sort(function (a, b) {\n      return cmp(a.index, b.index) || cmp(calcStart(a), calcStart(b));\n    });\n  };\n\n  /**\r\n   * Returns a map of intervals grouped by the key property\r\n   * \r\n   * @param {Interval[]} intervals \r\n   * @returns {IntervalMap} Map of index => interval[]\r\n   */\n  var groupByIndex = function groupByIndex(intervals) {\n    return intervals.reduce(function (groups, interval) {\n      (groups[interval.index] = groups[interval.index] || []).push(interval);\n      return groups;\n    }, {});\n  };\n\n  /**\r\n   * Merges all the groups by index\r\n   * \r\n   * @param {IntervalMap} grouped \r\n   * @returns {Interval[]} Interval array\r\n   */\n  var weightedMerge = function weightedMerge(grouped) {\n    var flattened = null;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = Object.keys(grouped)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var index = _step.value;\n\n        var merged = merge(grouped[index]);\n        if (flattened == null) {\n          flattened = merged;\n        } else {\n          flattened = combine(merged, flattened);\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return flattened;\n  };\n\n  /**\r\n   * Merges a set of intervals with the same index and remove any overlaps, left to right\r\n   * \r\n   * @param {Interval[]} intervals \r\n   * @returns {Interval[]} Interval array\r\n   */\n  var merge = function merge(intervals) {\n    if (intervals.length <= 1) return intervals;\n\n    var result = [];\n\n    var current = intervals[0];\n    for (var i = 1; i < intervals.length; i++) {\n      var next = intervals[i];\n\n      // If current is completely overlapped by second it is merged into it\n      if (current.end >= next.end) {\n        continue;\n        // Resolves partial overlaps by setting end of current to start of next\n      } else if (calcStart(next) < current.end) {\n        result.push(_extends({}, current, { end: calcStart(next) }));\n        current = next;\n      } else {\n        // No overlap, push onto results\n        result.push(current);\n        current = next;\n      }\n    }\n\n    result.push(current);\n    return result;\n  };\n\n  /**\r\n   * Given two sets of intervals it merges them so the highIndexes set has priority\r\n   *\r\n   * @param {Interval[]} highIndexes\r\n   * @param {Interval[]} lowIndexes\r\n   * \r\n   * @returns {Interval[]} Interval array\r\n   */\n  var combine = function combine(highIndexes, lowIndexes) {\n    var highIndex = 0;\n    var lowIndex = 0;\n\n    var merged = [];\n\n    while (highIndex < highIndexes.length || lowIndex < lowIndexes.length) {\n\n      var high = highIndexes[highIndex];\n      var low = lowIndexes[lowIndex];\n\n      // Only low priority left so push low onto results\n      if (highIndex === highIndexes.length) {\n        merged.push(_extends({}, low));\n        lowIndex++;\n        // Only high priority left so push high onto results\n      } else if (lowIndex === lowIndexes.length) {\n        merged.push(_extends({}, high));\n        highIndex++;\n        // High priority start before or at same time as low\n      } else if (calcStart(high) <= calcStart(low)) {\n        // No overlap between low and high\n        // low:                 ----------------------\n        // high: ---------------\n        if (high.end <= calcStart(low)) ; else if (high.end < low.end) {\n          low.offsetStart = high.end - low.start;\n          // Low index completely overlapped, dismiss it\n          // low:               -----------\n          // high: -------------------------------------\n        } else {\n          lowIndex++;\n        }\n\n        merged.push(_extends({}, high));\n        highIndex++;\n        // Low priority starts before high\n      } else {\n        // No overlap between low and high intervals\n        // low: ---------------\n        // high                ----------------------\n        if (low.end <= calcStart(high)) {\n          merged.push(_extends({}, low));\n          lowIndex++;\n          // Partial overlap where high ends after low\n          // low: ---------------------\n          // high                ----------------------\n        } else if (high.end > low.end) {\n          merged.push(_extends({}, low, { end: calcStart(high) }));\n          lowIndex++;\n          // Partial overlap where high ends before low\n          // low: -------------------------------------\n          // high             -----------\n        } else {\n          merged.push(_extends({}, low, { end: calcStart(high) }));\n          low.offsetStart = high.end - low.start;\n        }\n      }\n    }\n\n    return merged;\n  };\n\n  /**\r\n   *\r\n   * @param {number} a\r\n   * @param {number} b\r\n   */\n  var cmp = function cmp(a, b) {\n    if (a > b) return +1;\n    if (a < b) return -1;\n    return 0;\n  };\n\n  exports.weightedIntervalMerge = weightedIntervalMerge;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/weighted-interval-merge/dist/weighted-interval-merge.js\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}