{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 56e92a08121018b68067","webpack:///./src/core/track.ts","webpack:///./src/strategies/peak.ts","webpack:///./src/strategies/rms.ts","webpack:///./src/methods/flatten.ts","webpack:///./src/config/managerconfig.ts","webpack:///./src/index.ts","webpack:///./src/core/waveshaper.ts"],"names":[],"mappings":"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","file":"waveshaper.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"waveshaper\"] = factory();\n\telse\n\t\troot[\"waveshaper\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 56e92a08121018b68067","import { ManagerOptions } from '../config/managerconfig';\r\nimport calculatePeaks from '../strategies/peak'\r\nimport calculateRms from '../strategies/rms'\r\nimport Interval from '../models/interval';\r\nimport flattenSegments from '../methods/flatten';\r\n\r\nexport default class Track {\r\n    flattened: Interval[];\r\n\r\n    constructor(public readonly id: string, public intervals: Interval[]) {\r\n        this.flattened = flattenSegments(this.intervals);\r\n    }\r\n\r\n    flatten() {\r\n        this.flattened = flattenSegments(this.intervals);\r\n    }\r\n\r\n    /**\r\n     * Gets the duration of the audio in seconds\r\n     * \r\n     * @returns Decimal value of total duration in seconds\r\n     */\r\n    getDuration = (): number => Math.max(...this.intervals.map(s => s.end));\r\n\r\n    /**\r\n     * Gets the summerized values for the current settings\r\n     * \r\n     * @param options\r\n     * @param dataMap\r\n     * @returns Two dimensional array, one entry for each pixel, for each pixel a min\r\n     * and a max value.\r\n     */\r\n    calculate(options: ManagerOptions, dataMap: Map<string, Float32Array>): Float32Array {\r\n        switch (options.meterType) {\r\n            case 'peak':\r\n                return calculatePeaks(options, this.flattened, dataMap);\r\n            default:\r\n                return calculateRms(options, this.flattened, dataMap);\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/core/track.ts","//import Interval from '../models/interval';\r\nimport { ManagerOptions } from '../config/managerconfig';\r\nimport Interval from '../models/interval';\r\n\r\n/**\r\n * Calculates peak values\r\n * \r\n * @export\r\n * @param resolution \r\n * @param samplesPerPixel \r\n * @param width \r\n * @param intervals \r\n * @param scrollPosition \r\n * @param sampleRate\r\n * @param dataMap\r\n * @returns \r\n */\r\nexport default (options: ManagerOptions, intervals: Interval[], dataMap: Map<string, Float32Array>): Float32Array => {\r\n    \r\n    const sampleSize = Math.ceil(options.samplesPerPixel / options.resolution);\r\n    const start = options.scrollPosition * options.samplesPerPixel;\r\n    const startSecond = start / options.samplerate;\r\n    const secondsPerPixel = options.samplesPerPixel / options.samplerate;\r\n    const endSecond = startSecond + (options.width * secondsPerPixel);\r\n\r\n    const peaks = new Float32Array(options.width * 4);\r\n\r\n    let currentIntervalIndex = intervals.findIndex(i => i.end > startSecond && i.start + i.offsetStart < endSecond);\r\n\r\n    // There are no intervals in this range so return empty array\r\n    if(currentIntervalIndex === -1)\r\n        return peaks;\r\n\r\n    const maxIntervalIncrementIndex = intervals.length - 1;\r\n\r\n    let currentInterval = intervals[currentIntervalIndex];\r\n    let buffer = dataMap.get(currentInterval.source);\r\n    \r\n    // For each pixel we display\r\n    for (let i = 0; i < options.width; i++) {\r\n        const currentSecond = startSecond + (i * secondsPerPixel);\r\n\r\n        if(currentSecond >= currentInterval.end) {\r\n            if(currentIntervalIndex === maxIntervalIncrementIndex) {\r\n                return peaks;\r\n            } else {\r\n                currentInterval = intervals[++currentIntervalIndex];\r\n                buffer = dataMap.get(currentInterval.source);\r\n            }\r\n        }\r\n\r\n        if (currentInterval.start + currentInterval.offsetStart > currentSecond) {\r\n            continue;\r\n        }\r\n\r\n        const startBorder = currentSecond - secondsPerPixel < currentInterval.start + currentInterval.offsetStart;\r\n        const endBorder = currentSecond + secondsPerPixel > currentInterval.end;\r\n        const intervalBorder = startBorder || endBorder ? 1 : 0;\r\n\r\n        if (buffer == null) {\r\n            peaks.set([0, 0, intervalBorder, 1], (i * 4));\r\n            continue;\r\n        }\r\n\r\n        const secondsIntoInterval = currentSecond - currentInterval.start;\r\n        const startSample = Math.floor(secondsIntoInterval * options.samplerate);\r\n\r\n        const endSample = startSample + options.samplesPerPixel;\r\n        const length = buffer.length;\r\n        const loopEnd = length < endSample ? length : endSample;\r\n\r\n        // Cycle through the data-points relevant to the pixel\r\n        // Don't cycle through more than sampleSize frames per pixel.\r\n        let min = 0, max = 0;\r\n        for (let j = startSample; j < loopEnd; j += sampleSize) {\r\n            const sample = buffer[j];\r\n\r\n            // Keep track of positive and negative values separately\r\n            if (sample > max) max = sample;\r\n            else if (sample < min) min = sample;\r\n        }\r\n\r\n        peaks.set([min, max, intervalBorder, 1], (i * 4));\r\n    }\r\n    return peaks;\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/strategies/peak.ts","//import Interval from '../models/interval';\r\nimport { ManagerOptions } from '../config/managerconfig';\r\nimport Interval from '../models/interval';\r\n\r\n/**\r\n * Calculate rms values\r\n * \r\n * @export\r\n * @param resolution \r\n * @param samplesPerPixel \r\n * @param width \r\n * @param intervals \r\n * @param scrollPosition \r\n * @param sampleRate\r\n * @param dataMap\r\n * @returns \r\n */\r\nexport default (options: ManagerOptions, intervals: Interval[], dataMap: Map<string, Float32Array>): Float32Array => {\r\n\r\n    const sampleSize = Math.ceil(options.samplesPerPixel / options.resolution);\r\n    const start = options.scrollPosition * options.samplesPerPixel;\r\n    const startSecond = start / options.samplerate;\r\n    const secondsPerPixel = options.samplesPerPixel / options.samplerate;\r\n    const endSecond = startSecond + (options.width * secondsPerPixel);\r\n\r\n    const peaks = new Float32Array(options.width * 4);\r\n\r\n    let currentIntervalIndex = intervals.findIndex(i => i.end > startSecond && i.start + i.offsetStart < endSecond);\r\n\r\n    // There are no intervals in this range so return empty array\r\n    if(currentIntervalIndex === -1)\r\n        return peaks;\r\n\r\n    const maxIntervalIncrementIndex = intervals.length - 1;\r\n\r\n    let currentInterval = intervals[currentIntervalIndex];\r\n    let buffer = dataMap.get(currentInterval.source);\r\n\r\n    // For each pixel we display\r\n    for (let i = 0; i < options.width; i++) {\r\n        const currentSecond = startSecond + (i * secondsPerPixel);\r\n\r\n        if(currentSecond >= currentInterval.end) {\r\n            if(currentIntervalIndex === maxIntervalIncrementIndex) {\r\n                return peaks;\r\n            } else {\r\n                currentInterval = intervals[++currentIntervalIndex];\r\n                buffer = dataMap.get(currentInterval.source);\r\n            }\r\n        }\r\n\r\n        if (currentInterval.start + currentInterval.offsetStart > currentSecond) {\r\n            continue;\r\n        }\r\n\r\n        const startBorder = currentSecond - secondsPerPixel < currentInterval.start + currentInterval.offsetStart;\r\n        const endBorder = currentSecond + secondsPerPixel > currentInterval.end;\r\n        const intervalBorder = startBorder || endBorder ? 1 : 0;\r\n\r\n        if (buffer == null) {\r\n            peaks.set([0, 0, intervalBorder, 1], (i * 4));\r\n            continue;\r\n        }\r\n\r\n        const secondsIntoInterval = currentSecond - currentInterval.start;\r\n        const startSample = Math.floor(secondsIntoInterval * options.samplerate);\r\n\r\n        const endSample = startSample + options.samplesPerPixel;\r\n        const length = buffer.length;\r\n        const loopEnd = length < endSample ? length : endSample;\r\n\r\n        // Cycle through the data-points relevant to the pixel\r\n        // Don't cycle through more than sampleSize frames per pixel.\r\n        let posSum = 0, negSum = 0, count = 0;\r\n        for (let j = startSample; j < loopEnd; j += sampleSize, count++) {\r\n            const val = buffer[j];\r\n            // Keep track of positive and negative values separately\r\n            if (val > 0) {\r\n                posSum += val * val;\r\n            } else {\r\n                negSum += val * val;\r\n            }\r\n        }\r\n\r\n        const min = -Math.sqrt(negSum / count);\r\n        const max = Math.sqrt(posSum / count);\r\n\r\n        peaks.set([min, max, intervalBorder, 1], (i * 4));\r\n    }\r\n    return peaks;\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/strategies/rms.ts","import Interval from \"../models/interval\";\r\n//import Interval from \"../models/interval\";\r\n\r\ndeclare type IntervalMap = {[key: string] : Interval[]};\r\nconst start = (segment: Interval) => segment.start + segment.offsetStart;\r\n\r\n/**\r\n * The algorithm first calculates real start and end times of each segment,\r\n * sorts them by priority, then start time.\r\n *\r\n * Finally it merges the segments by index so there are no overlapping\r\n * segments and those with highest index are on top.\r\n *\r\n * @export\r\n * @param segments Segments to flatten\r\n * @returns flattened Interval array\r\n */\r\nexport default (segments: Interval[]): Interval[] => {\r\n  const sorted = sort(segments);\r\n  const normalized = normalizeIndex(sorted);\r\n  const copied = copy(normalized);\r\n  const grouped = groupByIndex(copied);\r\n\r\n  return weightedMerge(grouped);\r\n}\r\n\r\n/**\r\n * Copies elements so original are unaltered\r\n * \r\n * @param intervals \r\n */\r\nconst copy = (intervals: Interval[]): Interval[] => intervals.map(i => ({ ...i }));\r\n  \r\n\r\n/**\r\n * When an element is altered the index is set very high,\r\n * this functions normalizes to indexes back to 0\r\n * \r\n * @param segments \r\n */\r\nconst normalizeIndex = (segments: Interval[]): Interval[] => {\r\n  let index = 0;\r\n  let preNormalizeIndex = Number.MIN_SAFE_INTEGER;\r\n  segments.forEach(el => {\r\n    if (el.index > preNormalizeIndex) {\r\n      preNormalizeIndex = el.index;\r\n      el.index = ++index;\r\n    } else {\r\n      el.index = index;\r\n    }\r\n  });\r\n  return segments;\r\n}\r\n\r\n/**\r\n * Sorts the intervals by index, then by start\r\n * \r\n * @param intervals \r\n * @return Interval array\r\n */\r\nconst sort = (intervals: Interval[]): Interval[] => \r\n  intervals.sort((a, b) => cmp(a.index, b.index) || cmp(start(a), start(b)));\r\n\r\n/**\r\n * Returns a map of intervals grouped by the key property\r\n * \r\n * @param intervals \r\n * @param key \r\n * \r\n * @returns Map of index => interval[]\r\n */\r\nconst groupByIndex = (intervals: Interval[]): IntervalMap =>\r\n  intervals.reduce((groups, interval) => {\r\n    (groups[interval.index] = groups[interval.index] || []).push(interval);\r\n    return groups;\r\n  }, <IntervalMap>{});\r\n\r\n\r\n/**\r\n * Merges all the groups by index\r\n * \r\n * @param grouped \r\n * @returns Interval array\r\n */\r\nconst weightedMerge = (grouped: IntervalMap): Interval[] => {\r\n  let flattened: Interval[] | null = null;\r\n  for (let index of Object.keys(grouped)) {\r\n    const merged = merge(grouped[index]);\r\n    if (flattened == null) {\r\n      flattened = merged;\r\n    } else {\r\n      flattened = combine(merged, flattened);\r\n    }\r\n  }\r\n  return <Interval[]>flattened;\r\n}\r\n\r\n/**\r\n * Merges a set of intervals with the same index and remove any overlaps, left to right\r\n * \r\n * @param intervals \r\n * @returns Interval array\r\n */\r\nconst merge = (intervals: Interval[]): Interval[] => {\r\n  if (intervals.length <= 1) \r\n    return intervals;\r\n\r\n  const result: Interval[] = [];\r\n\r\n  let current = intervals[0];\r\n  for (let i = 1; i < intervals.length; i++) {\r\n    const next = intervals[i];\r\n\r\n    // If current is completely overlapped by second it is merged into it\r\n    if (current.end >= next.end) {\r\n      continue;\r\n    // Resolves partial overlaps by setting end of current to start of next\r\n    } else if(start(next) < current.end) {\r\n      result.push({ ...current, end: start(next) });\r\n      current = next;\r\n    } else {\r\n      // No overlap, push onto results\r\n      result.push(current);\r\n      current = next;\r\n    }\r\n  }\r\n\r\n  result.push(current);\r\n  return result;\r\n}\r\n\r\n/**\r\n * Given two sets of intervals it merges them so the highIndexes set has priority\r\n *\r\n * @param highIndexes\r\n * @param lowIndexes\r\n * \r\n * @returns Interval array\r\n */\r\nconst combine = (highIndexes: Interval[], lowIndexes: Interval[]): Interval[] => {\r\n  let highIndex = 0;\r\n  let lowIndex = 0;\r\n\r\n  const merged: Interval[] = [];\r\n\r\n  while (highIndex < highIndexes.length || lowIndex < lowIndexes.length) {\r\n    \r\n    const high = highIndexes[highIndex];\r\n    const low = lowIndexes[lowIndex];\r\n\r\n    // Only low priority left so push low onto results\r\n    if (highIndex === highIndexes.length) {\r\n      merged.push({ ...low });\r\n      lowIndex++;\r\n    // Only high priority left so push high onto results\r\n    } else if (lowIndex === lowIndexes.length) {\r\n      merged.push({ ...high });\r\n      highIndex++;\r\n    // High priority start before or at same time as low\r\n    } else if (start(high) <= start(low)) {\r\n      // No overlap between low and high\r\n      // low:                 ----------------------\r\n      // high: ---------------\r\n      if(high.end <= start(low)) {\r\n      // Partial overlap where high ends after low\r\n      // low:                 ----------------------\r\n      // high: ----------------------\r\n      } else if(high.end < low.end) {\r\n        low.offsetStart = high.end - low.start;\r\n      // Low index completely overlapped, dismiss it\r\n      // low:               -----------\r\n      // high: -------------------------------------\r\n      } else {\r\n        lowIndex++;\r\n      }\r\n\r\n      merged.push({ ...high });\r\n      highIndex++;\r\n    // Low priority starts before high\r\n    } else {\r\n      // No overlap between low and high intervals\r\n      // low: ---------------\r\n      // high                ----------------------\r\n      if (low.end <= start(high)) {\r\n        merged.push({ ...low });\r\n        lowIndex++;\r\n      // Partial overlap where high ends after low\r\n      // low: ---------------------\r\n      // high                ----------------------\r\n      } else if (high.end > low.end) {\r\n        merged.push({ ...low, end: start(high) });\r\n        lowIndex++;\r\n      // Partial overlap where high ends before low\r\n      // low: -------------------------------------\r\n      // high             -----------\r\n      } else {\r\n        merged.push({ ...low, end: start(high) });\r\n        low.offsetStart = high.end - low.start;\r\n      } \r\n    }\r\n  }\r\n\r\n  return merged;\r\n}\r\n\r\n/**\r\n *\r\n * @param a\r\n * @param b\r\n */\r\nconst cmp = (a: number, b: number): 1 | -1 | 0 => {\r\n  if (a > b) return +1;\r\n  if (a < b) return -1;\r\n  return 0;\r\n};\n\n\n// WEBPACK FOOTER //\n// ./src/methods/flatten.ts","export type MeterType = 'peak' | 'rms';\r\n\r\nexport interface ManagerOptions {\r\n    scrollPosition: number;\r\n    samplesPerPixel: number;\r\n    resolution: number;\r\n    meterType: MeterType;\r\n    width: number;\r\n    samplerate: number;\r\n}\r\n\r\nexport interface ManagerInput {\r\n    scrollPosition?: number;\r\n    samplesPerPixel?: number;\r\n    resolution?: number;\r\n    meterType?: MeterType;\r\n    width?: number;\r\n    samplerate?: number;\r\n}\r\n\r\nconst defaultOptions: ManagerOptions = {\r\n    scrollPosition: 0,\r\n    samplesPerPixel: 1024,\r\n    resolution: 10,\r\n    meterType: 'rms',\r\n    width: 300,\r\n    samplerate: 44100\r\n}\r\n\r\nexport default defaultOptions;\n\n\n// WEBPACK FOOTER //\n// ./src/config/managerconfig.ts","import WaveShaper from \"./core/waveshaper\";\r\nimport Track from './core/track'\r\nimport Interval from './models/interval';\r\nimport defaultConfig, { ManagerInput, ManagerOptions } from './config/managerconfig';\r\nimport rms from './strategies/rms';\r\nimport peak from './strategies/peak';\r\nimport flatten from './methods/flatten';\r\n\r\nexport {\r\n    WaveShaper,\r\n    Track,\r\n    Interval,\r\n    defaultConfig,\r\n    rms,\r\n    peak,\r\n    flatten,\r\n    ManagerOptions,\r\n    ManagerInput\r\n};\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","import Track from './track';\r\nimport Data from '../models/data';\r\nimport defaultOptions, { ManagerOptions, ManagerInput } from '../config/managerconfig';\r\nimport TrackInput from '../models/track-input';\r\nimport ProcessResult from '../models/process-result';\r\nimport WaveShaperCallback from '../models/callback';\r\n\r\n/**\r\n * \r\n * \r\n * @export\r\n */\r\nexport default class WaveShaper {\r\n    \r\n    /**\r\n     * Map of waveshapers managed by the manager\r\n     * \r\n     * @readonly\r\n     * @memberof WaveShaper\r\n     */\r\n    protected readonly tracks = new Map<string, Track>();\r\n\r\n    /**\r\n     * Map of audio data\r\n     * \r\n     * @readonly\r\n     * @memberof WaveShaper\r\n     */\r\n    protected readonly audioData = new Map<string, Float32Array>();\r\n    \r\n    /**\r\n     * @description Active id's, redraws when draw is called without argument\r\n     * \r\n     * @memberof WaveShaper\r\n     */\r\n    protected activeWaveShapers: string[] = [];\r\n\r\n    /**\r\n     * @description Map of callback functions\r\n     * \r\n     * @readonly\r\n     * @memberof WaveShaper\r\n     */\r\n    protected readonly callbackMap = new Map<string, WaveShaperCallback[]>();\r\n    \r\n    /**\r\n     * @description Currect settings\r\n     * \r\n     * @readonly\r\n     * @memberof WaveShaper\r\n     */\r\n    public get options(): ManagerOptions { return {...this._options} }\r\n    protected _options: ManagerOptions;\r\n\r\n    \r\n    /**\r\n     * @description Last result of calling process, argument given to all callbacks\r\n     * \r\n     * @readonly\r\n     * @memberof WaveShaper\r\n     */\r\n    public get lastProcessResult(): ProcessResult | null { return this._lastProcessResult; }\r\n    protected _lastProcessResult: ProcessResult | null\r\n\r\n    \r\n    /**\r\n     * @description Total duration of all tracks\r\n     * \r\n     * @readonly\r\n     * @memberof WaveShaper\r\n     */\r\n    public get duration() { return this._duration; }\r\n    protected _duration: number;\r\n\r\n    /**\r\n     * @param [options=defaultOptions] Initial options\r\n     * @throws Throws an error if samplerate is null or NaN\r\n     */\r\n    constructor(options: ManagerInput = defaultOptions) {\r\n        if(!this.optionsValid(options)) {\r\n            throw new Error(`Invalid options given: ${JSON.stringify(options)}`);\r\n        }\r\n\r\n        this._options = { ...defaultOptions, ...options };\r\n    }\r\n\r\n    /**\r\n     * @description Flattens the segments of the given waveshaper id\r\n     * \r\n     * @param id \r\n     * @returns WaveShaper instance\r\n     */\r\n    flatten(...ids: string[]): WaveShaper {\r\n        this.getProcessIds(...ids).forEach(id => {\r\n            const waveShaper = this.getTrack(id);\r\n            if(waveShaper != null) waveShaper.flatten();\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Processes all relevant WaveShapers and invokes registered callbacks\r\n     * \r\n     * @param ids Options array of id's to draw\r\n     * @param forceDraw Force redraw of the given waves\r\n     * \r\n     * @returns WaveShaper instance\r\n     */\r\n    process(...ids: string[]): WaveShaper {\r\n        const toProcess = this.getProcessIds(...ids);\r\n        const options: ManagerOptions = { ...this.options };\r\n\r\n        const data: Data[] = [];\r\n        for(let i = 0; i < toProcess.length; i++) {\r\n            const id = toProcess[i];\r\n\r\n            const wave = this.getTrack(id);\r\n            if(wave == null) continue;\r\n\r\n            const peaks = wave.calculate(options, this.audioData);\r\n            data.push({ id, data: peaks });\r\n        }\r\n\r\n        // Invoke callbacks after returning value.\r\n        this._lastProcessResult = { options, data };\r\n        this.invokeCallbacks(this._lastProcessResult);\r\n\r\n        return this;\r\n    }\r\n    \r\n    /**\r\n     * Registers a callback that fires when the track with given id is processed\r\n     * \r\n     * @param id id of Track to register to\r\n     * @param callBack will be invoked when the given track is processed\r\n     * \r\n     * @returns WaveShaper instance\r\n     */\r\n    on(id: string, callBack: WaveShaperCallback): WaveShaper {\r\n        let callbackArray = this.callbackMap.get(id);\r\n        if(callbackArray == null) {\r\n            this.callbackMap.set(id, [callBack]);\r\n        } else {\r\n            callbackArray.push(callBack)\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Unregisters a callback from the given track, will no longer be called\r\n     * \r\n     * @param id id of Track to unregister from\r\n     * @param callBack callback to remove\r\n     * \r\n     * @returns WaveShaper instance\r\n     */\r\n    off(id: string, callBack: WaveShaperCallback): WaveShaper {\r\n        let callbackArray = this.callbackMap.get(id);\r\n        if(callbackArray == null) return this;\r\n\r\n        const index = callbackArray.indexOf(callBack);\r\n        if(index < 0) return this;\r\n\r\n        callbackArray = callbackArray.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @description Merges the given options into the current and returns updated options\r\n     * \r\n     * @param options A (partial) ManagerOptions object\r\n     * @returns WaveShaper instance\r\n     */\r\n    setOptions(options: ManagerInput): WaveShaper {\r\n        if(!this.optionsValid(options)) {\r\n            throw new Error(`Invalid options given: ${JSON.stringify(options)}`);\r\n        }\r\n\r\n        this._options = { ...this.options, ...options };\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @description Adds a waveshaper to the manager\r\n     * \r\n     * @param id id of WaveShaper\r\n     * @param segments Segments in wave\r\n     * @param color Background color of segments\r\n     * \r\n     * @returns WaveShaper instance\r\n     */\r\n    setTracks(...tracks: TrackInput[]): WaveShaper {\r\n        tracks.forEach(track => {\r\n            const foundWave = this.getTrack(track.id);\r\n            if(foundWave == null) {\r\n                const wave = new Track(track.id, track.intervals);\r\n                this.tracks.set(track.id, wave);\r\n            } else {\r\n                foundWave.intervals = track.intervals;\r\n                foundWave.flatten();\r\n            }\r\n        });\r\n        this._duration = this.getDuration();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @description Adds audio data to the waveshaper and redraws waveshapers using it\r\n     * \r\n     * @param id  Data id, refered to by source parameter of segments\r\n     * @param data AudioBuffer with audio data\r\n     * \r\n     * @returns WaveShaper instance\r\n     */\r\n    setData(...data: Data[]) {\r\n        data.forEach(d => {\r\n            this.audioData.set(d.id, d.data);\r\n        });\r\n        \r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @description The given id's are set as the active waveshapers, process only processes these when set,\r\n     * call with no values to allways process all values (default)\r\n     * \r\n     * @param ids Waveshaper id's to set as active\r\n     * \r\n     * @returns WaveShaper instance\r\n     */\r\n    setActive(...ids: string[]): WaveShaper {\r\n        this.activeWaveShapers = ids;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @description Removes the waves and all callbacks with given id from the manager\r\n     * \r\n     * @param id \r\n     * \r\n     * @returns WaveShaper instance\r\n     */\r\n    clearTracks(...ids: string[]): WaveShaper {\r\n        ids.forEach(id => {\r\n            this.removeCallbacksById(id);\r\n            this.tracks.delete(id);\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @description Gets Track with given id\r\n     * \r\n     * @param id \r\n     * @returns Track with given ID\r\n     */\r\n    getTrack(id: string): Track | undefined {\r\n        return this.tracks.get(id);\r\n    }\r\n\r\n    /**\r\n     * Validates given options\r\n     * \r\n     * @param options \r\n     * @returns true if valid, false if not\r\n     */\r\n    protected optionsValid(options: ManagerInput) {\r\n        return (options.samplesPerPixel === undefined || options.samplesPerPixel > 0) &&\r\n            (options.meterType === undefined || options.meterType) &&\r\n            (options.resolution === undefined || options.resolution > 0) &&\r\n            (options.width === undefined || options.width > 0) &&\r\n            (options.scrollPosition === undefined || options.scrollPosition >= 0) &&\r\n            (options.samplerate === undefined || options.samplerate > 0);\r\n    }\r\n\r\n    /**\r\n     * Invokes all registered callbacks registered to a waveshaper id in the data list\r\n     * \r\n     * @param options \r\n     * @param data \r\n     */\r\n    protected invokeCallbacks(result: ProcessResult) {\r\n        for(let i = 0; i < result.data.length; i++) {\r\n            const trackResult = result.data[i];\r\n\r\n            const callbacks = this.callbackMap.get(trackResult.id);\r\n            if(callbacks == null) continue;\r\n\r\n            for(let j = 0; j < callbacks.length; j++) {\r\n                const callback = callbacks[j];\r\n                callback(result.options, new Float32Array(trackResult.data));\r\n            }\r\n        }\r\n    }\r\n\r\n    protected getProcessIds(...ids: string[]) : string[] {\r\n        if(ids.length > 0) \r\n            return ids;\r\n\r\n        if(this.activeWaveShapers && this.activeWaveShapers.length > 0) \r\n            return this.activeWaveShapers;\r\n\r\n        return Array.from(this.tracks.keys());\r\n    }\r\n\r\n    protected removeCallbacksById(id: string) {\r\n        const callbackArray = this.callbackMap.get(id);\r\n        if(callbackArray == null) return;\r\n\r\n        callbackArray.splice(0, callbackArray.length);\r\n        this.callbackMap.delete(id);\r\n    }\r\n\r\n    /**\r\n     * @description Returns the maximum duration of all the waveshapers managed by this class\r\n     * \r\n     * @returns Maximum duration in seconds\r\n     * @memberof WaveShaper\r\n     */\r\n    protected getDuration(): number {\r\n        return Array.from(this.tracks.values()).reduce((maxDuration, waveShaper) => {\r\n            const duration = waveShaper.getDuration();\r\n            return duration > maxDuration ? duration : maxDuration;\r\n        }, 0);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/core/waveshaper.ts"],"sourceRoot":""}